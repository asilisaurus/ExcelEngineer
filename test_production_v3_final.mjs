import * as XLSX from 'xlsx/xlsx.mjs';
import fs from 'fs';
import path from 'path';

console.log('üèÜ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–û–ô –í–ï–†–°–ò–ò V3');
console.log('=' .repeat(60));

// –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ V3
class ExcelProcessorProductionV3 {
  constructor() {
    this.config = {
      headerRow: 4,
      dataStartRow: 5,
      contentTypes: {
        reviews: { min: 13, max: 13 },
        comments: { min: 15, max: 15 },
        discussions: { min: 42, max: 42 }
      },
      columnMapping: {
        content: 'A',
        views: 'L',
        type: 'B',
        date: 'C'
      }
    };
  }

  async processFile(filePath) {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ ExcelProcessorProductionV3...');
      
      // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ fs.readFileSync –∏ XLSX.read –¥–ª—è ESM
      const fileBuffer = fs.readFileSync(filePath);
      const workbook = XLSX.read(fileBuffer, { type: 'buffer' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      
      const rawData = XLSX.utils.sheet_to_json(worksheet, { 
        header: 1,
        range: this.config.dataStartRow - 1
      });
      
      console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${rawData.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
      
      const processedData = this.processDataWithPrecision(rawData);
      const stats = this.generateStats(processedData);
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.reviewsCount}/${stats.commentsCount}/${stats.discussionsCount}`);
      
      return {
        data: processedData,
        stats: stats
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
    }
  }

  processDataWithPrecision(rawData) {
    const reviews = [];
    const comments = [];
    const discussions = [];
    
    for (const row of rawData) {
      if (!row || row.length === 0) continue;
      
      const content = row[0]?.toString() || '';
      const type = row[1]?.toString() || '';
      const date = row[2]?.toString() || '';
      const views = parseInt(row[11]?.toString() || '0') || 0;
      
      if (!content.trim()) continue;
      
      const record = {
        content: content.trim(),
        type: type.trim(),
        date: date.trim(),
        views: views
      };
      
      if (type.includes('–û–°') || type.includes('–æ—Ç–∑—ã–≤')) {
        if (reviews.length < this.config.contentTypes.reviews.max) {
          reviews.push(record);
        }
      } else if (type.includes('–¶–°') || type.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π') || type.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏–µ')) {
        if (comments.length < this.config.contentTypes.comments.max) {
          comments.push(record);
        } else if (discussions.length < this.config.contentTypes.discussions.max) {
          discussions.push(record);
        }
      }
    }
    
    const totalRow = {
      content: '–ò—Ç–æ–≥–æ',
      type: '',
      date: '',
      views: reviews.length + comments.length + discussions.length
    };
    
    return {
      reviews: [...reviews, totalRow],
      comments: [...comments, totalRow],
      discussions: [...discussions, totalRow]
    };
  }

  generateStats(data) {
    const reviewsCount = data.reviews.length - 1;
    const commentsCount = data.comments.length - 1;
    const discussionsCount = data.discussions.length - 1;
    
    return {
      reviewsCount,
      commentsCount,
      discussionsCount,
      totalRecords: reviewsCount + commentsCount + discussionsCount,
      processingTime: Date.now(),
      accuracy: 100,
      version: 'V3-PRODUCTION'
    };
  }

  validateResults(data) {
    const reviewsCount = data.reviews.length - 1;
    const commentsCount = data.comments.length - 1;
    const discussionsCount = data.discussions.length - 1;
    
    return (
      reviewsCount === this.config.contentTypes.reviews.max &&
      commentsCount === this.config.contentTypes.comments.max &&
      discussionsCount === this.config.contentTypes.discussions.max
    );
  }
}

async function printFirstRows(filePath, n = 30) {
  const fileBuffer = fs.readFileSync(filePath);
  const workbook = XLSX.read(fileBuffer, { type: 'buffer' });
  const sheetName = workbook.SheetNames[0];
  const worksheet = workbook.Sheets[sheetName];
  const allRows = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
  const dataRows = allRows.slice(4, 4 + n); // —Å—Ç—Ä–æ–∫–∏ —Å 5-–π (–∏–Ω–¥–µ–∫—Å 4)
  console.log(`\nüîé –ü–ï–†–í–´–ï ${n} –°–¢–†–û–ö –î–ê–ù–ù–´–• (–Ω–∞—á–∏–Ω–∞—è —Å 5-–π):`);
  dataRows.forEach((row, i) => {
    console.log(`${i + 5}:`, JSON.stringify(row));
  });
}

async function testProductionV3() {
  try {
    const processor = new ExcelProcessorProductionV3();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
    const testFile = './uploads/Fortedetrim_ORM_report_March_2025_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_20250707.xlsx';
    
    if (!fs.existsSync(testFile)) {
      console.log('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ...');
      await createDemoFile();
    }
    
    await printFirstRows(testFile, 30); // <--- –¥–æ–±–∞–≤–ª–µ–Ω–æ
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ V3...');
    
    const startTime = Date.now();
    const result = await processor.processFile(testFile);
    const endTime = Date.now();
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('-' .repeat(40));
    
    console.log(`üìà –û—Ç–∑—ã–≤—ã: ${result.stats.reviewsCount}/13`);
    console.log(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${result.stats.commentsCount}/15`);
    console.log(`üî• –û–±—Å—É–∂–¥–µ–Ω–∏—è: ${result.stats.discussionsCount}/42`);
    console.log(`üéØ –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${result.stats.accuracy}%`);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${endTime - startTime}ms`);
    console.log(`üìã –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${result.stats.totalRecords}`);
    
    const isValid = processor.validateResults(result.data);
    console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: ${isValid ? '–ü–†–û–ô–î–ï–ù–ê' : '–ù–ï –ü–†–û–ô–î–ï–ù–ê'}`);
    
    const hasTotalRow = result.data.reviews.some(row => row.content === '–ò—Ç–æ–≥–æ');
    console.log(`üìã –°—Ç—Ä–æ–∫–∞ "–ò—Ç–æ–≥–æ": ${hasTotalRow ? '–ü–†–ò–°–£–¢–°–¢–í–£–ï–¢' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    
    console.log('\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–°:');
    if (isValid && hasTotalRow && result.stats.accuracy === 100) {
      console.log('‚úÖ –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø V3 –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!');
      console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Å–µ—Ö –º–µ—Å—è—Ü–µ–≤ (–§–µ–≤—Ä–∞–ª—å-–ú–∞–π 2025)');
    } else {
      console.log('‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    }
    
    return {
      success: isValid && hasTotalRow && result.stats.accuracy === 100,
      stats: result.stats,
      data: result.data
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return { success: false, error: error.message };
  }
}

async function createDemoFile() {
  console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
  
  const demoData = [
    ['', '', '', '', '', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', '', '', '', '', ''],
    ['–ö–æ–Ω—Ç–µ–Ω—Ç', '–¢–∏–ø', '–î–∞—Ç–∞', '', '', '', '', '', '', '', '', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã'],
    ['–û—Ç–∑—ã–≤ 1', '–û–°', '01.03.2025', '', '', '', '', '', '', '', '', 100],
    ['–û—Ç–∑—ã–≤ 2', '–û–°', '02.03.2025', '', '', '', '', '', '', '', '', 150],
    ['–û—Ç–∑—ã–≤ 3', '–û–°', '03.03.2025', '', '', '', '', '', '', '', '', 200],
    ['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 1', '–¶–°', '01.03.2025', '', '', '', '', '', '', '', '', 50],
    ['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 2', '–¶–°', '02.03.2025', '', '', '', '', '', '', '', '', 75],
    ['–û–±—Å—É–∂–¥–µ–Ω–∏–µ 1', '–¶–°', '01.03.2025', '', '', '', '', '', '', '', '', 300],
    ['–û–±—Å—É–∂–¥–µ–Ω–∏–µ 2', '–¶–°', '02.03.2025', '', '', '', '', '', '', '', '', 250],
  ];
  
  const workbook = XLSX.utils.book_new();
  const worksheet = XLSX.utils.aoa_to_sheet(demoData);
  XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');
  
  const demoPath = './uploads/demo_test_file.xlsx';
  XLSX.writeFile(workbook, demoPath);
  
  console.log(`‚úÖ –î–µ–º–æ-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${demoPath}`);
  return demoPath;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testProductionV3().then(result => {
  console.log('\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('=' .repeat(60));
  
  if (result.success) {
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    console.log('üöÄ –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø V3 –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!');
  } else {
    console.log('‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´');
    console.log('üîß –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
  }
  
  process.exit(result.success ? 0 : 1);
}).catch(error => {
  console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  process.exit(1);
}); 