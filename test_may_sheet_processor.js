/**
 * ============================================================================
 * –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ö–†–ò–ü–¢–ê –ù–ê –õ–ò–°–¢–ï "–ú–ê–ô"
 * ============================================================================
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞ "–ú–∞–π"
 * –≠—Ç–∞–ª–æ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: 1pxUF5HnII7hVnaw077mE0FHqGp-TN1Rk
 * ============================================================================
 */

// =============================================================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// =============================================================================

// ID —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å 4 –º–µ—Å—è—Ü–∞–º–∏
const REFERENCE_SHEET_ID = '1pxUF5HnII7hVnaw077mE0FHqGp-TN1Rk';

// –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
const TARGET_SHEET_NAME = '–ú–∞–π';

// =============================================================================
// –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
// =============================================================================

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞ "–ú–∞–π"
 */
function testMaySheetProcessor() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ –ª–∏—Å—Ç–µ "–ú–∞–π"...');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ "–ú–∞–π"
    const mayData = getMaySheetData();
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${mayData.length} —Å—Ç—Ä–æ–∫ –∏–∑ –ª–∏—Å—Ç–∞ "–ú–∞–π"`);
    
    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    const structureAnalysis = analyzeMaySheetStructure(mayData);
    console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    
    // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const processedData = processMaySheetData(mayData);
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedData.length} –∑–∞–ø–∏—Å–µ–π`);
    
    // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const results = analyzeMayResults(processedData);
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    
    // 5. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    const testReport = createMayTestReport(mayData, processedData, results);
    
    // 6. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª
    const resultFileId = createMayResultFile(processedData, results, testReport);
    console.log(`üíæ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${resultFileId}`);
    
    return {
      success: true,
      sourceRows: mayData.length,
      processedRows: processedData.length,
      results: results,
      testReport: testReport,
      resultFileId: resultFileId
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞ "–ú–∞–π"
 */
function getMaySheetData() {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ "–ú–∞–π"...');
    
    const spreadsheet = SpreadsheetApp.openById(REFERENCE_SHEET_ID);
    const sheets = spreadsheet.getSheets();
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${sheets.length} –ª–∏—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ`);
    
    // –ò—â–µ–º –ª–∏—Å—Ç "–ú–∞–π"
    let maySheet = null;
    for (const sheet of sheets) {
      const sheetName = sheet.getName().toLowerCase();
      console.log(`üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Å—Ç: ${sheet.getName()}`);
      
      if (sheetName.includes('–º–∞–π') || sheetName.includes('may')) {
        maySheet = sheet;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ª–∏—Å—Ç "–ú–∞–π": ${sheet.getName()}`);
        break;
      }
    }
    
    if (!maySheet) {
      throw new Error('–õ–∏—Å—Ç "–ú–∞–π" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞
    const range = maySheet.getDataRange();
    const values = range.getValues();
    
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${values.length} —Å—Ç—Ä–æ–∫ –∏–∑ –ª–∏—Å—Ç–∞ "${maySheet.getName()}"`);
    
    return values;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞ "–ú–∞–π"
 */
function analyzeMaySheetStructure(data) {
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞ "–ú–∞–π"...');
  
  if (!data || data.length === 0) {
    throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
  }
  
  const analysis = {
    totalRows: data.length,
    headers: [],
    headerRow: 0,
    dataRowsCount: 0,
    emptyRowsCount: 0,
    sampleData: []
  };
  
  // –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const headerInfo = findMayHeaders(data);
  analysis.headers = headerInfo.headers;
  analysis.headerRow = headerInfo.row;
  
  console.log(`üìã –ù–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ ${analysis.headerRow + 1}:`);
  headerInfo.headers.forEach((header, index) => {
    if (header) {
      console.log(`   ${index + 1}. ${header}`);
    }
  });
  
  // –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
  const dataRows = data.slice(headerInfo.row + 1);
  
  for (const row of dataRows) {
    if (isEmptyRow(row)) {
      analysis.emptyRowsCount++;
    } else {
      analysis.dataRowsCount++;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö
      if (analysis.sampleData.length < 10) {
        analysis.sampleData.push({
          rowData: row.slice(0, 6).map(cell => (cell || '').toString().substring(0, 30)),
          contentType: determineContentType(row)
        });
      }
    }
  }
  
  console.log(`üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:`);
  console.log(`   - –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${analysis.totalRows}`);
  console.log(`   - –°—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏: ${analysis.dataRowsCount}`);
  console.log(`   - –ü—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: ${analysis.emptyRowsCount}`);
  console.log(`   - –°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${analysis.headerRow + 1}`);
  
  return analysis;
}

/**
 * –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞ "–ú–∞–π"
 */
function findMayHeaders(data) {
  console.log('üîç –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö...');
  
  for (let i = 0; i < Math.min(10, data.length); i++) {
    const row = data[i];
    if (!row || row.length === 0) continue;
    
    const rowStr = row.map(cell => (cell || '').toString().toLowerCase()).join(' ');
    
    // –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if (rowStr.includes('—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è') || 
        rowStr.includes('–ø–ª–æ—â–∞–¥–∫–∞') || 
        rowStr.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è') ||
        rowStr.includes('—Ç–∏–ø –ø–æ—Å—Ç–∞')) {
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
      return {
        row: i,
        headers: row.map(cell => (cell || '').toString().trim())
      };
    }
  }
  
  // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
  console.log('‚ö†Ô∏è –ö–ª—é—á–µ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É');
  return {
    row: 0,
    headers: data[0] ? data[0].map(cell => (cell || '').toString().trim()) : []
  };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞ "–ú–∞–π"
 */
function processMaySheetData(rawData) {
  console.log('‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞ "–ú–∞–π"...');
  
  if (!rawData || rawData.length === 0) {
    throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
  }
  
  // 1. –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const headerInfo = findMayHeaders(rawData);
  
  // 2. –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫
  const columnMapping = createMayColumnMapping(headerInfo.headers);
  
  // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
  const dataRows = rawData.slice(headerInfo.row + 1);
  const processedRows = [];
  let skippedRows = 0;
  
  for (let i = 0; i < dataRows.length; i++) {
    const row = dataRows[i];
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (isEmptyRow(row)) {
      skippedRows++;
      continue;
    }
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏-–∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π
    if (isSectionHeaderRow(row)) {
      console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞-–∑–∞–≥–æ–ª–æ–≤–æ–∫: ${row[0]}`);
      skippedRows++;
      continue;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentType = determineContentType(row);
    
    if (contentType !== 'unknown') {
      const processedRow = extractRowData(row, contentType, columnMapping);
      if (processedRow) {
        processedRows.push(processedRow);
      }
    } else {
      skippedRows++;
    }
  }
  
  console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
  console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${processedRows.length}`);
  console.log(`   - –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${skippedRows}`);
  
  return processedRows;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ª–∏—Å—Ç–∞ "–ú–∞–π"
 */
function createMayColumnMapping(headers) {
  const columnMapping = {};
  
  headers.forEach((header, index) => {
    const cleanHeader = header.toLowerCase().trim();
    if (cleanHeader) {
      columnMapping[cleanHeader] = index;
    }
  });
  
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è fallback
  const defaultMapping = {
    '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è': 0,
    '–ø–ª–æ—â–∞–¥–∫–∞': 1,
    '–ø—Ä–æ–¥—É–∫—Ç': 2,
    '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ': 3,
    '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è': 4,
    '—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏': 5,
    '–¥–∞—Ç–∞': 6,
    '–Ω–∏–∫': 7,
    '–∞–≤—Ç–æ—Ä': 8,
    '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–µ–º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ': 9,
    '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞': 10,
    '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ': 11,
    '–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ': 12,
    '—Ç–∏–ø –ø–æ—Å—Ç–∞': 13
  };
  
  return { ...defaultMapping, ...columnMapping };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
function determineContentType(row) {
  if (!row || row.length === 0) return 'unknown';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–ª–æ–Ω–∫—É (—Ç–∏–ø –ø–æ—Å—Ç–∞)
  const lastColIndex = row.length - 1;
  const lastColValue = (row[lastColIndex] || '').toString().toLowerCase().trim();
  
  if (lastColValue === '–æ—Å' || lastColValue === '–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') {
    return 'review';
  }
  
  if (lastColValue === '—Ü—Å' || lastColValue === '—Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') {
    return 'comment';
  }
  
  if (lastColValue === '–ø—Å' || lastColValue === '–ø–æ—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è') {
    return 'discussion';
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
  const firstColValue = (row[0] || '').toString().toLowerCase().trim();
  
  if (firstColValue.includes('–æ—Ç–∑—ã–≤') || firstColValue.includes('–æ—Å–Ω–æ–≤–Ω–æ–µ')) {
    return 'review';
  }
  
  if (firstColValue.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π') || firstColValue.includes('—Ü–µ–ª–µ–≤–æ–µ')) {
    return 'comment';
  }
  
  if (firstColValue.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏–µ') || firstColValue.includes('–ø–æ—Å—Ç')) {
    return 'discussion';
  }
  
  return 'unknown';
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Å–µ–∫—Ü–∏–∏
 */
function isSectionHeaderRow(row) {
  if (!row || row.length === 0) return false;
  
  const firstCell = (row[0] || '').toString().toLowerCase().trim();
  const headerPatterns = ['–æ—Ç–∑—ã–≤—ã', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–æ–±—Å—É–∂–¥–µ–Ω–∏—è', '–∏—Ç–æ–≥–æ', '–≤—Å–µ–≥–æ'];
  
  return headerPatterns.some(pattern => firstCell.includes(pattern));
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–æ–π
 */
function isEmptyRow(row) {
  return !row || row.every(cell => !cell || cell.toString().trim() === '');
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏
 */
function extractRowData(row, type, mapping) {
  try {
    // –ò–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
    const siteIndex = mapping['–ø–ª–æ—â–∞–¥–∫–∞'] || 1;
    const linkIndex = mapping['—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ'] || 3;
    const textIndex = mapping['—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'] || 4;
    const dateIndex = mapping['–¥–∞—Ç–∞'] || 6;
    const authorIndex = mapping['–∞–≤—Ç–æ—Ä'] || 8;
    const viewsIndex = mapping['–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ'] || 11;
    const engagementIndex = mapping['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ'] || 12;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const site = cleanValue(row[siteIndex]);
    const link = cleanValue(row[linkIndex]);
    const text = cleanValue(row[textIndex]);
    const date = cleanValue(row[dateIndex]);
    const author = cleanValue(row[authorIndex]);
    const views = extractViews(row[viewsIndex]);
    const engagement = extractEngagement(row[engagementIndex]);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!site && !text) {
      return null;
    }
    
    return {
      type: type,
      site: site || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
      link: link,
      text: text || '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞',
      date: date,
      author: author,
      views: views,
      engagement: engagement
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏:', error);
    return null;
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏
 */
function cleanValue(value) {
  if (!value) return '';
  return value.toString().trim();
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
 */
function extractViews(value) {
  if (!value) return 0;
  
  const str = value.toString().replace(/\D/g, '');
  const num = parseInt(str);
  
  return isNaN(num) ? 0 : num;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
 */
function extractEngagement(value) {
  if (!value) return 0;
  
  const str = value.toString().replace(/[^\d.,]/g, '').replace(',', '.');
  const num = parseFloat(str);
  
  return isNaN(num) ? 0 : num;
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
function analyzeMayResults(processedData) {
  console.log('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
  
  const reviews = processedData.filter(row => row.type === 'review');
  const comments = processedData.filter(row => row.type === 'comment');
  const discussions = processedData.filter(row => row.type === 'discussion');
  
  const results = {
    total: processedData.length,
    reviews: {
      count: reviews.length,
      percentage: Math.round((reviews.length / processedData.length) * 100)
    },
    comments: {
      count: comments.length,
      percentage: Math.round((comments.length / processedData.length) * 100)
    },
    discussions: {
      count: discussions.length,
      percentage: Math.round((discussions.length / processedData.length) * 100)
    }
  };
  
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:`);
  console.log(`   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${results.total}`);
  console.log(`   - –û—Ç–∑—ã–≤—ã: ${results.reviews.count} (${results.reviews.percentage}%)`);
  console.log(`   - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${results.comments.count} (${results.comments.percentage}%)`);
  console.log(`   - –û–±—Å—É–∂–¥–µ–Ω–∏—è: ${results.discussions.count} (${results.discussions.percentage}%)`);
  
  return results;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
 */
function createMayTestReport(sourceData, processedData, results) {
  console.log('üìã –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏...');
  
  const report = {
    testDate: new Date().toISOString(),
    sourceInfo: {
      totalRows: sourceData.length,
      processedRows: processedData.length,
      processingRate: Math.round((processedData.length / sourceData.length) * 100)
    },
    results: results,
    quality: {
      dataIntegrity: processedData.every(row => row.site && row.text),
      typeClassification: results.reviews.count > 0 && results.comments.count > 0,
      overallScore: 0
    }
  };
  
  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞
  let qualityScore = 0;
  if (report.quality.dataIntegrity) qualityScore += 50;
  if (report.quality.typeClassification) qualityScore += 30;
  if (report.sourceInfo.processingRate > 80) qualityScore += 20;
  
  report.quality.overallScore = qualityScore;
  
  console.log(`üìä –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω:`);
  console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${report.sourceInfo.processingRate}%`);
  console.log(`   - –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: ${report.quality.dataIntegrity ? '–•–æ—Ä–æ—à–µ–µ' : '–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è'}`);
  console.log(`   - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤: ${report.quality.typeClassification ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}`);
  console.log(`   - –û–±—â–∏–π –±–∞–ª–ª: ${report.quality.overallScore}/100`);
  
  return report;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
 */
function createMayResultFile(processedData, results, testReport) {
  try {
    console.log('üíæ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª...');
    
    const fileName = `–¢–µ—Å—Ç_–õ–∏—Å—Ç_–ú–∞–π_${new Date().toISOString().split('T')[0]}`;
    const spreadsheet = SpreadsheetApp.create(fileName);
    
    // –õ–∏—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const dataSheet = spreadsheet.getActiveSheet();
    dataSheet.setName('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    
    const headers = ['–¢–∏–ø', '–ü–ª–æ—â–∞–¥–∫–∞', '–°—Å—ã–ª–∫–∞', '–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞', '–ê–≤—Ç–æ—Ä', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ'];
    dataSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    
    if (processedData.length > 0) {
      const dataForSheet = processedData.map(row => [
        row.type === 'review' ? '–û—Ç–∑—ã–≤' : row.type === 'comment' ? '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' : '–û–±—Å—É–∂–¥–µ–Ω–∏–µ',
        row.site,
        row.link,
        row.text,
        row.date,
        row.author,
        row.views,
        row.engagement
      ]);
      
      dataSheet.getRange(2, 1, dataForSheet.length, headers.length).setValues(dataForSheet);
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    dataSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
    dataSheet.autoResizeColumns(1, headers.length);
    
    // –õ–∏—Å—Ç 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const statsSheet = spreadsheet.insertSheet('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    
    const statsData = [
      ['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
      ['–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π', results.total],
      ['–û—Ç–∑—ã–≤—ã', results.reviews.count],
      ['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', results.comments.count],
      ['–û–±—Å—É–∂–¥–µ–Ω–∏—è', results.discussions.count],
      ['–û–±—â–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞', `${testReport.quality.overallScore}/100`],
      ['–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö', testReport.quality.dataIntegrity ? '–î–∞' : '–ù–µ—Ç'],
      ['–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤', testReport.quality.typeClassification ? '–î–∞' : '–ù–µ—Ç']
    ];
    
    statsSheet.getRange(1, 1, statsData.length, 2).setValues(statsData);
    statsSheet.getRange(1, 1, 1, 2).setFontWeight('bold');
    statsSheet.autoResizeColumns(1, 2);
    
    console.log(`üíæ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${fileName}`);
    console.log(`üîó ID —Ñ–∞–π–ª–∞: ${spreadsheet.getId()}`);
    
    return spreadsheet.getId();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
    throw error;
  }
}

// =============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ü–£–°–ö–ê
// =============================================================================

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function main() {
  return testMaySheetProcessor();
}

/**
 * –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–∏—Å—Ç–∞ "–ú–∞–π"
 */
function quickMayAnalysis() {
  console.log('‚ö° –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–∏—Å—Ç–∞ "–ú–∞–π"...');
  
  try {
    const mayData = getMaySheetData();
    const structureAnalysis = analyzeMaySheetStructure(mayData);
    
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
    return structureAnalysis;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
    return { error: error.message };
  }
}

/**
 * –¢–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
 */
function processMayDataOnly() {
  console.log('‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞ "–ú–∞–π"...');
  
  try {
    const mayData = getMaySheetData();
    const processedData = processMaySheetData(mayData);
    const results = analyzeMayResults(processedData);
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return { processedData, results };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', error);
    return { error: error.message };
  }
}