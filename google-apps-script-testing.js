/**
 * üß™ –ü–û–õ–ù–û–¶–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GOOGLE APPS SCRIPT
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
 * 
 * –ê–≤—Ç–æ—Ä: AI Assistant + Background Agent
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 2025
 */

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ====================

const TEST_CONFIG = {
  // URL –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
  SOURCE_URL: 'https://docs.google.com/spreadsheets/d/1z4KJfXSNaV8Zw5Qi4hKdVsoKvt9GTSrweWv45URzB4I/edit?gid=1258324199#gid=1258324199',
  
  // URL —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  REFERENCE_URL: 'https://docs.google.com/spreadsheets/d/18jkeKNIn5QJpzQrDN3RAT3mEYRXlSNKOnNvA3pxoBx8/edit?gid=535445992#gid=535445992',
  
  // –ú–µ—Å—è—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ñ–µ–≤—Ä–∞–ª—å-–º–∞–π 2025)
  TEST_MONTHS: [
    { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤', number: 2, year: 2025 },
    { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä', number: 3, year: 2025 },
    { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä', number: 4, year: 2025 },
    { name: '–ú–∞–π', short: '–ú–∞–π', number: 5, year: 2025 }
  ],
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  TESTING: {
    MAX_RETRIES: 3,
    TIMEOUT_SECONDS: 300,
    COMPARISON_THRESHOLD: 0.95 // 95% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º
  }
};

// ==================== –ö–õ–ê–°–° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ====================

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
class GoogleAppsScriptTester {
  constructor() {
    this.testResults = {
      totalTests: 0,
      passedTests: 0,
      failedTests: 0,
      details: []
    };
    
    this.processor = new MonthlyReportProcessor();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async runFullTesting() {
    console.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–¶–ï–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('=====================================');
    console.log(`üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Å—è—Ü—ã: ${TEST_CONFIG.TEST_MONTHS.map(m => m.name).join(', ')}`);
    console.log(`üìã –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${TEST_CONFIG.SOURCE_URL}`);
    console.log(`üìã –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${TEST_CONFIG.REFERENCE_URL}`);
    
    try {
      // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      console.log('\nüìã –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•...');
      const sourceData = await this.prepareSourceData();
      const referenceData = await this.prepareReferenceData();
      
      // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
      for (const month of TEST_CONFIG.TEST_MONTHS) {
        console.log(`\nüìÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–°–Ø–¶–ê: ${month.name} ${month.year}`);
        console.log('='.repeat(50));
        
        await this.testMonth(month, sourceData, referenceData);
      }
      
      // 3. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      this.analyzeResults();
      
      // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      await this.generateTestReport();
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      this.testResults.details.push({
        test: '–û–±—â–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        status: 'FAILED',
        error: error.toString()
      });
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async prepareSourceData() {
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      const spreadsheet = SpreadsheetApp.openByUrl(TEST_CONFIG.SOURCE_URL);
      const sheets = spreadsheet.getSheets();
      
      const sourceData = {};
      
      for (const sheet of sheets) {
        const sheetName = sheet.getName();
        const data = sheet.getDataRange().getValues();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞
        const monthInfo = this.detectMonthFromSheet(sheetName, data);
        if (monthInfo) {
          sourceData[monthInfo.key] = {
            sheet: sheet,
            data: data,
            monthInfo: monthInfo
          };
          console.log(`‚úÖ –õ–∏—Å—Ç "${sheetName}" -> ${monthInfo.name} ${monthInfo.year}`);
        }
      }
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(sourceData).length} –ª–∏—Å—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏`);
      return sourceData;
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async prepareReferenceData() {
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      const spreadsheet = SpreadsheetApp.openByUrl(TEST_CONFIG.REFERENCE_URL);
      const sheets = spreadsheet.getSheets();
      
      const referenceData = {};
      
      for (const sheet of sheets) {
        const sheetName = sheet.getName();
        const data = sheet.getDataRange().getValues();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞
        const monthInfo = this.detectMonthFromSheet(sheetName, data);
        if (monthInfo) {
          referenceData[monthInfo.key] = {
            sheet: sheet,
            data: data,
            monthInfo: monthInfo
          };
          console.log(`‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ª–∏—Å—Ç "${sheetName}" -> ${monthInfo.name} ${monthInfo.year}`);
        }
      }
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(referenceData).length} —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤`);
      return referenceData;
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  detectMonthFromSheet(sheetName, data) {
    const lowerSheetName = sheetName.toLowerCase();
    
    // –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞
    for (const month of TEST_CONFIG.TEST_MONTHS) {
      const monthVariants = [
        month.name.toLowerCase(),
        month.short.toLowerCase(),
        `${month.short}${month.year}`.toLowerCase(),
        `${month.name}${month.year}`.toLowerCase()
      ];
      
      if (monthVariants.some(variant => lowerSheetName.includes(variant))) {
        return {
          key: `${month.short}${month.year}`,
          name: month.name,
          short: month.short,
          number: month.number,
          year: month.year,
          detectedFrom: 'sheet'
        };
      }
    }
    
    // –ü–æ–∏—Å–∫ –≤ –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫)
    for (let i = 0; i < Math.min(10, data.length); i++) {
      const rowText = data[i].join(' ').toLowerCase();
      
      for (const month of TEST_CONFIG.TEST_MONTHS) {
        const monthVariants = [
          month.name.toLowerCase(),
          month.short.toLowerCase(),
          `${month.short}${month.year}`.toLowerCase()
        ];
        
        if (monthVariants.some(variant => rowText.includes(variant))) {
          return {
            key: `${month.short}${month.year}`,
            name: month.name,
            short: month.short,
            number: month.number,
            year: month.year,
            detectedFrom: 'content'
          };
        }
      }
    }
    
    return null;
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
   */
  async testMonth(month, sourceData, referenceData) {
    const monthKey = `${month.short}${month.year}`;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!sourceData[monthKey]) {
        throw new Error(`–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${month.name} ${month.year} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!referenceData[monthKey]) {
        throw new Error(`–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${month.name} ${month.year} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      }
      
      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${month.name} ${month.year}...`);
      
      // 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—à–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º
      const processedResult = await this.processMonthData(sourceData[monthKey]);
      
      // 2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —ç—Ç–∞–ª–æ–Ω–æ–º
      const comparisonResult = this.compareWithReference(processedResult, referenceData[monthKey]);
      
      // 3. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.recordTestResult(month, processedResult, comparisonResult);
      
      // 4. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π, –ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å
      if (comparisonResult.similarity < TEST_CONFIG.TESTING.COMPARISON_THRESHOLD) {
        console.log(`‚ö†Ô∏è –ù–∏–∑–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (${(comparisonResult.similarity * 100).toFixed(1)}%), –ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å...`);
        await this.attemptFix(month, sourceData[monthKey], referenceData[monthKey]);
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${month.name} ${month.year}:`, error);
      this.recordTestResult(month, null, null, error.toString());
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–∞ –Ω–∞—à–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º
   */
  async processMonthData(sourceDataInfo) {
    const { sheet, data, monthInfo } = sourceDataInfo;
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testSpreadsheet = SpreadsheetApp.create(`–¢–µ—Å—Ç_${monthInfo.name}_${monthInfo.year}`);
    const testSheet = testSpreadsheet.getActiveSheet();
    
    // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    testSheet.getRange(1, 1, data.length, data[0].length).setValues(data);
    
    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–∞
    testSheet.setName(`${monthInfo.name} ${monthInfo.year}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    const result = this.processor.processReport(testSpreadsheet.getId());
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const resultSheet = testSpreadsheet.getSheetByName(`–û—Ç—á–µ—Ç_${monthInfo.name}_${new Date().getFullYear()}`);
    if (!resultSheet) {
      throw new Error('–û—Ç—á–µ—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
    }
    
    const resultData = resultSheet.getDataRange().getValues();
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    DriveApp.getFileById(testSpreadsheet.getId()).setTrashed(true);
    
    return {
      data: resultData,
      statistics: result.statistics,
      monthInfo: monthInfo
    };
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  compareWithReference(processedResult, referenceDataInfo) {
    const { data: processedData } = processedResult;
    const { data: referenceData } = referenceDataInfo;
    
    console.log(`üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedData.length} —Å—Ç—Ä–æ–∫, —ç—Ç–∞–ª–æ–Ω ${referenceData.length} —Å—Ç—Ä–æ–∫`);
    
    // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const structureComparison = this.compareStructure(processedData, referenceData);
    
    // –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    const contentComparison = this.compareContent(processedData, referenceData);
    
    // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const statsComparison = this.compareStatistics(processedResult.statistics, referenceDataInfo);
    
    const overallSimilarity = (structureComparison + contentComparison + statsComparison) / 3;
    
    return {
      similarity: overallSimilarity,
      structure: structureComparison,
      content: contentComparison,
      statistics: statsComparison,
      details: {
        processedRows: processedData.length,
        referenceRows: referenceData.length,
        structureMatch: structureComparison,
        contentMatch: contentComparison,
        statsMatch: statsComparison
      }
    };
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
   */
  compareStructure(processedData, referenceData) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    const processedSections = this.findSections(processedData);
    const referenceSections = this.findSections(referenceData);
    
    let structureScore = 0;
    let totalChecks = 0;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if (processedData.length > 0 && referenceData.length > 0) {
      const processedHeaders = processedData[0].join(' ').toLowerCase();
      const referenceHeaders = referenceData[0].join(' ').toLowerCase();
      
      const headerSimilarity = this.calculateTextSimilarity(processedHeaders, referenceHeaders);
      structureScore += headerSimilarity;
      totalChecks++;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
    const sectionSimilarity = this.calculateSectionSimilarity(processedSections, referenceSections);
    structureScore += sectionSimilarity;
    totalChecks++;
    
    return totalChecks > 0 ? structureScore / totalChecks : 0;
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  compareContent(processedData, referenceData) {
    let contentScore = 0;
    let totalComparisons = 0;
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const processedCounts = this.countRecords(processedData);
    const referenceCounts = this.countRecords(referenceData);
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤
    if (referenceCounts.reviews > 0) {
      const reviewAccuracy = Math.min(processedCounts.reviews / referenceCounts.reviews, 1);
      contentScore += reviewAccuracy;
      totalComparisons++;
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    if (referenceCounts.comments > 0) {
      const commentAccuracy = Math.min(processedCounts.comments / referenceCounts.comments, 1);
      contentScore += commentAccuracy;
      totalComparisons++;
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    if (referenceCounts.totalViews > 0) {
      const viewsAccuracy = Math.min(processedCounts.totalViews / referenceCounts.totalViews, 1);
      contentScore += viewsAccuracy;
      totalComparisons++;
    }
    
    return totalComparisons > 0 ? contentScore / totalComparisons : 0;
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  compareStatistics(processedStats, referenceDataInfo) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const referenceStats = this.extractStatisticsFromData(referenceDataInfo.data);
    
    let statsScore = 0;
    let totalChecks = 0;
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
    if (referenceStats.totalRows > 0) {
      const rowsAccuracy = Math.min(processedStats.totalRows / referenceStats.totalRows, 1);
      statsScore += rowsAccuracy;
      totalChecks++;
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
    if (referenceStats.reviewsCount > 0) {
      const reviewsAccuracy = Math.min(processedStats.reviewsCount / referenceStats.reviewsCount, 1);
      statsScore += reviewsAccuracy;
      totalChecks++;
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    if (referenceStats.commentsCount > 0) {
      const commentsAccuracy = Math.min(processedStats.commentsCount / referenceStats.commentsCount, 1);
      statsScore += commentsAccuracy;
      totalChecks++;
    }
    
    return totalChecks > 0 ? statsScore / totalChecks : 0;
  }

  /**
   * –ü–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
   */
  findSections(data) {
    const sections = [];
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      if (row.length > 0) {
        const firstCell = String(row[0]).toLowerCase();
        if (firstCell.includes('–æ—Ç–∑—ã–≤—ã') || firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') || 
            firstCell.includes('reviews') || firstCell.includes('comments')) {
          sections.push({
            name: firstCell,
            row: i + 1
          });
        }
      }
    }
    
    return sections;
  }

  /**
   * –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö
   */
  countRecords(data) {
    let reviews = 0;
    let comments = 0;
    let totalViews = 0;
    
    let inReviewsSection = false;
    let inCommentsSection = false;
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      if (row.length === 0) continue;
      
      const firstCell = String(row[0]).toLowerCase();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏–∏
      if (firstCell.includes('–æ—Ç–∑—ã–≤—ã') || firstCell.includes('reviews')) {
        inReviewsSection = true;
        inCommentsSection = false;
        continue;
      }
      
      if (firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') || firstCell.includes('comments')) {
        inReviewsSection = false;
        inCommentsSection = true;
        continue;
      }
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
      if (inReviewsSection && this.isDataRow(row)) {
        reviews++;
        totalViews += this.extractViews(row);
      }
      
      if (inCommentsSection && this.isDataRow(row)) {
        comments++;
        totalViews += this.extractViews(row);
      }
    }
    
    return { reviews, comments, totalViews };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã–º–∏
   */
  isDataRow(row) {
    if (row.length < 3) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∑–Ω–∞—á–∏–º—ã–π —Ç–µ–∫—Å—Ç
    const textCell = row[2] || row[1] || row[0];
    return textCell && String(textCell).trim().length > 10;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏
   */
  extractViews(row) {
    if (row.length < 6) return 0;
    
    const viewsCell = row[5];
    if (!viewsCell) return 0;
    
    const viewsStr = String(viewsCell).replace(/[^\d]/g, '');
    const views = parseInt(viewsStr);
    
    return isNaN(views) ? 0 : views;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
   */
  extractStatisticsFromData(data) {
    const counts = this.countRecords(data);
    
    return {
      totalRows: data.length,
      reviewsCount: counts.reviews,
      commentsCount: counts.comments,
      totalViews: counts.totalViews
    };
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
   */
  calculateTextSimilarity(text1, text2) {
    const words1 = text1.split(/\s+/).filter(w => w.length > 0);
    const words2 = text2.split(/\s+/).filter(w => w.length > 0);
    
    const commonWords = words1.filter(word => words2.includes(word));
    const totalWords = Math.max(words1.length, words2.length);
    
    return totalWords > 0 ? commonWords.length / totalWords : 0;
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
   */
  calculateSectionSimilarity(sections1, sections2) {
    if (sections1.length === 0 && sections2.length === 0) return 1;
    if (sections1.length === 0 || sections2.length === 0) return 0;
    
    const sectionNames1 = sections1.map(s => s.name);
    const sectionNames2 = sections2.map(s => s.name);
    
    const commonSections = sectionNames1.filter(name => 
      sectionNames2.some(name2 => this.calculateTextSimilarity(name, name2) > 0.5)
    );
    
    const totalSections = Math.max(sections1.length, sections2.length);
    return totalSections > 0 ? commonSections.length / totalSections : 0;
  }

  /**
   * –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
   */
  recordTestResult(month, processedResult, comparisonResult, error = null) {
    this.testResults.totalTests++;
    
    const testDetail = {
      month: `${month.name} ${month.year}`,
      status: error ? 'FAILED' : (comparisonResult.similarity >= TEST_CONFIG.TESTING.COMPARISON_THRESHOLD ? 'PASSED' : 'FAILED'),
      similarity: comparisonResult ? comparisonResult.similarity : 0,
      details: comparisonResult ? comparisonResult.details : null,
      error: error
    };
    
    this.testResults.details.push(testDetail);
    
    if (testDetail.status === 'PASSED') {
      this.testResults.passedTests++;
      console.log(`‚úÖ ${month.name} ${month.year}: –ü–†–û–ô–î–ï–ù (${(comparisonResult.similarity * 100).toFixed(1)}%)`);
    } else {
      this.testResults.failedTests++;
      console.log(`‚ùå ${month.name} ${month.year}: –ü–†–û–í–ê–õ–ï–ù (${(comparisonResult ? (comparisonResult.similarity * 100).toFixed(1) : 0)}%)`);
      if (error) console.log(`   –û—à–∏–±–∫–∞: ${error}`);
    }
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  async attemptFix(month, sourceDataInfo, referenceDataInfo) {
    console.log(`üîß –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è ${month.name} ${month.year}...`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∏ —Ç.–¥.
    
    console.log(`‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –¥–ª—è ${month.name} ${month.year}`);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  analyzeResults() {
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('=====================================');
    
    const successRate = this.testResults.totalTests > 0 ? 
      (this.testResults.passedTests / this.testResults.totalTests) * 100 : 0;
    
    console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${successRate.toFixed(1)}%`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.passedTests}/${this.testResults.totalTests}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.failedTests}/${this.testResults.totalTests}`);
    
    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    this.testResults.details.forEach(detail => {
      const statusIcon = detail.status === 'PASSED' ? '‚úÖ' : '‚ùå';
      const similarity = detail.similarity ? `(${(detail.similarity * 100).toFixed(1)}%)` : '';
      console.log(`${statusIcon} ${detail.month}: ${detail.status} ${similarity}`);
      
      if (detail.error) {
        console.log(`   –û—à–∏–±–∫–∞: ${detail.error}`);
      }
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
   */
  async generateTestReport() {
    console.log('\nüìÑ –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò...');
    
    const reportData = [
      ['–û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò GOOGLE APPS SCRIPT'],
      [''],
      [`–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date().toLocaleDateString('ru-RU')}`],
      [`–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date().toLocaleTimeString('ru-RU')}`],
      [''],
      ['–û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:'],
      [`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.totalTests}`],
      [`–ü—Ä–æ–π–¥–µ–Ω–æ: ${this.testResults.passedTests}`],
      [`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testResults.failedTests}`],
      [`–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${this.testResults.totalTests > 0 ? (this.testResults.passedTests / this.testResults.totalTests * 100).toFixed(1) : 0}%`],
      [''],
      ['–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:'],
      ['–ú–µ—Å—è—Ü', '–°—Ç–∞—Ç—É—Å', '–°—Ö–æ–∂–µ—Å—Ç—å', '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫', '–≠—Ç–∞–ª–æ–Ω —Å—Ç—Ä–æ–∫', '–û—Ç–∑—ã–≤—ã', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã']
    ];
    
    this.testResults.details.forEach(detail => {
      const details = detail.details || {};
      reportData.push([
        detail.month,
        detail.status,
        detail.similarity ? `${(detail.similarity * 100).toFixed(1)}%` : 'N/A',
        details.processedRows || 'N/A',
        details.referenceRows || 'N/A',
        details.reviews || 'N/A',
        details.comments || 'N/A',
        details.views || 'N/A'
      ]);
    });
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    const reportSpreadsheet = SpreadsheetApp.create(`–û—Ç—á–µ—Ç_—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è_${new Date().toISOString().split('T')[0]}`);
    const reportSheet = reportSpreadsheet.getActiveSheet();
    
    reportSheet.getRange(1, 1, reportData.length, reportData[0].length).setValues(reportData);
    reportSheet.autoResizeColumns(1, reportData[0].length);
    
    console.log(`‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${reportSpreadsheet.getUrl()}`);
    
    return reportSpreadsheet.getUrl();
  }
}

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function runFullTesting() {
  const tester = new GoogleAppsScriptTester();
  return tester.runFullTesting();
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
 */
function testSingleMonth(monthName) {
  const month = TEST_CONFIG.TEST_MONTHS.find(m => 
    m.name.toLowerCase() === monthName.toLowerCase() || 
    m.short.toLowerCase() === monthName.toLowerCase()
  );
  
  if (!month) {
    console.error(`‚ùå –ú–µ—Å—è—Ü "${monthName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
    return;
  }
  
  const tester = new GoogleAppsScriptTester();
  tester.testMonth(month, {}, {});
}

/**
 * –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function showTestConfig() {
  console.log('‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('==============================');
  console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${TEST_CONFIG.SOURCE_URL}`);
  console.log(`üìä –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${TEST_CONFIG.REFERENCE_URL}`);
  console.log(`üìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –º–µ—Å—è—Ü—ã: ${TEST_CONFIG.TEST_MONTHS.map(m => m.name).join(', ')}`);
  console.log(`üéØ –ü–æ—Ä–æ–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: ${TEST_CONFIG.TESTING.COMPARISON_THRESHOLD * 100}%`);
  console.log(`üîÑ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: ${TEST_CONFIG.TESTING.MAX_RETRIES}`);
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function updateMenuWithTesting() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
    .addItem('–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'runFullTesting')
    .addSeparator()
    .addItem('–¢–µ—Å—Ç –§–µ–≤—Ä–∞–ª—å', 'testFebruary')
    .addItem('–¢–µ—Å—Ç –ú–∞—Ä—Ç', 'testMarch')
    .addItem('–¢–µ—Å—Ç –ê–ø—Ä–µ–ª—å', 'testApril')
    .addItem('–¢–µ—Å—Ç –ú–∞–π', 'testMay')
    .addSeparator()
    .addItem('–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é', 'showTestConfig')
    .addToUi();
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤
function testFebruary() { testSingleMonth('–§–µ–≤—Ä–∞–ª—å'); }
function testMarch() { testSingleMonth('–ú–∞—Ä—Ç'); }
function testApril() { testSingleMonth('–ê–ø—Ä–µ–ª—å'); }
function testMay() { testSingleMonth('–ú–∞–π'); } 