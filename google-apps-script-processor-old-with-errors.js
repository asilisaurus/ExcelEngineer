/**
 * üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ì–ò–ë–ö–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê –ë–≠–ö–ê–ì–ï–ù–¢–ê 1
 * Google Apps Script –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
 * –í–µ—Ä—Å–∏—è: 3.1.0 - –≠–¢–ê–õ–û–ù–ù–´–ï –õ–ò–°–¢–´ –í –¢–û–ô –ñ–ï –¢–ê–ë–õ–ò–¶–ï
 * 
 * –ê–≤—Ç–æ—Ä: AI Assistant + Background Agent bc-851d0563-ea94-47b9-ba36-0f832bafdb25
 * –î–∞—Ç–∞: 2025
 */

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê ====================

const CONFIG = {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (–û–°–ù–û–í–ê–ù–´ –ù–ê –ê–ù–ê–õ–ò–ó–ï –ë–≠–ö–ê–ì–ï–ù–¢–ê 1)
  STRUCTURE: {
    headerRow: 4,        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –í–°–ï–ì–î–ê –≤ —Å—Ç—Ä–æ–∫–µ 4
    dataStartRow: 5,     // –î–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Å—Ç—Ä–æ–∫–∏ 5
    infoRows: [1, 2, 3], // –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö 1-3
    maxRows: 10000
  },
  
  // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–û–°–ù–û–í–ê–ù–ê –ù–ê –ê–ù–ê–õ–ò–ó–ï –ë–≠–ö–ê–ì–ï–ù–¢–ê 1)
  CONTENT_TYPES: {
    REVIEWS: ['–û–°', '–û—Ç–∑—ã–≤—ã –°–∞–π—Ç–æ–≤', '–æ—Å', '–æ—Ç–∑—ã–≤—ã —Å–∞–π—Ç–æ–≤'],
    TARGETED: ['–¶–°', '–¶–µ–ª–µ–≤—ã–µ –°–∞–π—Ç—ã', '—Ü—Å', '—Ü–µ–ª–µ–≤—ã–µ —Å–∞–π—Ç—ã'],
    SOCIAL: ['–ü–°', '–ü–ª–æ—â–∞–¥–∫–∏ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ', '–ø—Å', '–ø–ª–æ—â–∞–¥–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ']
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ (–≥–∏–±–∫–∏–µ)
  COLUMNS: {
    PLATFORM: ['–ø–ª–æ—â–∞–¥–∫–∞', 'platform', 'site', '–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', '–∏—Å—Ç–æ—á–Ω–∏–∫'],
    TEXT: ['—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '—Ç–µ–∫—Å—Ç', 'message', 'content', '—Å–æ–æ–±—â–µ–Ω–∏–µ', '–æ–ø–∏—Å–∞–Ω–∏–µ'],
    DATE: ['–¥–∞—Ç–∞', 'date', 'created', '–≤—Ä–µ–º—è', '–¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'],
    AUTHOR: ['–∞–≤—Ç–æ—Ä', '–Ω–∏–∫', 'author', 'nickname', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–∏–º—è'],
    VIEWS: ['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã', '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ', 'views', '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'],
    ENGAGEMENT: ['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ', 'engagement', '–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ'],
    POST_TYPE: ['—Ç–∏–ø –ø–æ—Å—Ç–∞', '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', 'post_type', '—Ç–∏–ø', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è'],
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    THEME: ['—Ç–µ–º–∞', 'theme', 'subject', '–∑–∞–≥–æ–ª–æ–≤–æ–∫'],
    LINK: ['—Å—Å—ã–ª–∫–∞', 'link', 'url', '–∞–¥—Ä–µ—Å'],
    RATING: ['–æ—Ü–µ–Ω–∫–∞', 'rating', '—Ä–µ–π—Ç–∏–Ω–≥', '–∑–≤–µ–∑–¥—ã']
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  FORMATTING: {
    DATE_FORMAT: 'dd.mm.yyyy',
    NUMBER_FORMAT: '#,##0',
    CURRENCY_FORMAT: '#,##0 ‚ÇΩ'
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  TESTING: {
    ENABLE_DEBUG: true,
    LOG_DETAILS: true,
    VALIDATE_RESULTS: true
  }
};

// ==================== –ö–õ–ê–°–° –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê ====================

/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 * –û–°–ù–û–í–ê–ù –ù–ê –ê–ù–ê–õ–ò–ó–ï –ë–≠–ö–ê–ì–ï–ù–¢–ê 1
 * –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô: —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏, –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —ç—Ç–∞–ª–æ–Ω–æ–≤
 */
class FinalMonthlyReportProcessor {
  constructor() {
    this.stats = {
      totalRows: 0,
      reviewsCount: 0,
      targetedCount: 0,
      socialCount: 0,
      totalViews: 0,
      processingTime: 0,
      errors: []
    };
    
    this.columnMapping = {};
    this.monthInfo = null;
    this.contentSections = {
      reviews: [],
      targeted: [],
      social: []
    };
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞
   */
  processReport(spreadsheetId, sheetName = null) {
    const startTime = Date.now();
    
    try {
      console.log('üöÄ FINAL PROCESSOR - –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ë—ç–∫–∞–≥–µ–Ω—Ç–∞ 1');
      
      // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const sourceData = this.getSourceData(spreadsheetId, sheetName);
      
      // 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ (sheetName –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ)
      this.monthInfo = this.detectMonth(sourceData, sheetName);
      console.log(`üìÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ—Å—è—Ü: ${this.monthInfo.name} ${this.monthInfo.year}`);
      
      // 3. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (–û–°–ù–û–í–ê–ù –ù–ê –ê–ù–ê–õ–ò–ó–ï –ë–≠–ö–ê–ì–ï–ù–¢–ê 1)
      this.analyzeDataStructure(sourceData);
      
      // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      const processedData = this.processData(sourceData);
      
      // 5. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
      const reportUrl = this.createReport(processedData);
      
      // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      this.stats.processingTime = Date.now() - startTime;
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', this.stats);
      
      return {
        success: true,
        reportUrl: reportUrl,
        statistics: this.stats,
        monthInfo: this.monthInfo
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
      this.stats.errors.push(error.toString());
      
      return {
        success: false,
        error: error.toString(),
        statistics: this.stats
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–û–ë–ù–û–í–õ–ï–ù–û –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê)
   */
  getSourceData(spreadsheetId, sheetName) {
    const spreadsheet = SpreadsheetApp.openById(spreadsheetId);
    
    const sheet = sheetName ? spreadsheet.getSheetByName(sheetName) : spreadsheet.getActiveSheet();
    
    if (!sheet) {
      throw new Error(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    const data = sheet.getDataRange().getValues();
    this.stats.totalRows = data.length;
    
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ ${CONFIG.STRUCTURE.headerRow}, –¥–∞–Ω–Ω—ã–µ —Å —Å—Ç—Ä–æ–∫–∏ ${CONFIG.STRUCTURE.dataStartRow}`);
    
    return data;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å—Ç—Ä–æ–∫–∏ 1-3)
   */
  detectMonth(data, sheetName = null) {
    // 1. –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—è—Ü –∏–∑ sheetName (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
    if (sheetName) {
      const monthFromSheet = this.extractMonthFromText(sheetName);
      if (monthFromSheet) {
        console.log(`üìÖ –ú–µ—Å—è—Ü –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞ (–∞—Ä–≥—É–º–µ–Ω—Ç): ${monthFromSheet.name} ${monthFromSheet.year}`);
        return { ...monthFromSheet, detectedFrom: 'sheet' };
      }
    }
    // 2. –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—è—Ü –∏–∑ –∏–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
    try {
      const activeSheet = SpreadsheetApp.getActiveSheet();
      if (activeSheet) {
        const activeSheetName = activeSheet.getName();
        const monthFromSheet = this.extractMonthFromText(activeSheetName);
        if (monthFromSheet) {
          console.log(`üìÖ –ú–µ—Å—è—Ü –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –∏–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞: ${monthFromSheet.name} ${monthFromSheet.year}`);
          return { ...monthFromSheet, detectedFrom: 'sheet' };
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞:', error.message);
    }
    // 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –∏—â–µ–º –≤ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å—Ç—Ä–æ–∫–∏ 1-3)
    for (let i = 0; i < Math.min(3, data.length); i++) {
      const rowText = data[i].join(' ').toLowerCase();
      const monthFromMeta = this.extractMonthFromText(rowText);
      if (monthFromMeta) {
        console.log(`üìÖ –ú–µ—Å—è—Ü –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${monthFromMeta.name} ${monthFromMeta.year}`);
        return { ...monthFromMeta, detectedFrom: 'meta' };
      }
    }
    // 4. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const now = new Date();
    return {
      name: this.getMonthName(now.getMonth()),
      short: this.getMonthShort(now.getMonth()),
      number: now.getMonth() + 1,
      year: now.getFullYear(),
      detectedFrom: 'default'
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (–ò–°–ü–†–ê–í–õ–ï–ù–û –ù–ê –û–°–ù–û–í–ï –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•)
   */
  analyzeDataStructure(data) {
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö –º–µ—Å—è—Ü–µ–≤
    this.columnMapping = this.getColumnMapping();
    
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} —Å—Ç—Ä–æ–∫ –∏–∑ –ª–∏—Å—Ç–∞ ${SpreadsheetApp.getActiveSheet().getName()}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

/**
 * –ü–æ–∏—Å–∫ –ª–∏—Å—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º –º–µ—Å—è—Ü–µ–º
 */
function findCurrentMonthSheet(sheets) {
  const currentMonth = new Date().getMonth();
  const monthNames = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', 
                     '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'];
  
  // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  for (let sheet of sheets) {
    const sheetName = sheet.getName().toLowerCase();
    if (sheetName.includes(monthNames[currentMonth])) {
      return sheet;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
  return sheets[0];
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
 */
function processData(rawData) {
  if (!rawData || rawData.length === 0) {
    throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
  }
  
  // 1. –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const headerInfo = findHeaders(rawData);
  console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${headerInfo.row}`);
  
  // 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const dataRows = rawData.slice(headerInfo.row + 1);
  
  // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫
  const processedRows = [];
  
  for (let i = 0; i < dataRows.length; i++) {
    const row = dataRows[i];
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (isEmptyRow(row)) continue;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏-–∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (isHeaderRow(row)) {
      console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞-–∑–∞–≥–æ–ª–æ–≤–æ–∫: ${row[0]}`);
      continue;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentType = determineContentType(row);
    
    if (contentType === 'review' || contentType === 'comment') {
      const processedRow = extractRowData(row, contentType, headerInfo.mapping);
      if (processedRow) {
        processedRows.push(processedRow);
      }
    }
  }
  
  // 4. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
  const reviews = processedRows.filter(row => row.type === 'review');
  const comments = processedRows.filter(row => row.type === 'comment');
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: ${reviews.length}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${comments.length}`);
  
  return processedRows;
}

/**
 * –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
 */
function findHeaders(data) {
  const columnMapping = {};
  
  for (let i = 0; i < Math.min(10, data.length); i++) {
    const row = data[i];
    const rowStr = row.map(cell => (cell || '').toString().toLowerCase()).join(' ');
    
    if (rowStr.includes('—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è') || 
        rowStr.includes('–ø–ª–æ—â–∞–¥–∫–∞') || 
        rowStr.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')) {
      
      // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫
      row.forEach((cell, index) => {
        const cleanHeader = (cell || '').toString().toLowerCase().trim();
        if (cleanHeader) {
          columnMapping[cleanHeader] = index;
        }
      });
      
      return {
        row: i,
        mapping: columnMapping
      };
    }
  }
  
  // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
  return {
    row: 0,
    mapping: getDefaultMapping()
  };
}

/**
 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è Google Sheets
 */
function getDefaultMapping() {
  return {
    '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è': 0,
    '–ø–ª–æ—â–∞–¥–∫–∞': 1,
    '–ø—Ä–æ–¥—É–∫—Ç': 2,
    '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ': 3,
    '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è': 4,
    '—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏': 5,
    '–¥–∞—Ç–∞': 6,
    '–Ω–∏–∫': 7,
    '–∞–≤—Ç–æ—Ä': 8,
    '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–µ–º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ': 9,
    '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞': 10,
    '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ': 11,
    '–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ': 12,
    '—Ç–∏–ø –ø–æ—Å—Ç–∞': 13
  };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
function determineContentType(row) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–ª–æ–Ω–∫—É (—Ç–∏–ø –ø–æ—Å—Ç–∞)
  const lastColIndex = row.length - 1;
  const lastColValue = (row[lastColIndex] || '').toString().toLowerCase().trim();
  
  if (lastColValue === '–æ—Å' || lastColValue === '–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') {
    return 'review';
  }
  
  if (lastColValue === '—Ü—Å' || lastColValue === '—Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') {
    return 'comment';
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
  const firstColValue = (row[0] || '').toString().toLowerCase().trim();
  if (firstColValue.includes('–æ—Ç–∑—ã–≤') || firstColValue.includes('–æ—Å')) {
    return 'review';
  }
  
  if (firstColValue.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π') || firstColValue.includes('—Ü—Å')) {
    return 'comment';
  }
  
  return 'unknown';
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
 */
function isHeaderRow(row) {
  const firstCell = (row[0] || '').toString().toLowerCase().trim();
  const headerPatterns = ['–æ—Ç–∑—ã–≤—ã', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–æ–±—Å—É–∂–¥–µ–Ω–∏—è'];
  
  return headerPatterns.includes(firstCell);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–æ–π
 */
function isEmptyRow(row) {
  return !row || row.every(cell => !cell || cell.toString().trim() === '');
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏
 */
function extractRowData(row, type, mapping) {
  try {
    // –ò–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ (—Å fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
    const siteIndex = mapping['–ø–ª–æ—â–∞–¥–∫–∞'] || 1;
    const linkIndex = mapping['—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ'] || 3;
    const textIndex = mapping['—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'] || 4;
    const dateIndex = mapping['–¥–∞—Ç–∞'] || 6;
    const authorIndex = mapping['–∞–≤—Ç–æ—Ä'] || 8;
    const viewsIndex = mapping['–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ'] || 11;
    const engagementIndex = mapping['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ'] || 12;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const site = cleanValue(row[siteIndex]);
    const link = cleanValue(row[linkIndex]);
    const text = cleanValue(row[textIndex]);
    const date = cleanValue(row[dateIndex]);
    const author = cleanValue(row[authorIndex]);
    const views = extractViews(row[viewsIndex]);
    const engagement = extractEngagement(row[engagementIndex]);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!site || !text) {
      return null;
    }
    
    return {
      type: type,
      site: site,
      link: link,
      text: text,
      date: date,
      author: author,
      views: views,
      engagement: engagement
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏:', error);
    return null;
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏
 */
function cleanValue(value) {
  if (!value) return '';
  return value.toString().trim();
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
 */
function extractViews(value) {
  if (!value) return 0;
  
  const str = value.toString().replace(/\D/g, '');
  const num = parseInt(str);
  
  return isNaN(num) ? 0 : num;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
 */
function extractEngagement(value) {
  if (!value) return 0;
  
  const str = value.toString().replace(/[^\d.]/g, '');
  const num = parseFloat(str);
  
  return isNaN(num) ? 0 : num;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
 */
function createResultFile(processedData) {
  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø—Ä–µ–¥—à–∏—Ç
    const currentDate = new Date();
    const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                       '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
    
    const fileName = `–†–µ–∑—É–ª—å—Ç–∞—Ç_${monthNames[currentDate.getMonth()]}_${currentDate.getFullYear()}`;
    const spreadsheet = SpreadsheetApp.create(fileName);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
    const sheet = spreadsheet.getActiveSheet();
    sheet.setName('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã');
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = ['–¢–∏–ø', '–ü–ª–æ—â–∞–¥–∫–∞', '–°—Å—ã–ª–∫–∞', '–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞', '–ê–≤—Ç–æ—Ä', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ'];
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    
    // –î–∞–Ω–Ω—ã–µ
    const dataForSheet = processedData.map(row => [
      row.type === 'review' ? '–û—Ç–∑—ã–≤' : '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
      row.site,
      row.link,
      row.text,
      row.date,
      row.author,
      row.views,
      row.engagement
    ]);
    
    if (dataForSheet.length > 0) {
      sheet.getRange(2, 1, dataForSheet.length, headers.length).setValues(dataForSheet);
    }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û)
   */
  extractDate(row, columnMapping) {
    const index = columnMapping.date;
    if (index !== undefined && row[index]) {
      const dateValue = row[index];
      
      if (dateValue instanceof Date) {
        return Utilities.formatDate(dateValue, Session.getScriptTimeZone(), CONFIG.FORMATTING.DATE_FORMAT);
      }
      
      return String(dateValue);
    }
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
   */
  extractAuthor(row, columnMapping) {
    const index = columnMapping.author;
    if (index !== undefined && row[index]) {
      return String(row[index]).trim();
    }
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
   */
  extractViews(row, columnMapping) {
    const index = columnMapping.views; // –∫–æ–ª–æ–Ω–∫–∞ 11
    if (index !== undefined && row[index]) {
      const viewsValue = row[index];
      
      // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      if (typeof viewsValue === 'number' && !isNaN(viewsValue)) {
        return Math.max(0, Math.floor(viewsValue));
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
      const viewsStr = String(viewsValue).trim();
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏ –∏ –∑–∞–ø—è—Ç–æ–π
      const cleanStr = viewsStr.replace(/[^\d.,]/g, '');
      
      // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
      const normalizedStr = cleanStr.replace(',', '.');
      
      const parsed = parseFloat(normalizedStr);
      
      if (!isNaN(parsed)) {
        return Math.max(0, Math.floor(parsed));
      }
    }
    return 0;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è (–ò–°–ü–†–ê–í–õ–ï–ù–û)
   */
  extractEngagement(row, columnMapping) {
    const index = columnMapping.engagement;
    if (index !== undefined && row[index]) {
      return String(row[index]).trim();
    }
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
   */
  extractPostType(row, columnMapping) {
    const index = columnMapping.postType;
    if (index !== undefined && row[index]) {
      return String(row[index]).trim();
    }
    return '';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
   */
  determinePostType(row, text, postType, columnMapping) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É "–¢–∏–ø –ø–æ—Å—Ç–∞" (–∫–æ–ª–æ–Ω–∫–∞ N - –∏–Ω–¥–µ–∫—Å 13)
    const postTypeIndex = columnMapping.postType;
    if (postTypeIndex !== undefined && row[postTypeIndex]) {
      const type = String(row[postTypeIndex]).trim().toLowerCase();
      if (type === '–æ—Å' || type === '–æ.—Å.') {
        return '–û–°';
      } else if (type === '—Ü—Å' || type === '—Ü.—Å.') {
        return '–¶–°';
      }
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É (–µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω)
    const textIndex = columnMapping.text; // –ö–æ–ª–æ–Ω–∫–∞ E - "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è" (–∏–Ω–¥–µ–∫—Å 4)
    if (textIndex !== undefined && row[textIndex]) {
      const text = String(row[textIndex]).toLowerCase();
      if (text.includes('–æ—Ç–∑—ã–≤') || text.includes('—Ä–µ–∫–æ–º–µ–Ω–¥—É—é') || text.includes('–ø–æ–∫—É–ø–∞–ª–∞')) {
        return '–û–°';
      } else if (text.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π') || text.includes('–æ—Ç–≤–µ—Ç') || text.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏–µ')) {
        return '–¶–°';
      }
    }

    return '–û–°'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º—ã
   */
  extractTheme(row, columnMapping) {
    const index = columnMapping.theme;
    if (index !== undefined && row[index]) {
      return String(row[index]).trim();
    }
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
   */
  extractLink(row, columnMapping) {
    const index = columnMapping.link;
    if (index !== undefined && row[index]) {
      return String(row[index]).trim();
    }
    return '';
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
   * @param {Object} processedData - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  createReport(processedData) {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ª–∏—Å—Ç —Å –Ω—É–∂–Ω—ã–º –∏–º–µ–Ω–µ–º
    const tempSpreadsheet = SpreadsheetApp.create(`temp_google_sheets_${Date.now()}_${this.monthInfo.name}_${this.monthInfo.year}_—Ä–µ–∑—É–ª—å—Ç–∞—Ç`);
    const reportSheetName = `${this.monthInfo.name}_${this.monthInfo.year}`;
    const sheet = tempSpreadsheet.getActiveSheet();
    sheet.setName(reportSheetName);
    
    // –®–∞–ø–∫–∞: –ü—Ä–æ–¥—É–∫—Ç, –ü–µ—Ä–∏–æ–¥, –ü–ª–∞–Ω
    sheet.getRange('A1').setValue('–ü—Ä–æ–¥—É–∫—Ç');
    sheet.getRange('B1').setValue('–ê–∫—Ä–∏—Ö–∏–Ω - –§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º');
    sheet.getRange('A2').setValue('–ü–µ—Ä–∏–æ–¥');
    sheet.getRange('B2').setValue(`${this.monthInfo.name}-25`);
    sheet.getRange('A3').setValue('–ü–ª–∞–Ω');
    
    // 2. –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    const tableHeaders = ['–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–î–∞—Ç–∞', '–ù–∏–∫', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø –ø–æ—Å—Ç–∞'];
    let row = 5;
    sheet.getRange(row, 1, 1, tableHeaders.length).setValues([tableHeaders]);
    sheet.getRange(row, 1, 1, tableHeaders.length).setFontWeight('bold').setBackground('#3f2355').setFontColor('white');
    row++;
    
    // 3. –†–∞–∑–¥–µ–ª—ã –∏ –¥–∞–Ω–Ω—ã–µ
    function writeSection(sectionName, dataArr) {
      sheet.getRange(row, 1).setValue(sectionName);
      sheet.getRange(row, 1, 1, tableHeaders.length).setBackground('#b7a6c9').setFontWeight('bold');
      row++;
      if (dataArr.length) {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞
        const safeData = dataArr.map(r => {
          const arr = [r.platform, r.theme, r.text, r.date, r.author, r.views, r.engagement, r.type];
          while (arr.length < tableHeaders.length) arr.push('');
          return arr.slice(0, tableHeaders.length);
        });
        sheet.getRange(row, 1, safeData.length, tableHeaders.length).setValues(safeData);
        row += safeData.length;
      }
      console.log(`üìÇ –†–∞–∑–¥–µ–ª "${sectionName}": ${dataArr.length} —Å—Ç—Ä–æ–∫`);
    }
    
    writeSection('–û—Ç–∑—ã–≤—ã', processedData.reviews);
    writeSection('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20 –≤—ã–¥–∞—á–∏', processedData.commentsTop20);
    writeSection('–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)', processedData.activeDiscussions);
    
    // 4. –ë–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–Ω–∏–∑—É
    row += 2;
    sheet.getRange(row, 1).setValue('–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤');
    sheet.getRange(row, 2).setValue(this.stats.totalViews || processedData.statistics.totalViews || 0);
    row++;
    sheet.getRange(row, 1).setValue('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç–∑—ã–≤—ã)');
    sheet.getRange(row, 2).setValue(processedData.reviews.length);
    row++;
    sheet.getRange(row, 1).setValue('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (—Ñ–æ—Ä—É–º—ã, —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç–∞—Ç—å—è–º)');
    sheet.getRange(row, 2).setValue(processedData.activeDiscussions.length);
    row++;
    sheet.getRange(row, 1).setValue('–î–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º –≤ –¥–∏–∞–ª–æ–≥');
    const engagementValue = this.stats.engagementShare || 0;
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    if (engagementValue > 0) {
      sheet.getRange(row, 2).setValue(engagementValue + '%');
    } else {
      sheet.getRange(row, 2).setValue('0%');
    }
    sheet.getRange(row - 3, 1, 4, 2).setFontWeight('bold');
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
    sheet.autoResizeColumns(1, headers.length);
    // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    sheet.autoResizeColumns(1, tableHeaders.length);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    const dataRange = sheet.getDataRange();
    sheet.getRange(1, 1, dataRange.getNumRows(), dataRange.getNumColumns()).createFilter();
    
    console.log(`üíæ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${fileName}`);
    console.log(`üîó ID —Ñ–∞–π–ª–∞: ${spreadsheet.getId()}`);
    
    return spreadsheet.getId();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
    throw error;
  }
}

// =============================================================================
// –¢–ï–°–¢–û–í–´–ï –§–£–ù–ö–¶–ò–ò
// =============================================================================

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
 */
function testProcessor() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
  
  try {
    const result = processGoogleSheets();
    
    if (result.success) {
      console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${result.processedRows}`);
      console.log(`üîó ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${result.resultFileId}`);
    } else {
      console.log('‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', result.error);
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${reportSheetName}`);
    return tempSpreadsheet.getUrl();
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  extractMonthFromText(text) {
    const lowerText = text.toLowerCase();
    
    const months = [
      { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤', number: 1 },
      { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤', number: 2 },
      { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä', number: 3 },
      { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä', number: 4 },
      { name: '–ú–∞–π', short: '–ú–∞–π', number: 5 },
      { name: '–ò—é–Ω—å', short: '–ò—é–Ω', number: 6 },
      { name: '–ò—é–ª—å', short: '–ò—é–ª', number: 7 },
      { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥', number: 8 },
      { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω', number: 9 },
      { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç', number: 10 },
      { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è', number: 11 },
      { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫', number: 12 }
    ];
    
    // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (const month of months) {
      // –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      const exactMatches = [
        month.name.toLowerCase(),
        month.short.toLowerCase(),
        `${month.short}25`,
        `${month.name}25`,
        `${month.short}2025`,
        `${month.name}2025`
      ];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
      for (const exactMatch of exactMatches) {
        if (lowerText === exactMatch || lowerText.includes(exactMatch)) {
          return {
            name: month.name,
            short: month.short,
            number: month.number,
            year: 2025
          };
        }
      }
    }
    
    return result;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    return { success: false, error: error.message };
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö –º–µ—Å—è—Ü–µ–≤
  getColumnMapping() {
    return {
      platform: 1,
      theme: 3,
      text: 4,
      date: 6,
      author: 7,
      views: 11,
      engagement: 12,
      postType: 13,
      link: 2
    };
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∏—Å–∫ –≥—Ä–∞–Ω–∏—Ü —Ä–∞–∑–¥–µ–ª–æ–≤ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
   */
  findSectionBoundaries(data) {
    const sections = [];
    let currentSection = null;
    let sectionStart = -1;
    
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
    const sectionHeaders = [];
    
    for (let i = CONFIG.STRUCTURE.dataStartRow - 1; i < data.length; i++) {
      const row = data[i];
      const firstCell = String(row[0] || '').toLowerCase().trim();
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      if (this.isStatisticsRow(row)) {
        break; // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–¥–µ—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞–∑–¥–µ–ª–∞
      let sectionType = null;
      let sectionName = '';
      
      if (firstCell === '–æ—Ç–∑—ã–≤—ã' || (firstCell.includes('–æ—Ç–∑—ã–≤—ã') && !firstCell.includes('—Ç–æ–ø-20') && !firstCell.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è') && !firstCell.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'))) {
        sectionType = 'reviews';
        sectionName = '–û—Ç–∑—ã–≤—ã';
      } else if (firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20') || firstCell.includes('—Ç–æ–ø-20 –≤—ã–¥–∞—á–∏')) {
        sectionType = 'commentsTop20';
        sectionName = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20';
      } else if (firstCell.includes('–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è') || firstCell.includes('–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')) {
        sectionType = 'activeDiscussions';
        sectionName = '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è';
      }
      
      if (sectionType) {
        sectionHeaders.push({
          type: sectionType,
          name: sectionName,
          headerRow: i
        });
        console.log(`üìÇ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ "${sectionName}" –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
      }
    }
    
    // –¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    for (let i = 0; i < sectionHeaders.length; i++) {
      const currentHeader = sectionHeaders[i];
      const nextHeader = sectionHeaders[i + 1];
      
      const startRow = currentHeader.headerRow + 1; // –î–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
      let endRow;
      
      if (nextHeader) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª, –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –ø–µ—Ä–µ–¥ –µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        endRow = nextHeader.headerRow - 1;
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–¥–µ–ª, –∏—â–µ–º –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö (–¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –∫–æ–Ω—Ü–∞ —Ñ–∞–π–ª–∞)
        endRow = data.length - 1;
        
        // –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for (let j = startRow; j < data.length; j++) {
          if (this.isStatisticsRow(data[j]) || this.isEmptyRow(data[j])) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
            let hasDataAfter = false;
            for (let k = j + 1; k < Math.min(j + 5, data.length); k++) {
              if (!this.isEmptyRow(data[k]) && !this.isStatisticsRow(data[k])) {
                hasDataAfter = true;
                break;
              }
            }
            
            if (!hasDataAfter) {
              endRow = j - 1;
              break;
            }
          }
        }
      }
      
      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º endRow, –µ—Å–ª–∏ —Ä–∞–∑–¥–µ–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      if (endRow < startRow) {
        endRow = startRow - 1; // –ü—É—Å—Ç–æ–π —Ä–∞–∑–¥–µ–ª
      }
      
      sections.push({
        type: currentHeader.type,
        name: currentHeader.name,
        startRow: startRow,
        endRow: endRow
      });
      
      console.log(`üìä –†–∞–∑–¥–µ–ª "${currentHeader.name}": —Å—Ç—Ä–æ–∫–∏ ${startRow + 1}-${endRow + 1} (${Math.max(0, endRow - startRow + 1)} –∑–∞–ø–∏—Å–µ–π)`);
    }
    
    return sections;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞
   */
  getSectionName(sectionType) {
    const names = {
      'reviews': '–û—Ç–∑—ã–≤—ã',
      'commentsTop20': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20',
      'activeDiscussions': '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è'
    };
    return names[sectionType] || sectionType;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
   */
  isSectionHeader(row) {
    if (!row || row.length === 0) return false;
    
    const firstCell = String(row[0] || '').toLowerCase().trim();
    return firstCell.includes('–æ—Ç–∑—ã–≤—ã') || 
           firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') || 
           firstCell.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è') ||
           firstCell.includes('—Ç–æ–ø-20') ||
           firstCell.includes('–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  isStatisticsRow(row) {
    if (!row || row.length === 0) return false;
    
    const firstCell = String(row[0] || '').toLowerCase().trim();
    return firstCell.includes('—Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤') || 
           firstCell.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞') ||
           firstCell.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π') ||
           firstCell.includes('–¥–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π') ||
           firstCell.includes('–ø–ª–æ—â–∞–¥–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π') ||
           firstCell.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á—Ç–µ–Ω–∏–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è');
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  extractStatisticsFromSourceData(data) {
    const stats = {
      totalViews: 0,
      totalCards: 0,
      totalDiscussions: 0,
      engagementShare: 0
    };
    
    // –ò—â–µ–º –±–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
    for (let i = data.length - 1; i >= Math.max(0, data.length - 20); i--) {
      const row = data[i];
      if (!row || row.length === 0) continue;
      
      const firstCell = String(row[0] || '').toLowerCase().trim();
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—â–∏–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
      if (firstCell.includes('—Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤')) {
        // –û–±—ã—á–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–ª–æ–Ω–∫–µ
        for (let j = 1; j < row.length; j++) {
          if (row[j]) {
            const value = parseFloat(String(row[j]).replace(/[^\d]/g, ''));
            if (!isNaN(value) && value > 0) {
              stats.totalViews = value;
              console.log(`üìä –ù–∞–π–¥–µ–Ω—ã –æ–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${value}`);
              break;
            }
          }
        }
      }
      
      // –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞
      if (firstCell.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞')) {
        for (let j = 1; j < row.length; j++) {
          if (row[j]) {
            const value = parseInt(String(row[j]).replace(/[^\d]/g, ''));
            if (!isNaN(value)) {
              stats.totalCards = value;
              break;
            }
          }
        }
      }
      
      // –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
      if (firstCell.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π')) {
        for (let j = 1; j < row.length; j++) {
          if (row[j]) {
            const value = parseInt(String(row[j]).replace(/[^\d]/g, ''));
            if (!isNaN(value)) {
              stats.totalDiscussions = value;
              break;
            }
          }
        }
      }
      
      // –ò—â–µ–º –¥–æ–ª—é –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
      if (firstCell.includes('–¥–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º')) {
        for (let j = 1; j < row.length; j++) {
          if (row[j]) {
            let value = String(row[j]).trim();
            // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "20%")
            if (value.includes('%')) {
              value = value.replace('%', '');
            }
            // –ï—Å–ª–∏ —ç—Ç–æ –¥–µ—Å—è—Ç–∏—á–Ω–∞—è –¥—Ä–æ–±—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "0.20")
            const floatValue = parseFloat(value);
            if (!isNaN(floatValue)) {
              // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 1, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
              stats.engagementShare = floatValue > 1 ? floatValue : floatValue * 100;
              break;
            }
          }
        }
      }
    }
    
    return stats;
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
 */
function analyzeDataStructure() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const sourceData = getSourceData();
    
    if (sourceData.length === 0) {
      console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
    for (let i = 0; i < Math.min(10, sourceData.length); i++) {
      const row = sourceData[i];
      console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 1}:`, row.slice(0, 5).map(cell => 
        (cell || '').toString().substring(0, 30)
      ));
    }
    
    // –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const headerInfo = findHeaders(sourceData);
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:', Object.keys(headerInfo.mapping));
    
    return {
      totalRows: sourceData.length,
      headerRow: headerInfo.row,
      columns: Object.keys(headerInfo.mapping)
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
    return { error: error.message };
  }
}

// =============================================================================
// –ì–õ–ê–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ü–£–°–ö–ê
// =============================================================================

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ Google Apps Script
 */
function main() {
  return processGoogleSheets();
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function runTest() {
  return testProcessor();
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
 */
function runAnalysis() {
  return analyzeDataStructure();
}