/**
 * üß™ –õ–û–ö–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–¶–ï–°–°–û–†–ê
 * Node.js —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –≤ Google Apps Script
 * 
 * –ê–≤—Ç–æ—Ä: AI Assistant
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 2025
 */

const fs = require('fs');
const path = require('path');

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

const LOCAL_CONFIG = {
  // –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
  TEST_DATA_PATH: './test_data.json',
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  TESTING: {
    MAX_ITERATIONS: 5,
    SUCCESS_THRESHOLD: 0.9,
    VERBOSE_LOGGING: true
  },
  
  // –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
  SUCCESS_CRITERIA: {
    MIN_PROCESSED_ROWS: 10,
    MIN_REVIEWS_COUNT: 3,
    MIN_TARGETED_COUNT: 2,
    MIN_SOCIAL_COUNT: 2,
    REQUIRED_TOTAL_ROW: true
  }
};

// ==================== –ú–û–ö–ò–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï ====================

// –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Google Sheets
const MOCK_GOOGLE_SHEETS_DATA = [
  // –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  ['–û—Ç—á–µ—Ç –ø–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è–º', '–ú–∞—Ä—Ç 2025', '', ''],
  ['–ü–µ—Ä–∏–æ–¥:', '01.03.2025 - 31.03.2025', '', ''],
  ['–°—Ç–∞—Ç—É—Å:', '–ó–∞–≤–µ—Ä—à–µ–Ω', '', ''],
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  ['–¢–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', '–ü–ª–æ—â–∞–¥–∫–∞', '–ü—Ä–æ–¥—É–∫—Ç', '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–î–∞—Ç–∞', '–ù–∏–∫', '–ê–≤—Ç–æ—Ä', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–µ–º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞', '–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø –ø–æ—Å—Ç–∞'],
  
  // –†–∞–∑–¥–µ–ª –æ—Ç–∑—ã–≤–æ–≤
  ['–û—Ç–∑—ã–≤—ã –°–∞–π—Ç–æ–≤ (–û–°)', '', '', '', '', '', '', '', '', '', '', '', '', ''],
  ['–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', '–û—Ç–∑–æ–≤–∏–∫', '–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º', 'https://otzovik.com/review_123', '–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç, –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –±–æ–ª–µ–∑–Ω–∏...', '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ', '15.03.2025', 'user123', '–ê–Ω–Ω–∞ –ü.', '45', '78', '33', '5', '–û–°'],
  ['–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'IRecommend', '–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º', 'https://irecommend.ru/review_456', '–†–µ–∫–æ–º–µ–Ω–¥—É—é —ç—Ç–æ—Ç –ø—Ä–µ–ø–∞—Ä–∞—Ç –≤—Å–µ–º, –∫—Ç–æ –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ —Å–≤–æ–µ–º –∑–¥–æ—Ä–æ–≤—å–µ...', '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ', '18.03.2025', 'healthlover', '–ú–∞—Ä–∏—è –ö.', '23', '67', '44', '8', '–û–°'],
  ['–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', '–§–ª–∞–ø', '–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º', 'https://flap.ru/review_789', '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞...', '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ', '22.03.2025', 'immunefan', '–û–ª–µ–≥ –°.', '12', '89', '77', '12', '–û–°'],
  
  // –†–∞–∑–¥–µ–ª —Ü–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤
  ['–¶–µ–ª–µ–≤—ã–µ –°–∞–π—Ç—ã (–¶–°)', '', '', '', '', '', '', '', '', '', '', '', '', ''],
  ['–¶–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', '–ú–µ–¥–ø–æ—Ä—Ç–∞–ª', '–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º', 'https://medportal.ru/forum_111', '–ö—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–Ω–∏–º–∞–ª –§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º? –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à –æ–ø—ã—Ç...', '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ', '10.03.2025', 'meduser', '–í—Ä–∞—á –ò.', '89', '134', '45', '15', '–¶–°'],
  ['–¶–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', '–ó–¥–æ—Ä–æ–≤—å–µ.—Ä—É', '–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º', 'https://zdravie.ru/topic_222', '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–º–º—É–Ω–æ–º–æ–¥—É–ª—è—Ç–æ—Ä–æ–≤...', '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ', '25.03.2025', 'healthdoc', '–î–æ–∫—Ç–æ—Ä –ú.', '67', '98', '31', '9', '–¶–°'],
  
  // –†–∞–∑–¥–µ–ª —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫
  ['–ü–ª–æ—â–∞–¥–∫–∏ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ (–ü–°)', '', '', '', '', '', '', '', '', '', '', '', '', ''],
  ['–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç', '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ', '–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º', 'https://vk.com/post_333', '–î–µ–ª—é—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º –ø—Ä–∏–µ–º–∞ –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –¥–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞...', '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ', '05.03.2025', 'vkuser', '–ï–ª–µ–Ω–∞ –†.', '156', '203', '47', '23', '–ü–°'],
  ['–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç', '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏', '–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º', 'https://ok.ru/post_444', '–†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º –º–∞–º–∞–º —ç—Ç–æ—Ç –ø—Ä–µ–ø–∞—Ä–∞—Ç –¥–ª—è –¥–µ—Ç–µ–π...', '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ', '28.03.2025', 'okuser', '–°–≤–µ—Ç–ª–∞–Ω–∞ –¢.', '89', '142', '53', '18', '–ü–°'],
  ['–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç', 'Telegram', '–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º', 'https://t.me/channel_555', '–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ –≤ –≤–µ—Å–µ–Ω–Ω–∏–π –ø–µ—Ä–∏–æ–¥...', '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ', '30.03.2025', 'tguser', '–ò–≤–∞–Ω –ö.', '234', '287', '53', '31', '–ü–°']
];

// ==================== –õ–û–ö–ê–õ–¨–ù–´–ô –ü–†–û–¶–ï–°–°–û–† ====================

class LocalProcessor {
  constructor() {
    this.reset();
  }
  
  reset() {
    this.diagnostics = {
      startTime: new Date(),
      steps: [],
      errors: [],
      warnings: [],
      statistics: {
        totalRows: 0,
        processedRows: 0,
        reviewsCount: 0,
        targetedCount: 0,
        socialCount: 0,
        totalViews: 0,
        totalEngagement: 0
      }
    };
    
    this.processedData = {
      reviews: [],
      targeted: [],
      social: []
    };
    
    this.columnMapping = {};
    this.monthInfo = null;
  }
  
  processData(data) {
    try {
      this.log('üöÄ –ó–ê–ü–£–°–ö –õ–û–ö–ê–õ–¨–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê');
      this.log('==============================');
      
      // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
      this.analyzeDataStructure(data);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      this.processRows(data);
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      this.finalizeDiagnostics();
      
      return {
        success: true,
        statistics: this.diagnostics.statistics,
        processedData: this.processedData,
        diagnostics: this.diagnostics
      };
      
    } catch (error) {
      this.logError('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê', error);
      return {
        success: false,
        error: error.toString(),
        diagnostics: this.diagnostics
      };
    }
  }
  
  analyzeDataStructure(data) {
    this.log('üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•');
    this.log('=========================');
    
    this.diagnostics.statistics.totalRows = data.length;
    this.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${data.length}`);
    
    // –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    let headerRow = -1;
    let maxMatches = 0;
    
    for (let i = 0; i < Math.min(10, data.length); i++) {
      const row = data[i];
      const rowText = row.join(' ').toLowerCase();
      
      const keyWords = ['—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', '–ø–ª–æ—â–∞–¥–∫–∞', '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–¥–∞—Ç–∞', '–∞–≤—Ç–æ—Ä'];
      const matches = keyWords.filter(keyword => rowText.includes(keyword)).length;
      
      if (matches > maxMatches) {
        maxMatches = matches;
        headerRow = i;
      }
      
      this.log(`  –°—Ç—Ä–æ–∫–∞ ${i + 1}: ${matches} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - [${row.slice(0, 3).join(', ')}...]`);
    }
    
    if (headerRow >= 0) {
      this.log(`‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ ${headerRow + 1}`);
      this.createColumnMapping(data[headerRow]);
    } else {
      this.logWarning('‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥');
      this.createDefaultMapping();
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
    this.detectMonth(data);
  }
  
  createColumnMapping(headerRow) {
    this.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫...');
    
    headerRow.forEach((cell, index) => {
      if (cell && cell.toString().trim()) {
        const header = cell.toString().toLowerCase().trim();
        this.columnMapping[header] = index;
        this.log(`  –ö–æ–ª–æ–Ω–∫–∞ ${index + 1}: "${header}"`);
      }
    });
    
    this.log(`‚úÖ –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è ${Object.keys(this.columnMapping).length} –∫–æ–ª–æ–Ω–æ–∫`);
  }
  
  createDefaultMapping() {
    this.columnMapping = {
      '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è': 0,
      '–ø–ª–æ—â–∞–¥–∫–∞': 1,
      '–ø—Ä–æ–¥—É–∫—Ç': 2,
      '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ': 3,
      '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è': 4,
      '—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏': 5,
      '–¥–∞—Ç–∞': 6,
      '–Ω–∏–∫': 7,
      '–∞–≤—Ç–æ—Ä': 8,
      '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–µ–º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ': 9,
      '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞': 10,
      '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ': 11,
      '–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ': 12,
      '—Ç–∏–ø –ø–æ—Å—Ç–∞': 13
    };
  }
  
  detectMonth(data) {
    this.log('üìÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞...');
    
    const monthNames = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å'];
    const monthShort = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω'];
    
    for (let i = 0; i < Math.min(5, data.length); i++) {
      const rowText = data[i].join(' ').toLowerCase();
      
      for (let j = 0; j < monthNames.length; j++) {
        if (rowText.includes(monthNames[j]) || rowText.includes(monthShort[j])) {
          this.monthInfo = {
            name: monthNames[j],
            short: monthShort[j],
            number: j + 1,
            year: 2025
          };
          
          this.log(`‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ—Å—è—Ü: ${this.monthInfo.name} ${this.monthInfo.year}`);
          return;
        }
      }
    }
    
    this.monthInfo = { name: '–º–∞—Ä—Ç', short: '–º–∞—Ä', number: 3, year: 2025 };
    this.logWarning('‚ö†Ô∏è –ú–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∞—Ä—Ç');
  }
  
  processRows(data) {
    this.log('üîÑ –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•');
    this.log('==================');
    
    let currentSection = null;
    let processedRows = 0;
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      
      if (this.isEmptyRow(row)) {
        continue;
      }
      
      const firstCell = (row[0] || '').toString().toLowerCase().trim();
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
      if (this.isSectionHeader(firstCell)) {
        currentSection = this.determineSectionType(firstCell);
        this.log(`üìã –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É: ${currentSection}`);
        continue;
      }
      
      // –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
      if (this.isTableHeader(row)) {
        continue;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
      if (currentSection && this.isDataRow(row)) {
        const processedRow = this.processRow(row, currentSection, i + 1);
        
        if (processedRow) {
          this.processedData[currentSection].push(processedRow);
          processedRows++;
          
          this.updateStatistics(processedRow, currentSection);
          
          if (LOCAL_CONFIG.TESTING.VERBOSE_LOGGING) {
            this.log(`  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ${i + 1}: ${processedRow.platform} - ${processedRow.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`);
          }
        }
      }
    }
    
    this.diagnostics.statistics.processedRows = processedRows;
    this.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedRows} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
  }
  
  isEmptyRow(row) {
    return !row || row.every(cell => !cell || cell.toString().trim() === '');
  }
  
  isSectionHeader(text) {
    const patterns = [
      '–æ—Ç–∑—ã–≤', '–æ—Å', '–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      '—Ü–µ–ª–µ–≤—ã–µ', '—Ü—Å', '—Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      '–ø–ª–æ—â–∞–¥–∫–∏', '–ø—Å', '—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ'
    ];
    
    return patterns.some(pattern => text.includes(pattern));
  }
  
  determineSectionType(text) {
    if (text.includes('–æ—Ç–∑—ã–≤') || text.includes('–æ—Å')) return 'reviews';
    if (text.includes('—Ü–µ–ª–µ–≤—ã–µ') || text.includes('—Ü—Å')) return 'targeted';
    if (text.includes('–ø–ª–æ—â–∞–¥–∫–∏') || text.includes('–ø—Å')) return 'social';
    return 'other';
  }
  
  isTableHeader(row) {
    if (!row || row.length === 0) return false;
    
    const rowText = row.join(' ').toLowerCase();
    const headerPatterns = ['—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', '–ø–ª–æ—â–∞–¥–∫–∞', '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'];
    
    return headerPatterns.some(pattern => rowText.includes(pattern));
  }
  
  isDataRow(row) {
    if (!row || row.length < 3) return false;
    
    const platform = this.getColumnValue(row, '–ø–ª–æ—â–∞–¥–∫–∞');
    const text = this.getColumnValue(row, '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
    
    return platform && text && text.length > 10;
  }
  
  processRow(row, sectionType, rowNumber) {
    try {
      const processedRow = {
        section: sectionType,
        rowNumber: rowNumber,
        placementType: this.getColumnValue(row, '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è'),
        platform: this.getColumnValue(row, '–ø–ª–æ—â–∞–¥–∫–∞'),
        product: this.getColumnValue(row, '–ø—Ä–æ–¥—É–∫—Ç'),
        messageLink: this.getColumnValue(row, '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ'),
        messageText: this.getColumnValue(row, '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'),
        date: this.getColumnValue(row, '–¥–∞—Ç–∞'),
        author: this.getColumnValue(row, '–∞–≤—Ç–æ—Ä'),
        views: this.extractNumber(this.getColumnValue(row, '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ')),
        engagement: this.extractNumber(this.getColumnValue(row, '–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ')),
        postType: this.getColumnValue(row, '—Ç–∏–ø –ø–æ—Å—Ç–∞')
      };
      
      if (!processedRow.platform || !processedRow.messageText) {
        return null;
      }
      
      return processedRow;
      
    } catch (error) {
      this.logError(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${rowNumber}`, error);
      return null;
    }
  }
  
  getColumnValue(row, columnName) {
    const columnIndex = this.columnMapping[columnName];
    if (columnIndex === undefined || columnIndex >= row.length) {
      return '';
    }
    
    const value = row[columnIndex];
    return value ? value.toString().trim() : '';
  }
  
  extractNumber(value) {
    if (!value) return 0;
    
    const str = value.toString().replace(/[^\d.,]/g, '');
    const num = parseFloat(str.replace(',', '.'));
    
    return isNaN(num) ? 0 : num;
  }
  
  updateStatistics(row, sectionType) {
    const stats = this.diagnostics.statistics;
    
    switch (sectionType) {
      case 'reviews':
        stats.reviewsCount++;
        break;
      case 'targeted':
        stats.targetedCount++;
        break;
      case 'social':
        stats.socialCount++;
        break;
    }
    
    stats.totalViews += row.views || 0;
    stats.totalEngagement += row.engagement || 0;
  }
  
  finalizeDiagnostics() {
    this.diagnostics.endTime = new Date();
    this.diagnostics.totalTime = this.diagnostics.endTime - this.diagnostics.startTime;
    
    const stats = this.diagnostics.statistics;
    
    this.log('üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê');
    this.log('========================');
    this.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${this.diagnostics.totalTime}ms`);
    this.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${stats.totalRows}`);
    this.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.processedRows}`);
    this.log(`üìù –û—Ç–∑—ã–≤–æ–≤: ${stats.reviewsCount}`);
    this.log(`üéØ –¶–µ–ª–µ–≤—ã—Ö: ${stats.targetedCount}`);
    this.log(`üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã—Ö: ${stats.socialCount}`);
    this.log(`üëÅÔ∏è –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${stats.totalViews}`);
    this.log(`üí¨ –í—Å–µ–≥–æ –≤–æ–≤–ª–µ—á–µ–Ω–∏–π: ${stats.totalEngagement}`);
  }
  
  log(message) {
    console.log(message);
    this.diagnostics.steps.push(`${new Date().toISOString()}: ${message}`);
  }
  
  logError(message, error) {
    const errorMsg = `${message}: ${error.toString()}`;
    console.error(errorMsg);
    this.diagnostics.errors.push(errorMsg);
  }
  
  logWarning(message) {
    console.warn(message);
    this.diagnostics.warnings.push(message);
  }
}

// ==================== –¢–ï–°–¢–ï–† ====================

class LocalTester {
  constructor() {
    this.processor = new LocalProcessor();
  }
  
  runTest() {
    console.log('üß™ –ó–ê–ü–£–°–ö –õ–û–ö–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('=================================');
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const result = this.processor.processData(MOCK_GOOGLE_SHEETS_DATA);
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const analysis = this.analyzeResult(result);
    
    // –û—Ç—á–µ—Ç
    this.generateReport(result, analysis);
    
    return {
      result,
      analysis,
      recommendations: this.generateRecommendations(analysis)
    };
  }
  
  analyzeResult(result) {
    const analysis = {
      success: result.success,
      score: 0,
      issues: [],
      positives: []
    };
    
    if (!result.success) {
      analysis.issues.push('–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π');
      return analysis;
    }
    
    const stats = result.statistics;
    
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    if (stats.processedRows >= LOCAL_CONFIG.SUCCESS_CRITERIA.MIN_PROCESSED_ROWS) {
      analysis.score += 0.2;
      analysis.positives.push(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫: ${stats.processedRows}`);
    } else {
      analysis.issues.push(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞–ª–æ —Å—Ç—Ä–æ–∫: ${stats.processedRows}`);
    }
    
    // –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤
    if (stats.reviewsCount >= LOCAL_CONFIG.SUCCESS_CRITERIA.MIN_REVIEWS_COUNT) {
      analysis.score += 0.2;
      analysis.positives.push(`–ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: ${stats.reviewsCount}`);
    } else {
      analysis.issues.push(`–ù–∞–π–¥–µ–Ω–æ –º–∞–ª–æ –æ—Ç–∑—ã–≤–æ–≤: ${stats.reviewsCount}`);
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤
    if (stats.targetedCount >= LOCAL_CONFIG.SUCCESS_CRITERIA.MIN_TARGETED_COUNT) {
      analysis.score += 0.2;
      analysis.positives.push(`–ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤: ${stats.targetedCount}`);
    } else {
      analysis.issues.push(`–ù–∞–π–¥–µ–Ω–æ –º–∞–ª–æ —Ü–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤: ${stats.targetedCount}`);
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫
    if (stats.socialCount >= LOCAL_CONFIG.SUCCESS_CRITERIA.MIN_SOCIAL_COUNT) {
      analysis.score += 0.2;
      analysis.positives.push(`–ù–∞–π–¥–µ–Ω–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫: ${stats.socialCount}`);
    } else {
      analysis.issues.push(`–ù–∞–π–¥–µ–Ω–æ –º–∞–ª–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫: ${stats.socialCount}`);
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    if (stats.totalViews > 0) {
      analysis.score += 0.1;
      analysis.positives.push(`–û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${stats.totalViews}`);
    } else {
      analysis.issues.push('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤');
    }
    
    // –ê–Ω–∞–ª–∏–∑ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
    if (stats.totalEngagement > 0) {
      analysis.score += 0.1;
      analysis.positives.push(`–û–±—â–µ–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: ${stats.totalEngagement}`);
    } else {
      analysis.issues.push('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–≤–ª–µ—á–µ–Ω–∏–π');
    }
    
    analysis.success = analysis.score >= LOCAL_CONFIG.TESTING.SUCCESS_THRESHOLD;
    
    return analysis;
  }
  
  generateReport(result, analysis) {
    console.log('\nüìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò');
    console.log('=======================');
    
    console.log(`üéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${analysis.success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –ù–ï–£–î–ê–ß–ê'}`);
    console.log(`üìà –û—Ü–µ–Ω–∫–∞: ${(analysis.score * 100).toFixed(1)}%`);
    
    if (analysis.positives.length > 0) {
      console.log('\n‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
      analysis.positives.forEach(positive => console.log(`  ‚Ä¢ ${positive}`));
    }
    
    if (analysis.issues.length > 0) {
      console.log('\n‚ùå –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
      analysis.issues.forEach(issue => console.log(`  ‚Ä¢ ${issue}`));
    }
    
    const stats = result.statistics;
    console.log('\nüìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`  ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${stats.totalRows}`);
    console.log(`  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${stats.processedRows}`);
    console.log(`  ‚Ä¢ –û—Ç–∑—ã–≤–æ–≤: ${stats.reviewsCount}`);
    console.log(`  ‚Ä¢ –¶–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤: ${stats.targetedCount}`);
    console.log(`  ‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫: ${stats.socialCount}`);
    console.log(`  ‚Ä¢ –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${stats.totalViews}`);
    console.log(`  ‚Ä¢ –û–±—â–µ–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: ${stats.totalEngagement}`);
    
    if (result.diagnostics.errors.length > 0) {
      console.log('\n‚ùå –û—à–∏–±–∫–∏:');
      result.diagnostics.errors.forEach(error => console.log(`  ‚Ä¢ ${error}`));
    }
    
    if (result.diagnostics.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
      result.diagnostics.warnings.forEach(warning => console.log(`  ‚Ä¢ ${warning}`));
    }
  }
  
  generateRecommendations(analysis) {
    const recommendations = [];
    
    analysis.issues.forEach(issue => {
      if (issue.includes('–º–∞–ª–æ —Å—Ç—Ä–æ–∫')) {
        recommendations.push('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö');
      } else if (issue.includes('–º–∞–ª–æ –æ—Ç–∑—ã–≤–æ–≤')) {
        recommendations.push('–£–ª—É—á—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –æ—Ç–∑—ã–≤–æ–≤');
      } else if (issue.includes('–º–∞–ª–æ —Ü–µ–ª–µ–≤—ã—Ö')) {
        recommendations.push('–£–ª—É—á—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Ü–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤');
      } else if (issue.includes('–º–∞–ª–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö')) {
        recommendations.push('–£–ª—É—á—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫');
      } else if (issue.includes('–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤')) {
        recommendations.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö');
      } else if (issue.includes('–≤–æ–≤–ª–µ—á–µ–Ω–∏–π')) {
        recommendations.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö');
      }
    });
    
    return recommendations;
  }
}

// ==================== –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ====================

function runLocalTest() {
  const tester = new LocalTester();
  const testResult = tester.runTest();
  
  console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:');
  console.log('=============================');
  
  if (testResult.recommendations.length > 0) {
    testResult.recommendations.forEach((rec, index) => {
      console.log(`${index + 1}. ${rec}`);
    });
  } else {
    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
  const reportPath = './test_results.json';
  try {
    fs.writeFileSync(reportPath, JSON.stringify(testResult, null, 2));
    console.log(`\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${reportPath}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${error.message}`);
  }
  
  return testResult;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  runLocalTest();
}

module.exports = { LocalProcessor, LocalTester, runLocalTest };