/**
 * üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ì–ò–ë–ö–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê –ë–≠–ö–ê–ì–ï–ù–¢–ê 1
 * Google Apps Script –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
 * –í–µ—Ä—Å–∏—è: 3.0.0 - –û–°–ù–û–í–ê–ù–ê –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•
 * 
 * –ê–≤—Ç–æ—Ä: AI Assistant + Background Agent bc-851d0563-ea94-47b9-ba36-0f832bafdb25
 * –î–∞—Ç–∞: 2025
 */

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê ====================

const CONFIG = {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (–û–°–ù–û–í–ê–ù–´ –ù–ê –ê–ù–ê–õ–ò–ó–ï –ë–≠–ö–ê–ì–ï–ù–¢–ê 1)
  STRUCTURE: {
    headerRow: 4,        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –í–°–ï–ì–î–ê –≤ —Å—Ç—Ä–æ–∫–µ 4
    dataStartRow: 5,     // –î–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Å—Ç—Ä–æ–∫–∏ 5
    infoRows: [1, 2, 3], // –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö 1-3
    maxRows: 10000
  },
  
  // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–û–°–ù–û–í–ê–ù–ê –ù–ê –ê–ù–ê–õ–ò–ó–ï –ë–≠–ö–ê–ì–ï–ù–¢–ê 1)
  CONTENT_TYPES: {
    REVIEWS: ['–û–°', '–û—Ç–∑—ã–≤—ã –°–∞–π—Ç–æ–≤', '–æ—Å', '–æ—Ç–∑—ã–≤—ã —Å–∞–π—Ç–æ–≤'],
    TARGETED: ['–¶–°', '–¶–µ–ª–µ–≤—ã–µ –°–∞–π—Ç—ã', '—Ü—Å', '—Ü–µ–ª–µ–≤—ã–µ —Å–∞–π—Ç—ã'],
    SOCIAL: ['–ü–°', '–ü–ª–æ—â–∞–¥–∫–∏ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ', '–ø—Å', '–ø–ª–æ—â–∞–¥–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ']
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ (–≥–∏–±–∫–∏–µ)
  COLUMNS: {
    PLATFORM: ['–ø–ª–æ—â–∞–¥–∫–∞', 'platform', 'site', '–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', '–∏—Å—Ç–æ—á–Ω–∏–∫'],
    TEXT: ['—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '—Ç–µ–∫—Å—Ç', 'message', 'content', '—Å–æ–æ–±—â–µ–Ω–∏–µ', '–æ–ø–∏—Å–∞–Ω–∏–µ'],
    DATE: ['–¥–∞—Ç–∞', 'date', 'created', '–≤—Ä–µ–º—è', '–¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'],
    AUTHOR: ['–∞–≤—Ç–æ—Ä', '–Ω–∏–∫', 'author', 'nickname', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–∏–º—è'],
    VIEWS: ['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã', '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ', 'views', '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'],
    ENGAGEMENT: ['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ', 'engagement', '–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ'],
    POST_TYPE: ['—Ç–∏–ø –ø–æ—Å—Ç–∞', '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', 'post_type', '—Ç–∏–ø', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è'],
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    THEME: ['—Ç–µ–º–∞', 'theme', 'subject', '–∑–∞–≥–æ–ª–æ–≤–æ–∫'],
    LINK: ['—Å—Å—ã–ª–∫–∞', 'link', 'url', '–∞–¥—Ä–µ—Å'],
    RATING: ['–æ—Ü–µ–Ω–∫–∞', 'rating', '—Ä–µ–π—Ç–∏–Ω–≥', '–∑–≤–µ–∑–¥—ã']
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  FORMATTING: {
    DATE_FORMAT: 'dd.mm.yyyy',
    NUMBER_FORMAT: '#,##0',
    CURRENCY_FORMAT: '#,##0 ‚ÇΩ'
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  TESTING: {
    ENABLE_DEBUG: true,
    LOG_DETAILS: true,
    VALIDATE_RESULTS: true
  }
};

// ==================== –ö–õ–ê–°–° –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê ====================

/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 * –û–°–ù–û–í–ê–ù –ù–ê –ê–ù–ê–õ–ò–ó–ï –ë–≠–ö–ê–ì–ï–ù–¢–ê 1
 */
class FinalMonthlyReportProcessor {
  constructor() {
    this.stats = {
      totalRows: 0,
      reviewsCount: 0,
      targetedCount: 0,
      socialCount: 0,
      totalViews: 0,
      processingTime: 0,
      errors: []
    };
    
    this.columnMapping = {};
    this.monthInfo = null;
    this.contentSections = {
      reviews: [],
      targeted: [],
      social: []
    };
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞
   */
  processReport(spreadsheetId, sheetName = null) {
    const startTime = Date.now();
    
    try {
      console.log('üöÄ FINAL PROCESSOR - –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ë—ç–∫–∞–≥–µ–Ω—Ç–∞ 1');
      
      // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const sourceData = this.getSourceData(spreadsheetId, sheetName);
      
      // 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
      this.monthInfo = this.detectMonth(sourceData);
      console.log(`üìÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ—Å—è—Ü: ${this.monthInfo.name} ${this.monthInfo.year}`);
      
      // 3. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (–û–°–ù–û–í–ê–ù –ù–ê –ê–ù–ê–õ–ò–ó–ï –ë–≠–ö–ê–ì–ï–ù–¢–ê 1)
      this.analyzeDataStructure(sourceData);
      
      // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      const processedData = this.processData(sourceData);
      
      // 5. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
      const reportUrl = this.createReport(processedData);
      
      // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      this.stats.processingTime = Date.now() - startTime;
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', this.stats);
      
      return {
        success: true,
        reportUrl: reportUrl,
        statistics: this.stats,
        monthInfo: this.monthInfo
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
      this.stats.errors.push(error.toString());
      
      return {
        success: false,
        error: error.toString(),
        statistics: this.stats
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–û–ë–ù–û–í–õ–ï–ù–û –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê)
   */
  getSourceData(spreadsheetId, sheetName) {
    const spreadsheet = SpreadsheetApp.openById(spreadsheetId);
    const sheet = sheetName ? spreadsheet.getSheetByName(sheetName) : spreadsheet.getActiveSheet();
    
    if (!sheet) {
      throw new Error(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    const data = sheet.getDataRange().getValues();
    this.stats.totalRows = data.length;
    
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ ${CONFIG.STRUCTURE.headerRow}, –¥–∞–Ω–Ω—ã–µ —Å —Å—Ç—Ä–æ–∫–∏ ${CONFIG.STRUCTURE.dataStartRow}`);
    
    return data;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å—Ç—Ä–æ–∫–∏ 1-3)
   */
  detectMonth(data) {
    // –ü–æ–∏—Å–∫ –≤ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å—Ç—Ä–æ–∫–∏ 1-3)
    for (let i = 0; i < Math.min(3, data.length); i++) {
      const rowText = data[i].join(' ').toLowerCase();
      const monthFromMeta = this.extractMonthFromText(rowText);
      if (monthFromMeta) {
        return { ...monthFromMeta, detectedFrom: 'meta' };
      }
    }
    
    // –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞
    const sheetName = SpreadsheetApp.getActiveSheet().getName();
    const monthFromSheet = this.extractMonthFromText(sheetName);
    if (monthFromSheet) {
      return { ...monthFromSheet, detectedFrom: 'sheet' };
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const now = new Date();
    return {
      name: this.getMonthName(now.getMonth()),
      short: this.getMonthShort(now.getMonth()),
      number: now.getMonth() + 1,
      year: now.getFullYear(),
      detectedFrom: 'default'
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (–ò–°–ü–†–ê–í–õ–ï–ù–û –ù–ê –û–°–ù–û–í–ï –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•)
   */
  analyzeDataStructure(data) {
    if (data.length < CONFIG.STRUCTURE.headerRow) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã');
    }
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ 4 (–û–°–ù–û–í–ê–ù–û –ù–ê –ê–ù–ê–õ–ò–ó–ï)
    const headers = data[CONFIG.STRUCTURE.headerRow - 1];
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ (—Å—Ç—Ä–æ–∫–∞ 4):', headers);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    this.columnMapping = {
      platform: 0,    // –ö–æ–ª–æ–Ω–∫–∞ A - —Å–∞–π—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "otzovik.com")
      link: 1,        // –ö–æ–ª–æ–Ω–∫–∞ B - —Å—Å—ã–ª–∫–∞
      text: 2,        // –ö–æ–ª–æ–Ω–∫–∞ C - —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      date: 3,        // –ö–æ–ª–æ–Ω–∫–∞ D - –¥–∞—Ç–∞
      author: 4,      // –ö–æ–ª–æ–Ω–∫–∞ E - –∞–≤—Ç–æ—Ä
      // –ö–æ–ª–æ–Ω–∫–∏ F-K: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
      views: 11,      // –ö–æ–ª–æ–Ω–∫–∞ L - –ø—Ä–æ—Å–º–æ—Ç—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
      postType: headers.length - 1  // –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ - —Ç–∏–ø ("–û–°", "–¶–°")
    };
    
    console.log('üó∫Ô∏è –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π):', this.columnMapping);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    const requiredColumns = ['platform', 'text', 'date'];
    const missingColumns = requiredColumns.filter(col => this.columnMapping[col] === undefined);
    
    if (missingColumns.length > 0) {
      console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: ${missingColumns.join(', ')}`);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–û–ë–ù–û–í–õ–ï–ù–û –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê)
   */
  processData(data) {
    const processedData = {
      reviews: [],
      targeted: [],
      social: [],
      statistics: {
        totalReviews: 0,
        totalTargeted: 0,
        totalSocial: 0,
        totalViews: 0,
        platforms: new Set()
      }
    };
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å —Å—Ç—Ä–æ–∫–∏ 5 (–û–°–ù–û–í–ê–ù–û –ù–ê –ê–ù–ê–õ–ò–ó–ï)
    for (let i = CONFIG.STRUCTURE.dataStartRow - 1; i < data.length; i++) {
      const row = data[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (this.isEmptyRow(row)) continue;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      const contentType = this.detectContentType(row);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      if (contentType && this.isDataRow(row)) {
        const record = this.processRow(row, contentType);
        
        if (record) {
          if (contentType === 'reviews') {
            processedData.reviews.push(record);
            processedData.statistics.totalReviews++;
          } else if (contentType === 'targeted') {
            processedData.targeted.push(record);
            processedData.statistics.totalTargeted++;
          } else if (contentType === 'social') {
            processedData.social.push(record);
            processedData.statistics.totalSocial++;
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          processedData.statistics.totalViews += record.views || 0;
          if (record.platform) {
            processedData.statistics.platforms.add(record.platform);
          }
        }
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.stats.reviewsCount = processedData.statistics.totalReviews;
    this.stats.targetedCount = processedData.statistics.totalTargeted;
    this.stats.socialCount = processedData.statistics.totalSocial;
    this.stats.totalViews = processedData.statistics.totalViews;
    
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedData.statistics.totalReviews} –æ—Ç–∑—ã–≤–æ–≤, ${processedData.statistics.totalTargeted} —Ü–µ–ª–µ–≤—ã—Ö, ${processedData.statistics.totalSocial} —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö`);
    
    return processedData;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û –ù–ê –û–°–ù–û–í–ï –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•)
   */
  detectContentType(row) {
    if (row.length === 0) return null;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–∏–ø –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–ª–æ–Ω–∫–µ —Å—Ç—Ä–æ–∫–∏
    const lastColumnIndex = row.length - 1;
    const postType = String(row[lastColumnIndex] || '').toLowerCase().trim();
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–ª–æ–Ω–∫–µ (${lastColumnIndex}): "${postType}"`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–ª–æ–Ω–∫–µ
    if (CONFIG.CONTENT_TYPES.REVIEWS.some(type => postType.includes(type))) {
      return 'reviews';
    }
    
    if (CONFIG.CONTENT_TYPES.TARGETED.some(type => postType.includes(type))) {
      return 'targeted';
    }
    
    if (CONFIG.CONTENT_TYPES.SOCIAL.some(type => postType.includes(type))) {
      return 'social';
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É (–µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω)
    const textIndex = this.columnMapping.text || 2;
    if (textIndex !== undefined && row[textIndex]) {
      const text = String(row[textIndex]).toLowerCase();
      
      // –ü—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
      if (text.includes('–æ—Ç–∑—ã–≤') || text.includes('review')) {
        return 'reviews';
      }
      
      if (text.includes('—Ü–µ–ª–µ–≤–æ–π') || text.includes('target')) {
        return 'targeted';
      }
      
      if (text.includes('—Å–æ—Ü–∏–∞–ª—å–Ω') || text.includes('social')) {
        return 'social';
      }
    }
    
    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
   */
  isEmptyRow(row) {
    return !row || row.every(cell => !cell || String(cell).trim() === '');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
   */
  isDataRow(row) {
    if (row.length < 3) return false;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏-–∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π
    const firstCell = String(row[0] || '').toLowerCase().trim();
    if (firstCell === '–æ—Ç–∑—ã–≤—ã' || firstCell === '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏' || firstCell === '–æ–±—Å—É–∂–¥–µ–Ω–∏—è') {
      console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏: "${firstCell}"`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ C (–∏–Ω–¥–µ–∫—Å 2)
    const text = row[2];
    return text && String(text).trim().length > 10;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  processRow(row, contentType) {
    try {
      const record = {
        contentType: contentType,
        platform: this.extractPlatform(row),
        text: this.extractText(row),
        date: this.extractDate(row),
        author: this.extractAuthor(row),
        views: this.extractViews(row),
        postType: this.extractPostType(row),
        theme: this.extractTheme(row),
        link: this.extractLink(row)
      };
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏
      if (!record.text || record.text.length < 10) {
        return null;
      }
      
      return record;
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${row}:`, error);
      return null;
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û)
   */
  extractPlatform(row) {
    const index = this.columnMapping.platform;
    if (index !== undefined && row[index]) {
      return String(row[index]).trim();
    }
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
   */
  extractText(row) {
    const index = this.columnMapping.text;
    if (index !== undefined && row[index]) {
      return String(row[index]).trim();
    }
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û)
   */
  extractDate(row) {
    const index = this.columnMapping.date;
    if (index !== undefined && row[index]) {
      const dateValue = row[index];
      
      if (dateValue instanceof Date) {
        return Utilities.formatDate(dateValue, Session.getScriptTimeZone(), CONFIG.FORMATTING.DATE_FORMAT);
      }
      
      return String(dateValue);
    }
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
   */
  extractAuthor(row) {
    const index = this.columnMapping.author;
    if (index !== undefined && row[index]) {
      return String(row[index]).trim();
    }
    return '–ê–Ω–æ–Ω–∏–º';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
   */
  extractViews(row) {
    const index = this.columnMapping.views;
    if (index !== undefined && row[index]) {
      const viewsValue = row[index];
      
      if (typeof viewsValue === 'number') {
        return viewsValue;
      }
      
      const parsed = parseInt(String(viewsValue).replace(/\D/g, ''));
      return isNaN(parsed) ? 0 : parsed;
    }
    return 0;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
   */
  extractPostType(row) {
    const index = this.columnMapping.postType;
    if (index !== undefined && row[index]) {
      return String(row[index]).trim();
    }
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º—ã
   */
  extractTheme(row) {
    const index = this.columnMapping.theme;
    if (index !== undefined && row[index]) {
      return String(row[index]).trim();
    }
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
   */
  extractLink(row) {
    const index = this.columnMapping.link;
    if (index !== undefined && row[index]) {
      return String(row[index]).trim();
    }
    return '';
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ (–û–ë–ù–û–í–õ–ï–ù–û –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê)
   */
  createReport(processedData) {
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const reportSheetName = `–û—Ç—á–µ—Ç_${this.monthInfo.name}_${this.monthInfo.year}`;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingSheet = spreadsheet.getSheetByName(reportSheetName);
    if (existingSheet) {
      spreadsheet.deleteSheet(existingSheet);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
    const reportSheet = spreadsheet.insertSheet(reportSheetName);
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
    reportSheet.getRange('A1').setValue(`–û–¢–ß–ï–¢ –ó–ê ${this.monthInfo.name.toUpperCase()} ${this.monthInfo.year}`);
    reportSheet.getRange('A1:H1').merge();
    reportSheet.getRange('A1').setFontWeight('bold').setFontSize(14);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    reportSheet.getRange('A3').setValue('–°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    reportSheet.getRange('A3').setFontWeight('bold');
    
    const statsData = [
      ['–û—Ç–∑—ã–≤—ã –°–∞–π—Ç–æ–≤ (–û–°):', this.stats.reviewsCount],
      ['–¶–µ–ª–µ–≤—ã–µ –°–∞–π—Ç—ã (–¶–°):', this.stats.targetedCount],
      ['–ü–ª–æ—â–∞–¥–∫–∏ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ (–ü–°):', this.stats.socialCount],
      ['–û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:', this.stats.totalViews],
      ['–ü–ª–∞—Ç—Ñ–æ—Ä–º:', Array.from(processedData.statistics.platforms).length],
      ['–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', `${(this.stats.processingTime / 1000).toFixed(2)} —Å–µ–∫`]
    ];
    
    reportSheet.getRange(4, 1, statsData.length, 2).setValues(statsData);
    
    // –û—Ç–∑—ã–≤—ã –°–∞–π—Ç–æ–≤ (–û–°)
    let currentRow = statsData.length + 6;
    reportSheet.getRange(`A${currentRow}`).setValue('–û–¢–ó–´–í–´ –°–ê–ô–¢–û–í (–û–°):');
    reportSheet.getRange(`A${currentRow}`).setFontWeight('bold').setFontSize(12);
    currentRow++;
    
    const headers = ['–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞', '–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞', '–ê–≤—Ç–æ—Ä', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–¢–∏–ø', '–¢–µ–º–∞', '–°—Å—ã–ª–∫–∞'];
    reportSheet.getRange(currentRow, 1, 1, headers.length).setValues([headers]);
    reportSheet.getRange(currentRow, 1, 1, headers.length).setFontWeight('bold');
    currentRow++;
    
    if (processedData.reviews.length > 0) {
      const reviewData = processedData.reviews.map(review => [
        review.platform,
        review.text,
        review.date,
        review.author,
        review.views,
        review.postType,
        review.theme,
        review.link
      ]);
      
      reportSheet.getRange(currentRow, 1, reviewData.length, headers.length).setValues(reviewData);
      currentRow += reviewData.length;
    }
    
    // –¶–µ–ª–µ–≤—ã–µ –°–∞–π—Ç—ã (–¶–°)
    currentRow += 2;
    reportSheet.getRange(`A${currentRow}`).setValue('–¶–ï–õ–ï–í–´–ï –°–ê–ô–¢–´ (–¶–°):');
    reportSheet.getRange(`A${currentRow}`).setFontWeight('bold').setFontSize(12);
    currentRow++;
    
    reportSheet.getRange(currentRow, 1, 1, headers.length).setValues([headers]);
    reportSheet.getRange(currentRow, 1, 1, headers.length).setFontWeight('bold');
    currentRow++;
    
    if (processedData.targeted.length > 0) {
      const targetedData = processedData.targeted.map(targeted => [
        targeted.platform,
        targeted.text,
        targeted.date,
        targeted.author,
        targeted.views,
        targeted.postType,
        targeted.theme,
        targeted.link
      ]);
      
      reportSheet.getRange(currentRow, 1, targetedData.length, headers.length).setValues(targetedData);
      currentRow += targetedData.length;
    }
    
    // –ü–ª–æ—â–∞–¥–∫–∏ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ (–ü–°)
    currentRow += 2;
    reportSheet.getRange(`A${currentRow}`).setValue('–ü–õ–û–©–ê–î–ö–ò –°–û–¶–ò–ê–õ–¨–ù–´–ï (–ü–°):');
    reportSheet.getRange(`A${currentRow}`).setFontWeight('bold').setFontSize(12);
    currentRow++;
    
    reportSheet.getRange(currentRow, 1, 1, headers.length).setValues([headers]);
    reportSheet.getRange(currentRow, 1, 1, headers.length).setFontWeight('bold');
    currentRow++;
    
    if (processedData.social.length > 0) {
      const socialData = processedData.social.map(social => [
        social.platform,
        social.text,
        social.date,
        social.author,
        social.views,
        social.postType,
        social.theme,
        social.link
      ]);
      
      reportSheet.getRange(currentRow, 1, socialData.length, headers.length).setValues(socialData);
      currentRow += socialData.length;
    }
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!)
    currentRow += 2;
    const totalRow = [
      '–ò–¢–û–ì–û:',
      '',
      '',
      '',
      this.stats.totalViews,
      '',
      '',
      ''
    ];
    reportSheet.getRange(currentRow, 1, 1, totalRow.length).setValues([totalRow]);
    reportSheet.getRange(currentRow, 1, 1, totalRow.length).setFontWeight('bold');
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    reportSheet.autoResizeColumns(1, headers.length);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    const dataRange = reportSheet.getDataRange();
    reportSheet.getRange(1, 1, dataRange.getNumRows(), dataRange.getNumColumns()).createFilter();
    
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${reportSheetName}`);
    
    return spreadsheet.getUrl();
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  extractMonthFromText(text) {
    const lowerText = text.toLowerCase();
    
    const months = [
      { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤', number: 1 },
      { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤', number: 2 },
      { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä', number: 3 },
      { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä', number: 4 },
      { name: '–ú–∞–π', short: '–ú–∞–π', number: 5 },
      { name: '–ò—é–Ω—å', short: '–ò—é–Ω', number: 6 },
      { name: '–ò—é–ª—å', short: '–ò—é–ª', number: 7 },
      { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥', number: 8 },
      { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω', number: 9 },
      { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç', number: 10 },
      { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è', number: 11 },
      { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫', number: 12 }
    ];
    
    for (const month of months) {
      const variants = [
        month.name.toLowerCase(),
        month.short.toLowerCase(),
        `${month.short}25`,
        `${month.name}25`,
        `${month.short}2025`,
        `${month.name}2025`
      ];
      
      if (variants.some(variant => lowerText.includes(variant))) {
        return {
          name: month.name,
          short: month.short,
          number: month.number,
          year: 2025
        };
      }
    }
    
    return null;
  }

  getMonthName(monthIndex) {
    const months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                   '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
    return months[monthIndex];
  }

  getMonthShort(monthIndex) {
    const months = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                   '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫'];
    return months[monthIndex];
  }
}

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
function processMonthlyReport(spreadsheetId = null, sheetName = null) {
  const processor = new FinalMonthlyReportProcessor();
  
  if (!spreadsheetId) {
    spreadsheetId = SpreadsheetApp.getActiveSpreadsheet().getId();
  }
  
  return processor.processReport(spreadsheetId, sheetName);
}

/**
 * –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞
 */
function quickProcess() {
  return processMonthlyReport();
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º –ª–∏—Å—Ç–∞
 */
function processWithSheetSelection() {
  const ui = SpreadsheetApp.getUi();
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheets = spreadsheet.getSheets();
  
  const sheetNames = sheets.map(sheet => sheet.getName());
  const response = ui.prompt(
    '–í—ã–±–æ—Ä –ª–∏—Å—Ç–∞',
    `–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã:\n${sheetNames.join('\n')}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:`,
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() === ui.Button.OK) {
    const selectedSheet = response.getResponseText().trim();
    return processMonthlyReport(spreadsheet.getId(), selectedSheet);
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
 */
function updateMenu() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ (–§–ò–ù–ê–õ–¨–ù–ê–Ø)')
    .addItem('–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞', 'quickProcess')
    .addItem('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º –ª–∏—Å—Ç–∞', 'processWithSheetSelection')
    .addSeparator()
    .addItem('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'showSettings')
    .addToUi();
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
function showSettings() {
  const ui = SpreadsheetApp.getUi();
  ui.alert(
    '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (–û–°–ù–û–í–ê–ù–´ –ù–ê –ê–ù–ê–õ–ò–ó–ï –ë–≠–ö–ê–ì–ï–ù–¢–ê 1)',
    `–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n` +
    `- –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ: ${CONFIG.STRUCTURE.headerRow}\n` +
    `- –î–∞–Ω–Ω—ã–µ —Å —Å—Ç—Ä–æ–∫–∏: ${CONFIG.STRUCTURE.dataStartRow}\n` +
    `- –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: —Å—Ç—Ä–æ–∫–∏ ${CONFIG.STRUCTURE.infoRows.join(', ')}\n` +
    `- –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–æ–∫: ${CONFIG.STRUCTURE.maxRows}\n` +
    `- –û—Ç–ª–∞–¥–∫–∞: ${CONFIG.TESTING.ENABLE_DEBUG ? '–í–∫–ª—é—á–µ–Ω–∞' : '–í—ã–∫–ª—é—á–µ–Ω–∞'}`,
    ui.ButtonSet.OK
  );
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
 */
function onOpen() {
  updateMenu();
} 