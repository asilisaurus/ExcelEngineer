/**
 * üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–ò–ù–ê–õ–¨–ù–´–ô –ì–ò–ë–ö–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
 * Google Apps Script –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
 * –í–µ—Ä—Å–∏—è: 3.2.0 - FIXED
 * 
 * –ê–≤—Ç–æ—Ä: AI Assistant + Background Agent
 * –î–∞—Ç–∞: 2025
 */

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê ====================

const CONFIG = {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
  STRUCTURE: {
    headerRow: 4,        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –í–°–ï–ì–î–ê –≤ —Å—Ç—Ä–æ–∫–µ 4
    dataStartRow: 5,     // –î–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Å—Ç—Ä–æ–∫–∏ 5
    infoRows: [1, 2, 3], // –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö 1-3
    maxRows: 10000
  },
  
  // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  CONTENT_TYPES: {
    REVIEWS: ['–û–°', '–û—Ç–∑—ã–≤—ã –°–∞–π—Ç–æ–≤', '–æ—Å', '–æ—Ç–∑—ã–≤—ã —Å–∞–π—Ç–æ–≤'],
    TARGETED: ['–¶–°', '–¶–µ–ª–µ–≤—ã–µ –°–∞–π—Ç—ã', '—Ü—Å', '—Ü–µ–ª–µ–≤—ã–µ —Å–∞–π—Ç—ã'],
    SOCIAL: ['–ü–°', '–ü–ª–æ—â–∞–¥–∫–∏ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ', '–ø—Å', '–ø–ª–æ—â–∞–¥–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ']
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
  COLUMNS: {
    PLATFORM: ['–ø–ª–æ—â–∞–¥–∫–∞', 'platform', 'site'],
    TEXT: ['—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '—Ç–µ–∫—Å—Ç', 'message'],
    DATE: ['–¥–∞—Ç–∞', 'date', 'created'],
    AUTHOR: ['–∞–≤—Ç–æ—Ä', '–Ω–∏–∫', 'author'],
    VIEWS: ['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã', '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ', 'views'],
    ENGAGEMENT: ['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ', 'engagement'],
    POST_TYPE: ['—Ç–∏–ø –ø–æ—Å—Ç–∞', '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', 'post_type'],
    THEME: ['—Ç–µ–º–∞', 'theme', 'subject'],
    LINK: ['—Å—Å—ã–ª–∫–∞', 'link', 'url']
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  FORMATTING: {
    DATE_FORMAT: 'dd.mm.yyyy',
    NUMBER_FORMAT: '#,##0',
    CURRENCY_FORMAT: '#,##0 ‚ÇΩ'
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  TESTING: {
    ENABLE_DEBUG: true,
    LOG_DETAILS: true,
    VALIDATE_RESULTS: true
  }
};

// ==================== –ö–õ–ê–°–° –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê ====================

class FinalMonthlyReportProcessor {
  constructor() {
    this.stats = {
      totalRows: 0,
      reviewsCount: 0,
      targetedCount: 0,
      socialCount: 0,
      totalViews: 0,
      processingTime: 0,
      errors: [],
      commentsTop20Count: 0,
      activeDiscussionsCount: 0,
      engagementShare: 0
    };
    
    this.columnMapping = {};
    this.monthInfo = null;
    this.contentSections = {
      reviews: [],
      targeted: [],
      social: []
    };
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞
   */
  processReport(spreadsheetId, sheetName = null) {
    const startTime = Date.now();
    
    try {
      console.log('üöÄ FINAL PROCESSOR - –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      
      // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const sourceData = this.getSourceData(spreadsheetId, sheetName);
      
      // 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
      this.monthInfo = this.detectMonth(sourceData, sheetName);
      console.log(`üìÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ—Å—è—Ü: ${this.monthInfo.name} ${this.monthInfo.year}`);
      
      // 3. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
      this.analyzeDataStructure(sourceData);
      
      // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      const processedData = this.processData(sourceData);
      
      // 5. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
      const reportUrl = this.createReport(processedData);
      
      // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      this.stats.processingTime = Date.now() - startTime;
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', this.stats);
      
      return {
        success: true,
        reportUrl: reportUrl,
        statistics: this.stats,
        monthInfo: this.monthInfo
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
      this.stats.errors.push(error.toString());
      
      return {
        success: false,
        error: error.toString(),
        statistics: this.stats
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  getSourceData(spreadsheetId, sheetName) {
    const spreadsheet = SpreadsheetApp.openById(spreadsheetId);
    const sheet = sheetName ? spreadsheet.getSheetByName(sheetName) : spreadsheet.getActiveSheet();
    
    if (!sheet) {
      throw new Error(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    const data = sheet.getDataRange().getValues();
    this.stats.totalRows = data.length;
    
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ ${CONFIG.STRUCTURE.headerRow}, –¥–∞–Ω–Ω—ã–µ —Å —Å—Ç—Ä–æ–∫–∏ ${CONFIG.STRUCTURE.dataStartRow}`);
    
    return data;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  detectMonth(data, sheetName = null) {
    // 1. –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—è—Ü –∏–∑ sheetName
    if (sheetName) {
      const monthFromSheet = this.extractMonthFromText(sheetName);
      if (monthFromSheet) {
        console.log(`üìÖ –ú–µ—Å—è—Ü –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞: ${monthFromSheet.name} ${monthFromSheet.year}`);
        return { ...monthFromSheet, detectedFrom: 'sheet' };
      }
    }
    
    // 2. –ò—â–µ–º –≤ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å—Ç—Ä–æ–∫–∏ 1-3)
    for (let i = 0; i < Math.min(3, data.length); i++) {
      const rowText = data[i].join(' ').toLowerCase();
      const monthFromMeta = this.extractMonthFromText(rowText);
      if (monthFromMeta) {
        console.log(`üìÖ –ú–µ—Å—è—Ü –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${monthFromMeta.name} ${monthFromMeta.year}`);
        return { ...monthFromMeta, detectedFrom: 'meta' };
      }
    }
    
    // 3. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const now = new Date();
    return {
      name: this.getMonthName(now.getMonth()),
      short: this.getMonthShort(now.getMonth()),
      number: now.getMonth() + 1,
      year: now.getFullYear(),
      detectedFrom: 'default'
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
   */
  analyzeDataStructure(data) {
    this.columnMapping = this.getColumnMapping();
    console.log('üó∫Ô∏è –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫:', this.columnMapping);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  processData(data) {
    // –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const sourceStats = this.extractStatisticsFromSourceData(data);
    
    const processedData = {
      reviews: [],
      commentsTop20: [],
      activeDiscussions: [],
      statistics: {
        totalReviews: 0,
        totalCommentsTop20: 0,
        totalActiveDiscussions: 0,
        totalViews: sourceStats.totalViews || 0,
        platforms: new Set()
      }
    };
    
    let processedRows = 0;
    let skippedRows = 0;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
    const columnMapping = this.getColumnMapping();
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∏ –∏—Ö –≥—Ä–∞–Ω–∏—Ü—ã
    const sections = this.findSectionBoundaries(data);
    console.log('üìÇ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:', sections);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –æ—Ç–¥–µ–ª—å–Ω–æ
    for (const section of sections) {
      const currentSection = section.type;
      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ "${section.name}" (—Å—Ç—Ä–æ–∫–∏ ${section.startRow + 1}-${section.endRow + 1})`);
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Ä–∞–∑–¥–µ–ª—ã
      if (section.endRow < section.startRow) {
        console.log(`‚è≠Ô∏è –†–∞–∑–¥–µ–ª "${section.name}" –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑–¥–µ–ª–∞
      for (let i = section.startRow; i <= section.endRow; i++) {
        const row = data[i];
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if (this.isSectionHeader(row) || this.isEmptyRow(row)) {
          skippedRows++;
          continue;
        }
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if (this.isStatisticsRow(row)) {
          skippedRows++;
          continue;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
        const record = this.processRow(row, currentSection, columnMapping);
        if (record) {
          if (currentSection === 'reviews') {
            processedData.reviews.push(record);
            processedData.statistics.totalReviews++;
          } else if (currentSection === 'commentsTop20') {
            processedData.commentsTop20.push(record);
            processedData.statistics.totalCommentsTop20++;
          } else if (currentSection === 'activeDiscussions') {
            processedData.activeDiscussions.push(record);
            processedData.statistics.totalActiveDiscussions++;
          }
          
          // –ï—Å–ª–∏ –æ–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, —Å—É–º–º–∏—Ä—É–µ–º –∏–∑ –∑–∞–ø–∏—Å–µ–π
          if (!sourceStats.totalViews && record.views) {
            processedData.statistics.totalViews += record.views;
          }
          
          if (record.platform) {
            processedData.statistics.platforms.add(record.platform);
          }
          processedRows++;
        } else {
          skippedRows++;
        }
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.stats.reviewsCount = processedData.statistics.totalReviews;
    this.stats.commentsTop20Count = processedData.statistics.totalCommentsTop20;
    this.stats.activeDiscussionsCount = processedData.statistics.totalActiveDiscussions;
    this.stats.totalViews = processedData.statistics.totalViews;
    this.stats.engagementShare = sourceStats.engagementShare;
    
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedRows} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedRows} —Å—Ç—Ä–æ–∫`);
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${processedData.statistics.totalReviews} –æ—Ç–∑—ã–≤–æ–≤, ${processedData.statistics.totalCommentsTop20} —Ç–æ–ø-20, ${processedData.statistics.totalActiveDiscussions} –æ–±—Å—É–∂–¥–µ–Ω–∏–π`);
    console.log(`üìä –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${processedData.statistics.totalViews}`);
    
    return processedData;
  }

  /**
   * –ü–æ–∏—Å–∫ –≥—Ä–∞–Ω–∏—Ü —Ä–∞–∑–¥–µ–ª–æ–≤
   */
  findSectionBoundaries(data) {
    const sections = [];
    
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
    const sectionHeaders = [];
    
    for (let i = CONFIG.STRUCTURE.dataStartRow - 1; i < data.length; i++) {
      const row = data[i];
      const firstCell = String(row[0] || '').toLowerCase().trim();
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      if (this.isStatisticsRow(row)) {
        break;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞–∑–¥–µ–ª–∞
      let sectionType = null;
      let sectionName = '';
      
      if (firstCell === '–æ—Ç–∑—ã–≤—ã' || (firstCell.includes('–æ—Ç–∑—ã–≤—ã') && !firstCell.includes('—Ç–æ–ø-20') && !firstCell.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è') && !firstCell.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'))) {
        sectionType = 'reviews';
        sectionName = '–û—Ç–∑—ã–≤—ã';
      } else if (firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20') || firstCell.includes('—Ç–æ–ø-20 –≤—ã–¥–∞—á–∏')) {
        sectionType = 'commentsTop20';
        sectionName = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20';
      } else if (firstCell.includes('–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è') || firstCell.includes('–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')) {
        sectionType = 'activeDiscussions';
        sectionName = '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è';
      }
      
      if (sectionType) {
        sectionHeaders.push({
          type: sectionType,
          name: sectionName,
          headerRow: i
        });
        console.log(`üìÇ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ "${sectionName}" –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
      }
    }
    
    // –¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    for (let i = 0; i < sectionHeaders.length; i++) {
      const currentHeader = sectionHeaders[i];
      const nextHeader = sectionHeaders[i + 1];
      
      const startRow = currentHeader.headerRow + 1;
      let endRow;
      
      if (nextHeader) {
        endRow = nextHeader.headerRow - 1;
      } else {
        endRow = data.length - 1;
        
        // –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for (let j = startRow; j < data.length; j++) {
          if (this.isStatisticsRow(data[j]) || this.isEmptyRow(data[j])) {
            let hasDataAfter = false;
            for (let k = j + 1; k < Math.min(j + 5, data.length); k++) {
              if (!this.isEmptyRow(data[k]) && !this.isStatisticsRow(data[k])) {
                hasDataAfter = true;
                break;
              }
            }
            
            if (!hasDataAfter) {
              endRow = j - 1;
              break;
            }
          }
        }
      }
      
      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º endRow, –µ—Å–ª–∏ —Ä–∞–∑–¥–µ–ª –ø—É—Å—Ç–æ–π
      if (endRow < startRow) {
        endRow = startRow - 1;
      }
      
      sections.push({
        type: currentHeader.type,
        name: currentHeader.name,
        startRow: startRow,
        endRow: endRow
      });
      
      console.log(`üìä –†–∞–∑–¥–µ–ª "${currentHeader.name}": —Å—Ç—Ä–æ–∫–∏ ${startRow + 1}-${endRow + 1} (${Math.max(0, endRow - startRow + 1)} –∑–∞–ø–∏—Å–µ–π)`);
    }
    
    return sections;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  processRow(row, currentSection, columnMapping) {
    try {
      if (!row || row.length === 0) {
        return null;
      }

      const textIndex = columnMapping.text;
      const platformIndex = columnMapping.platform;
      
      const text = row[textIndex] ? String(row[textIndex]).trim() : '';
      const platform = row[platformIndex] ? String(row[platformIndex]).trim() : '';
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      if (!text && !platform) {
        return null;
      }
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
      const firstCell = String(row[0] || '').toLowerCase().trim();
      if (firstCell === '–æ—Ç–∑—ã–≤—ã' || firstCell === '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20 –≤—ã–¥–∞—á–∏' || 
          firstCell === '–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)' || firstCell === '–ø–ª–æ—â–∞–¥–∫–∞') {
        return null;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const extractedPlatform = this.extractPlatform(row, columnMapping);
      const theme = this.extractTheme(row, columnMapping);
      const textContent = this.extractText(row, columnMapping);
      const extractedDate = this.extractDate(row, columnMapping);
      const author = this.extractAuthor(row, columnMapping);
      const views = this.extractViews(row, columnMapping);
      const engagement = this.extractEngagement(row, columnMapping);
      const link = this.extractLink(row, columnMapping);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Å—Ç–∞
      let type = '–û–°';
      
      const postTypeIndex = columnMapping.postType;
      if (postTypeIndex !== undefined && row.length > postTypeIndex && row[postTypeIndex]) {
        const postTypeValue = String(row[postTypeIndex]).trim().toUpperCase();
        if (postTypeValue === '–û–°' || postTypeValue === '–û.–°.' || postTypeValue === 'OC') {
          type = '–û–°';
        } else if (postTypeValue === '–¶–°' || postTypeValue === '–¶.–°.' || postTypeValue === 'TC') {
          type = '–¶–°';
        } else if (postTypeValue === '–ü–°' || postTypeValue === '–ü.–°.' || postTypeValue === 'PC') {
          type = '–ü–°';
        }
      }

      return {
        platform: extractedPlatform,
        theme,
        text: textContent,
        date: extractedDate,
        author,
        views,
        engagement,
        type,
        link,
        section: currentSection
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: ${error.message}`);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
   */
  createReport(processedData) {
    const tempSpreadsheet = SpreadsheetApp.create(`temp_google_sheets_${Date.now()}_${this.monthInfo.name}_${this.monthInfo.year}_—Ä–µ–∑—É–ª—å—Ç–∞—Ç`);
    const reportSheetName = `${this.monthInfo.name}_${this.monthInfo.year}`;
    const sheet = tempSpreadsheet.getActiveSheet();
    sheet.setName(reportSheetName);
    
    // –®–∞–ø–∫–∞
    sheet.getRange('A1').setValue('–ü—Ä–æ–¥—É–∫—Ç');
    sheet.getRange('B1').setValue('–ê–∫—Ä–∏—Ö–∏–Ω - –§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º');
    sheet.getRange('A2').setValue('–ü–µ—Ä–∏–æ–¥');
    sheet.getRange('B2').setValue(`${this.monthInfo.name}-25`);
    sheet.getRange('A3').setValue('–ü–ª–∞–Ω');
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    const tableHeaders = ['–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–î–∞—Ç–∞', '–ù–∏–∫', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø –ø–æ—Å—Ç–∞'];
    let row = 5;
    sheet.getRange(row, 1, 1, tableHeaders.length).setValues([tableHeaders]);
    sheet.getRange(row, 1, 1, tableHeaders.length).setFontWeight('bold').setBackground('#3f2355').setFontColor('white');
    row++;
    
    // –†–∞–∑–¥–µ–ª—ã –∏ –¥–∞–Ω–Ω—ã–µ
    const writeSection = (sectionName, dataArr) => {
      sheet.getRange(row, 1).setValue(sectionName);
      sheet.getRange(row, 1, 1, tableHeaders.length).setBackground('#b7a6c9').setFontWeight('bold');
      row++;
      if (dataArr.length) {
        const safeData = dataArr.map(r => {
          const arr = [r.platform, r.theme, r.text, r.date, r.author, r.views, r.engagement, r.type];
          while (arr.length < tableHeaders.length) arr.push('');
          return arr.slice(0, tableHeaders.length);
        });
        sheet.getRange(row, 1, safeData.length, tableHeaders.length).setValues(safeData);
        row += safeData.length;
      }
      console.log(`üìÇ –†–∞–∑–¥–µ–ª "${sectionName}": ${dataArr.length} —Å—Ç—Ä–æ–∫`);
    };
    
    writeSection('–û—Ç–∑—ã–≤—ã', processedData.reviews);
    writeSection('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20 –≤—ã–¥–∞—á–∏', processedData.commentsTop20);
    writeSection('–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)', processedData.activeDiscussions);
    
    // –ë–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    row += 2;
    sheet.getRange(row, 1).setValue('–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤');
    sheet.getRange(row, 2).setValue(this.stats.totalViews || 0);
    row++;
    sheet.getRange(row, 1).setValue('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç–∑—ã–≤—ã)');
    sheet.getRange(row, 2).setValue(processedData.reviews.length);
    row++;
    sheet.getRange(row, 1).setValue('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (—Ñ–æ—Ä—É–º—ã, —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç–∞—Ç—å—è–º)');
    sheet.getRange(row, 2).setValue(processedData.activeDiscussions.length);
    row++;
    sheet.getRange(row, 1).setValue('–î–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º –≤ –¥–∏–∞–ª–æ–≥');
    const engagementValue = this.stats.engagementShare || 0;
    sheet.getRange(row, 2).setValue(engagementValue > 0 ? engagementValue + '%' : '0%');
    sheet.getRange(row - 3, 1, 4, 2).setFontWeight('bold');
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    sheet.autoResizeColumns(1, tableHeaders.length);
    
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${reportSheetName}`);
    return tempSpreadsheet.getUrl();
  }

  // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  extractMonthFromText(text) {
    const lowerText = text.toLowerCase();
    
    const months = [
      { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤', number: 1 },
      { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤', number: 2 },
      { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä', number: 3 },
      { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä', number: 4 },
      { name: '–ú–∞–π', short: '–ú–∞–π', number: 5 },
      { name: '–ò—é–Ω—å', short: '–ò—é–Ω', number: 6 },
      { name: '–ò—é–ª—å', short: '–ò—é–ª', number: 7 },
      { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥', number: 8 },
      { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω', number: 9 },
      { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç', number: 10 },
      { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è', number: 11 },
      { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫', number: 12 }
    ];
    
    for (const month of months) {
      if (lowerText.includes(month.name.toLowerCase()) || 
          lowerText.includes(month.short.toLowerCase())) {
        return {
          name: month.name,
          short: month.short,
          number: month.number,
          year: 2025
        };
      }
    }
    
    return null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –º–µ—Å—è—Ü–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
   */
  getMonthName(index) {
    const names = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                   '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
    return names[index];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–º–µ–Ω–∏ –º–µ—Å—è—Ü–∞
   */
  getMonthShort(index) {
    const shorts = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                    '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫'];
    return shorts[index];
  }

  /**
   * –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫
   */
  getColumnMapping() {
    return {
      platform: 1,
      theme: 3,
      text: 4,
      date: 6,
      author: 7,
      views: 11,
      engagement: 12,
      postType: 13,
      link: 2
    };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  extractStatisticsFromSourceData(data) {
    const stats = {
      totalViews: 0,
      totalCards: 0,
      totalDiscussions: 0,
      engagementShare: 0
    };
    
    // –ò—â–µ–º –±–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
    for (let i = data.length - 1; i >= Math.max(0, data.length - 20); i--) {
      const row = data[i];
      if (!row || row.length === 0) continue;
      
      const firstCell = String(row[0] || '').toLowerCase().trim();
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—â–∏–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
      if (firstCell.includes('—Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤')) {
        for (let j = 1; j < row.length; j++) {
          if (row[j]) {
            const value = parseFloat(String(row[j]).replace(/[^\d]/g, ''));
            if (!isNaN(value) && value > 0) {
              stats.totalViews = value;
              console.log(`üìä –ù–∞–π–¥–µ–Ω—ã –æ–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${value}`);
              break;
            }
          }
        }
      }
      
      // –ò—â–µ–º –¥–æ–ª—é –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
      if (firstCell.includes('–¥–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º')) {
        for (let j = 1; j < row.length; j++) {
          if (row[j]) {
            let value = String(row[j]).trim();
            if (value.includes('%')) {
              value = value.replace('%', '');
            }
            const floatValue = parseFloat(value);
            if (!isNaN(floatValue)) {
              stats.engagementShare = floatValue > 1 ? floatValue : floatValue * 100;
              break;
            }
          }
        }
      }
    }
    
    return stats;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ —Å—Ç—Ä–æ–∫
   */
  isEmptyRow(row) {
    return !row || row.every(cell => !cell || String(cell).trim() === '');
  }

  isSectionHeader(row) {
    if (!row || row.length === 0) return false;
    const firstCell = String(row[0] || '').toLowerCase().trim();
    return firstCell.includes('–æ—Ç–∑—ã–≤—ã') || 
           firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') || 
           firstCell.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è') ||
           firstCell.includes('—Ç–æ–ø-20') ||
           firstCell.includes('–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
  }

  isStatisticsRow(row) {
    if (!row || row.length === 0) return false;
    const firstCell = String(row[0] || '').toLowerCase().trim();
    return firstCell.includes('—Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤') || 
           firstCell.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞') ||
           firstCell.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π') ||
           firstCell.includes('–¥–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π');
  }

  /**
   * –ú–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  extractPlatform(row, columnMapping) {
    const index = columnMapping.platform;
    return index !== undefined && row[index] ? String(row[index]).trim() : '';
  }

  extractText(row, columnMapping) {
    const index = columnMapping.text;
    return index !== undefined && row[index] ? String(row[index]).trim() : '';
  }

  extractDate(row, columnMapping) {
    const index = columnMapping.date;
    if (index !== undefined && row[index]) {
      const dateValue = row[index];
      if (dateValue instanceof Date) {
        return Utilities.formatDate(dateValue, Session.getScriptTimeZone(), CONFIG.FORMATTING.DATE_FORMAT);
      }
      return String(dateValue);
    }
    return '';
  }

  extractAuthor(row, columnMapping) {
    const index = columnMapping.author;
    return index !== undefined && row[index] ? String(row[index]).trim() : '';
  }

  extractViews(row, columnMapping) {
    const index = columnMapping.views;
    if (index !== undefined && row[index]) {
      const viewsValue = row[index];
      
      if (typeof viewsValue === 'number' && !isNaN(viewsValue)) {
        return Math.max(0, Math.floor(viewsValue));
      }
      
      const viewsStr = String(viewsValue).trim();
      const cleanStr = viewsStr.replace(/[^\d.,]/g, '');
      const normalizedStr = cleanStr.replace(',', '.');
      const parsed = parseFloat(normalizedStr);
      
      if (!isNaN(parsed)) {
        return Math.max(0, Math.floor(parsed));
      }
    }
    return 0;
  }

  extractEngagement(row, columnMapping) {
    const index = columnMapping.engagement;
    return index !== undefined && row[index] ? String(row[index]).trim() : '';
  }

  extractTheme(row, columnMapping) {
    const index = columnMapping.theme;
    return index !== undefined && row[index] ? String(row[index]).trim() : '';
  }

  extractLink(row, columnMapping) {
    const index = columnMapping.link;
    return index !== undefined && row[index] ? String(row[index]).trim() : '';
  }
}

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø GOOGLE APPS SCRIPT ====================

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –º–µ–Ω—é
 */
function processMonthlyReport() {
  const processor = new FinalMonthlyReportProcessor();
  const spreadsheetId = SpreadsheetApp.getActiveSpreadsheet().getId();
  const sheetName = SpreadsheetApp.getActiveSheet().getName();
  
  const result = processor.processReport(spreadsheetId, sheetName);
  
  if (result.success) {
    SpreadsheetApp.getUi().alert(
      '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      `–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n–°—Å—ã–ª–∫–∞: ${result.reportUrl}\n\n` +
      `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:\n- –û—Ç–∑—ã–≤–æ–≤: ${result.statistics.reviewsCount}\n` +
      `- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ç–æ–ø-20: ${result.statistics.commentsTop20Count}\n` +
      `- –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π: ${result.statistics.activeDiscussionsCount}\n` +
      `- –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${result.statistics.totalViews}`,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  } else {
    SpreadsheetApp.getUi().alert(
      '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${result.error}`,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
 */
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤')
    .addItem('üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü', 'processMonthlyReport')
    .addToUi();
}