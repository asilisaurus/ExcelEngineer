/**
 * üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–ò–ù–ê–õ–¨–ù–´–ô –ì–ò–ë–ö–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
 * Google Apps Script –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
 * –í–µ—Ä—Å–∏—è: 3.2.0 - FIXED
 * 
 * –ê–≤—Ç–æ—Ä: AI Assistant + Background Agent
 * –î–∞—Ç–∞: 2025
 */

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê ====================

const CONFIG = {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
  STRUCTURE: {
    headerRow: 4,        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –í–°–ï–ì–î–ê –≤ —Å—Ç—Ä–æ–∫–µ 4
    dataStartRow: 5,     // –î–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Å—Ç—Ä–æ–∫–∏ 5
    infoRows: [1, 2, 3], // –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö 1-3
    maxRows: 10000
  },
  
  // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  CONTENT_TYPES: {
    REVIEWS: ['–û–°', '–û—Ç–∑—ã–≤—ã –°–∞–π—Ç–æ–≤', '–æ—Å', '–æ—Ç–∑—ã–≤—ã —Å–∞–π—Ç–æ–≤'],
    TARGETED: ['–¶–°', '–¶–µ–ª–µ–≤—ã–µ –°–∞–π—Ç—ã', '—Ü—Å', '—Ü–µ–ª–µ–≤—ã–µ —Å–∞–π—Ç—ã'],
    SOCIAL: ['–ü–°', '–ü–ª–æ—â–∞–¥–∫–∏ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ', '–ø—Å', '–ø–ª–æ—â–∞–¥–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ']
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
  COLUMNS: {
    PLATFORM: ['–ø–ª–æ—â–∞–¥–∫–∞', 'platform', 'site'],
    TEXT: ['—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '—Ç–µ–∫—Å—Ç', 'message'],
    DATE: ['–¥–∞—Ç–∞', 'date', 'created'],
    AUTHOR: ['–∞–≤—Ç–æ—Ä', '–Ω–∏–∫', 'author'],
    VIEWS: ['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã', '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ', 'views'],
    ENGAGEMENT: ['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ', 'engagement'],
    POST_TYPE: ['—Ç–∏–ø –ø–æ—Å—Ç–∞', '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', 'post_type'],
    THEME: ['—Ç–µ–º–∞', 'theme', 'subject'],
    LINK: ['—Å—Å—ã–ª–∫–∞', 'link', 'url']
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  FORMATTING: {
    DATE_FORMAT: 'dd.mm.yyyy',
    NUMBER_FORMAT: '#,##0',
    CURRENCY_FORMAT: '#,##0 ‚ÇΩ'
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  TESTING: {
    ENABLE_DEBUG: true,
    LOG_DETAILS: true,
    VALIDATE_RESULTS: true
  }
};

// ==================== –ö–õ–ê–°–° –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê ====================

class FinalMonthlyReportProcessor {
  constructor() {
    this.stats = {
      totalRows: 0,
      reviewsCount: 0,
      targetedCount: 0,
      socialCount: 0,
      totalViews: 0,
      processingTime: 0,
      errors: [],
      commentsTop20Count: 0,
      activeDiscussionsCount: 0,
      engagementShare: 0
    };
    
    this.columnMapping = {};
    this.monthInfo = null;
    this.contentSections = {
      reviews: [],
      targeted: [],
      social: []
    };
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞
   */
  processReport(spreadsheetId, sheetName = null) {
    const startTime = Date.now();
    
    try {
      console.log('üöÄ FINAL PROCESSOR - –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      
      // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const sourceData = this.getSourceData(spreadsheetId, sheetName);
      
      // 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
      this.monthInfo = this.detectMonth(sourceData, sheetName);
      console.log(`üìÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ—Å—è—Ü: ${this.monthInfo.name} ${this.monthInfo.year}`);
      
      // 3. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
      this.analyzeDataStructure(sourceData);
      
      // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      const processedData = this.processData(sourceData);
      
      // 5. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
      const reportUrl = this.createReport(processedData);
      
      // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      this.stats.processingTime = Date.now() - startTime;
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', this.stats);
      
      return {
        success: true,
        reportUrl: reportUrl,
        statistics: this.stats,
        monthInfo: this.monthInfo
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
      this.stats.errors.push(error.toString());
      
      return {
        success: false,
        error: error.toString(),
        statistics: this.stats
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  getSourceData(spreadsheetId, sheetName) {
    const spreadsheet = SpreadsheetApp.openById(spreadsheetId);
    const sheet = sheetName ? spreadsheet.getSheetByName(sheetName) : spreadsheet.getActiveSheet();
    
    if (!sheet) {
      throw new Error(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    const data = sheet.getDataRange().getValues();
    this.stats.totalRows = data.length;
    
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ ${CONFIG.STRUCTURE.headerRow}, –¥–∞–Ω–Ω—ã–µ —Å —Å—Ç—Ä–æ–∫–∏ ${CONFIG.STRUCTURE.dataStartRow}`);
    
    return data;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  detectMonth(data, sheetName = null) {
    // 1. –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—è—Ü –∏–∑ sheetName
    if (sheetName) {
      const monthFromSheet = this.extractMonthFromText(sheetName);
      if (monthFromSheet) {
        console.log(`üìÖ –ú–µ—Å—è—Ü –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞: ${monthFromSheet.name} ${monthFromSheet.year}`);
        return { ...monthFromSheet, detectedFrom: 'sheet' };
      }
    }
    
    // 2. –ò—â–µ–º –≤ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å—Ç—Ä–æ–∫–∏ 1-3)
    for (let i = 0; i < Math.min(3, data.length); i++) {
      const rowText = data[i].join(' ').toLowerCase();
      const monthFromMeta = this.extractMonthFromText(rowText);
      if (monthFromMeta) {
        console.log(`üìÖ –ú–µ—Å—è—Ü –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${monthFromMeta.name} ${monthFromMeta.year}`);
        return { ...monthFromMeta, detectedFrom: 'meta' };
      }
    }
    
    // 3. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const now = new Date();
    return {
      name: this.getMonthName(now.getMonth()),
      short: this.getMonthShort(now.getMonth()),
      number: now.getMonth() + 1,
      year: now.getFullYear(),
      detectedFrom: 'default'
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
   */
  analyzeDataStructure(data) {
    this.columnMapping = this.getColumnMapping();
    console.log('üó∫Ô∏è –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫:', this.columnMapping);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ò–°–ü–†–ê–í–õ–ï–ù–û - –≤–µ—Ä—Å–∏—è 3 —Å —Ç–∏–ø–∞–º–∏ –ø–æ—Å—Ç–æ–≤)
   */
  processData(data) {
    // –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const sourceStats = this.extractStatisticsFromSourceData(data);
    
    const processedData = {
      reviews: [],
      commentsTop20: [],
      activeDiscussions: [],
      statistics: {
        totalReviews: 0,
        totalCommentsTop20: 0,
        totalActiveDiscussions: 0,
        totalViews: sourceStats.totalViews || 0,
        engagementShare: sourceStats.engagementShare || 0,
        platforms: new Set()
      }
    };
    
    let processedRows = 0;
    let skippedRows = 0;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
    const columnMapping = this.getColumnMapping();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ä–∞–∑–¥–µ–ª–æ–≤
    const sections = this.findSectionBoundaries(data);
    
    if (sections.length === 0) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö');
      return processedData;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    for (let i = CONFIG.STRUCTURE.dataStartRow - 1; i < data.length; i++) {
      const row = data[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (this.isEmptyRow(row)) {
        continue;
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
      if (this.isStatisticsRow(row)) {
        break;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
      let currentSection = null;
      for (const section of sections) {
        if (i >= section.startRow && i <= section.endRow) {
          currentSection = section.type;
          break;
        }
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
      const processedRow = this.processRow(row, currentSection, columnMapping);
      
      if (processedRow) {
        processedRows++;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (processedRow.platform) {
          processedData.statistics.platforms.add(processedRow.platform);
        }
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏
        const recordType = processedRow.recordType || currentSection;
        
        if (recordType === 'reviews') {
          processedData.reviews.push(processedRow);
          processedData.statistics.totalReviews++;
        } else if (recordType === 'commentsTop20') {
          processedData.commentsTop20.push(processedRow);
          processedData.statistics.totalCommentsTop20++;
        } else if (recordType === 'activeDiscussions') {
          processedData.activeDiscussions.push(processedRow);
          processedData.statistics.totalActiveDiscussions++;
        } else {
          // –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
          if (currentSection === 'reviews') {
            processedData.reviews.push(processedRow);
            processedData.statistics.totalReviews++;
          } else if (currentSection === 'commentsTop20') {
            processedData.commentsTop20.push(processedRow);
            processedData.statistics.totalCommentsTop20++;
          } else if (currentSection === 'activeDiscussions') {
            processedData.activeDiscussions.push(processedRow);
            processedData.statistics.totalActiveDiscussions++;
          }
        }
      } else {
        skippedRows++;
      }
    }
    
    // –ï—Å–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–µ –±—ã–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —Å—á–∏—Ç–∞–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    if (processedData.statistics.totalViews === 0) {
      let totalViews = 0;
      
      // –°—É–º–º–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏–∑ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
      [...processedData.reviews, ...processedData.commentsTop20, ...processedData.activeDiscussions]
        .forEach(item => {
          if (item.views && item.views > 0) {
            totalViews += item.views;
          }
        });
      
      if (totalViews > 0) {
        processedData.statistics.totalViews = totalViews;
        console.log(`üìä –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ–¥—Å—á–∏—Ç–∞–Ω—ã –∏–∑ –∑–∞–ø–∏—Å–µ–π: ${totalViews}`);
      }
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª—é –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –±—ã–ª–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∞
    if (processedData.statistics.engagementShare === 0 && processedData.statistics.totalActiveDiscussions > 0) {
      // –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º (–≥–¥–µ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ engagement)
      let engagedCount = 0;
      processedData.activeDiscussions.forEach(item => {
        if (item.engagement && item.engagement.trim() !== '' && item.engagement !== '0') {
          engagedCount++;
        }
      });
      
      if (engagedCount > 0) {
        processedData.statistics.engagementShare = engagedCount / processedData.statistics.totalActiveDiscussions;
        console.log(`üìä –î–æ–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: ${(processedData.statistics.engagementShare * 100).toFixed(0)}%`);
      }
    }
    
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedRows} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedRows} —Å—Ç—Ä–æ–∫`);
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${processedData.statistics.totalReviews} –æ—Ç–∑—ã–≤–æ–≤, ${processedData.statistics.totalCommentsTop20} —Ç–æ–ø-20, ${processedData.statistics.totalActiveDiscussions} –æ–±—Å—É–∂–¥–µ–Ω–∏–π`);
    
    return processedData;
  }

  /**
   * –ü–æ–∏—Å–∫ –≥—Ä–∞–Ω–∏—Ü —Ä–∞–∑–¥–µ–ª–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É –ø–æ—Å—Ç–∞)
   */
  findSectionBoundaries(data) {
    const sections = [];
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    let currentRow = CONFIG.STRUCTURE.dataStartRow - 1;
    let inDataSection = false;
    let currentSection = null;
    let sectionStart = -1;
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –ø–æ —Ç–∏–ø–∞–º
    const reviewsRows = [];
    const commentsRows = [];
    const discussionsRows = [];
    
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤...');
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –¥–∞–Ω–Ω—ã—Ö
    for (let i = CONFIG.STRUCTURE.dataStartRow - 1; i < data.length; i++) {
      const row = data[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (this.isEmptyRow(row)) continue;
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
      if (this.isStatisticsRow(row)) break;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
      const firstCell = String(row[0] || '').toLowerCase().trim();
      
      // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–û—Ç–∑—ã–≤—ã" –≤ –Ω–∞—á–∞–ª–µ –¥–∞–Ω–Ω—ã—Ö
      if (i < 10 && (firstCell === '–æ—Ç–∑—ã–≤—ã' || firstCell.includes('–æ—Ç–∑—ã–≤—ã'))) {
        console.log(`üìÇ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–û—Ç–∑—ã–≤—ã" –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
        continue;
      }
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 600)
      if (i > 600 && (firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') || firstCell.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è'))) {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞: "${firstCell}" –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
        continue;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–µ "–¢–∏–ø –ø–æ—Å—Ç–∞" (–∏–Ω–¥–µ–∫—Å 13)
      const postTypeIndex = 13;
      let postType = '';
      
      if (row.length > postTypeIndex && row[postTypeIndex]) {
        postType = String(row[postTypeIndex]).trim().toUpperCase();
      }
      
      // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Ç–∏–ø—É
      if (postType === '–û–°' || postType === '–û.–°.') {
        reviewsRows.push(i);
      } else if (postType === '–¶–°' || postType === '–¶.–°.') {
        commentsRows.push(i);
      } else if (postType === '–ü–°' || postType === '–ü.–°.') {
        discussionsRows.push(i);
      } else {
        // –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ç–µ–∫—Å—Ç—É
        const textIndex = 4; // –∫–æ–ª–æ–Ω–∫–∞ "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
        const platformIndex = 1; // –∫–æ–ª–æ–Ω–∫–∞ "–ü–ª–æ—â–∞–¥–∫–∞"
        
        if ((row[textIndex] && String(row[textIndex]).trim().length > 10) ||
            (row[platformIndex] && String(row[platformIndex]).trim().length > 0)) {
          // –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏, –Ω–æ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–∫–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª —Å–µ–π—á–∞—Å)
          if (reviewsRows.length > 0 && commentsRows.length === 0) {
            reviewsRows.push(i);
          } else if (commentsRows.length > 0 && discussionsRows.length === 0) {
            commentsRows.push(i);
          } else {
            discussionsRows.push(i);
          }
        }
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    if (reviewsRows.length > 0) {
      sections.push({
        type: 'reviews',
        name: '–û—Ç–∑—ã–≤—ã',
        startRow: Math.min(...reviewsRows),
        endRow: Math.max(...reviewsRows)
      });
    }
    
    if (commentsRows.length > 0) {
      sections.push({
        type: 'commentsTop20',
        name: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20',
        startRow: Math.min(...commentsRows),
        endRow: Math.max(...commentsRows)
      });
    }
    
    if (discussionsRows.length > 0) {
      sections.push({
        type: 'activeDiscussions',
        name: '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è',
        startRow: Math.min(...discussionsRows),
        endRow: Math.max(...discussionsRows)
      });
    }
    
    // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —Ç–∏–ø—É –ø–æ—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É
    if (sections.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª—ã –ø–æ —Ç–∏–ø—É –ø–æ—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É...');
      
      // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–û—Ç–∑—ã–≤—ã"
      let reviewsStart = -1;
      for (let i = CONFIG.STRUCTURE.dataStartRow - 1; i < Math.min(20, data.length); i++) {
        const firstCell = String(data[i][0] || '').toLowerCase().trim();
        if (firstCell === '–æ—Ç–∑—ã–≤—ã' || firstCell.includes('–æ—Ç–∑—ã–≤—ã')) {
          reviewsStart = i + 1;
          break;
        }
      }
      
      if (reviewsStart > 0) {
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:
        // ~22 –æ—Ç–∑—ã–≤–∞, ~20 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        const totalDataRows = data.length - reviewsStart - 10; // –º–∏–Ω—É—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        
        sections.push({
          type: 'reviews',
          name: '–û—Ç–∑—ã–≤—ã', 
          startRow: reviewsStart,
          endRow: reviewsStart + 21 // ~22 —Å—Ç—Ä–æ–∫–∏
        });
        
        sections.push({
          type: 'commentsTop20',
          name: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20',
          startRow: reviewsStart + 22,
          endRow: reviewsStart + 41 // ~20 —Å—Ç—Ä–æ–∫
        });
        
        sections.push({
          type: 'activeDiscussions',
          name: '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è',
          startRow: reviewsStart + 42,
          endRow: data.length - 11 // –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        });
      }
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('ÔøΩ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:');
    sections.forEach(section => {
      const count = section.endRow - section.startRow + 1;
      console.log(`   - ${section.name}: —Å—Ç—Ä–æ–∫–∏ ${section.startRow + 1}-${section.endRow + 1} (${count} –∑–∞–ø–∏—Å–µ–π)`);
    });
    
    return sections;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ò–°–ü–†–ê–í–õ–ï–ù–û - –≤–µ—Ä—Å–∏—è 2)
   */
  processRow(row, currentSection, columnMapping) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
      if (!row || row.length === 0) {
        return null;
      }

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (this.isEmptyRow(row)) {
        return null;
      }
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
      const firstCell = String(row[0] || '').toLowerCase().trim();
      if (firstCell.includes('–æ—Ç–∑—ã–≤—ã') || 
          firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') || 
          firstCell.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è') ||
          firstCell.includes('—Ç–æ–ø-20')) {
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const textIndex = columnMapping.text || 4;
      const platformIndex = columnMapping.platform || 1;
      const linkIndex = columnMapping.link || 2;
      
      const text = row[textIndex] ? String(row[textIndex]).trim() : '';
      const platform = row[platformIndex] ? String(row[platformIndex]).trim() : '';
      const link = row[linkIndex] ? String(row[linkIndex]).trim() : '';
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      if (!text && !platform && !link) {
        return null;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏
      let recordType = currentSection;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É "–¢–∏–ø –ø–æ—Å—Ç–∞"
      const postTypeIndex = columnMapping.postType || 13;
      if (row[postTypeIndex]) {
        const postType = String(row[postTypeIndex]).trim().toUpperCase();
        
        if (postType === '–û–°' || postType === '–û.–°.') {
          recordType = 'reviews';
        } else if (postType === '–¶–°' || postType === '–¶.–°.') {
          recordType = 'commentsTop20';
        } else if (postType === '–ü–°' || postType === '–ü.–°.') {
          recordType = 'activeDiscussions';
        }
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
      const processedRow = {
        platform: platform,
        theme: row[columnMapping.theme || 3] ? String(row[columnMapping.theme || 3]).trim() : '',
        link: link,
        text: text,
        date: this.extractDate(row, columnMapping),
        author: row[columnMapping.author || 7] ? String(row[columnMapping.author || 7]).trim() : '',
        views: this.extractViews(row, columnMapping),
        engagement: row[columnMapping.engagement || 12] ? String(row[columnMapping.engagement || 12]).trim() : '',
        postType: row[postTypeIndex] ? String(row[postTypeIndex]).trim() : '',
        recordType: recordType
      };

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
      if (!processedRow.text && !processedRow.platform) {
        return null;
      }

      return processedRow;

    } catch (e) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: ${e.message}`);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
   */
  createReport(processedData) {
    const tempSpreadsheet = SpreadsheetApp.create(`temp_google_sheets_${Date.now()}_${this.monthInfo.name}_${this.monthInfo.year}_—Ä–µ–∑—É–ª—å—Ç–∞—Ç`);
    const reportSheetName = `${this.monthInfo.name}_${this.monthInfo.year}`;
    const sheet = tempSpreadsheet.getActiveSheet();
    sheet.setName(reportSheetName);
    
    // –®–∞–ø–∫–∞
    sheet.getRange('A1').setValue('–ü—Ä–æ–¥—É–∫—Ç');
    sheet.getRange('B1').setValue('–ê–∫—Ä–∏—Ö–∏–Ω - –§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º');
    sheet.getRange('A2').setValue('–ü–µ—Ä–∏–æ–¥');
    sheet.getRange('B2').setValue(`${this.monthInfo.name}-25`);
    sheet.getRange('A3').setValue('–ü–ª–∞–Ω');
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    const tableHeaders = ['–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–î–∞—Ç–∞', '–ù–∏–∫', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø –ø–æ—Å—Ç–∞'];
    let row = 5;
    sheet.getRange(row, 1, 1, tableHeaders.length).setValues([tableHeaders]);
    sheet.getRange(row, 1, 1, tableHeaders.length).setFontWeight('bold').setBackground('#3f2355').setFontColor('white');
    row++;
    
    // –†–∞–∑–¥–µ–ª—ã –∏ –¥–∞–Ω–Ω—ã–µ
    const writeSection = (sectionName, dataArr) => {
      sheet.getRange(row, 1).setValue(sectionName);
      sheet.getRange(row, 1, 1, tableHeaders.length).setBackground('#b7a6c9').setFontWeight('bold');
      row++;
      if (dataArr.length) {
        const safeData = dataArr.map(r => {
          const arr = [r.platform, r.theme, r.text, r.date, r.author, r.views, r.engagement, r.type];
          while (arr.length < tableHeaders.length) arr.push('');
          return arr.slice(0, tableHeaders.length);
        });
        sheet.getRange(row, 1, safeData.length, tableHeaders.length).setValues(safeData);
        row += safeData.length;
      }
      console.log(`üìÇ –†–∞–∑–¥–µ–ª "${sectionName}": ${dataArr.length} —Å—Ç—Ä–æ–∫`);
    };
    
    writeSection('–û—Ç–∑—ã–≤—ã', processedData.reviews);
    writeSection('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20 –≤—ã–¥–∞—á–∏', processedData.commentsTop20);
    writeSection('–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)', processedData.activeDiscussions);
    
    // 4. –ë–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–Ω–∏–∑—É (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    row += 2;
    sheet.getRange(row, 1).setValue('–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤');
    sheet.getRange(row, 2).setValue(processedData.statistics.totalViews || 0);
    row++;
    sheet.getRange(row, 1).setValue('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç–∑—ã–≤—ã)');
    sheet.getRange(row, 2).setValue(processedData.statistics.totalReviews || 0);
    row++;
    sheet.getRange(row, 1).setValue('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (—Ñ–æ—Ä—É–º—ã, —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç–∞—Ç—å—è–º)');
    const totalDiscussions = (processedData.statistics.totalActiveDiscussions || 0) + 
                           (processedData.statistics.totalCommentsTop20 || 0);
    sheet.getRange(row, 2).setValue(totalDiscussions);
    row++;
    sheet.getRange(row, 1).setValue('–î–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º –≤ –¥–∏–∞–ª–æ–≥');
    const engagementValue = processedData.statistics.engagementShare || 0;
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    if (engagementValue > 0) {
      sheet.getRange(row, 2).setValue(engagementValue);
      sheet.getRange(row, 2).setNumberFormat("0%");
    } else {
      sheet.getRange(row, 2).setValue(0);
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    sheet.autoResizeColumns(1, tableHeaders.length);
    
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${reportSheetName}`);
    return tempSpreadsheet.getUrl();
  }

  // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  extractMonthFromText(text) {
    const lowerText = text.toLowerCase();
    
    const months = [
      { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤', number: 1 },
      { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤', number: 2 },
      { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä', number: 3 },
      { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä', number: 4 },
      { name: '–ú–∞–π', short: '–ú–∞–π', number: 5 },
      { name: '–ò—é–Ω—å', short: '–ò—é–Ω', number: 6 },
      { name: '–ò—é–ª—å', short: '–ò—é–ª', number: 7 },
      { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥', number: 8 },
      { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω', number: 9 },
      { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç', number: 10 },
      { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è', number: 11 },
      { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫', number: 12 }
    ];
    
    for (const month of months) {
      if (lowerText.includes(month.name.toLowerCase()) || 
          lowerText.includes(month.short.toLowerCase())) {
        return {
          name: month.name,
          short: month.short,
          number: month.number,
          year: 2025
        };
      }
    }
    
    return null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –º–µ—Å—è—Ü–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
   */
  getMonthName(index) {
    const names = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                   '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
    return names[index];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–º–µ–Ω–∏ –º–µ—Å—è—Ü–∞
   */
  getMonthShort(index) {
    const shorts = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                    '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫'];
    return shorts[index];
  }

  /**
   * –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫
   */
  getColumnMapping() {
    return {
      platform: 1,
      theme: 3,
      text: 4,
      date: 6,
      author: 7,
      views: 11,
      engagement: 12,
      postType: 13,
      link: 2
    };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–£–õ–£–ß–®–ï–ù–û)
   */
  extractStatisticsFromSourceData(data) {
    const stats = {
      totalViews: 0,
      totalCards: 0,
      totalDiscussions: 0,
      engagementShare: 0
    };
    
    console.log('üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ò—â–µ–º –±–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Å—Ç—Ä–æ–∫–∞—Ö —Ñ–∞–π–ª–∞
    const startSearch = Math.max(0, data.length - 20);
    
    for (let i = startSearch; i < data.length; i++) {
      const row = data[i];
      if (!row || row.length === 0) continue;
      
      const firstCell = String(row[0] || '').toLowerCase().trim();
      const secondCell = row[1] ? String(row[1]).trim() : '';
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—â–∏–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
      if (firstCell.includes('—Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤')) {
        // –ò—â–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ
        for (let j = 1; j < row.length; j++) {
          if (row[j]) {
            const value = parseFloat(String(row[j]).replace(/[^\d]/g, ''));
            if (!isNaN(value) && value > 0) {
              stats.totalViews = Math.floor(value);
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${stats.totalViews}`);
              break;
            }
          }
        }
      }
      
      // –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞
      if (firstCell.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞')) {
        for (let j = 1; j < row.length; j++) {
          if (row[j]) {
            const value = parseFloat(String(row[j]).replace(/[^\d]/g, ''));
            if (!isNaN(value) && value >= 0) {
              stats.totalCards = Math.floor(value);
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞: ${stats.totalCards}`);
              break;
            }
          }
        }
      }
      
      // –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
      if (firstCell.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π')) {
        for (let j = 1; j < row.length; j++) {
          if (row[j]) {
            const value = parseFloat(String(row[j]).replace(/[^\d]/g, ''));
            if (!isNaN(value) && value >= 0) {
              stats.totalDiscussions = Math.floor(value);
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: ${stats.totalDiscussions}`);
              break;
            }
          }
        }
      }
      
      // –ò—â–µ–º –¥–æ–ª—é –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
      if (firstCell.includes('–¥–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º')) {
        for (let j = 1; j < row.length; j++) {
          if (row[j]) {
            const cellValue = String(row[j]).trim();
            let value = 0;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            if (cellValue.includes('%')) {
              // –§–æ—Ä–º–∞—Ç —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º: "20%"
              value = parseFloat(cellValue.replace('%', '')) / 100;
            } else if (cellValue.includes('.')) {
              // –î–µ—Å—è—Ç–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: "0.20"
              value = parseFloat(cellValue);
            } else {
              // –¶–µ–ª–æ–µ —á–∏—Å–ª–æ: "20" (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã)
              const num = parseFloat(cellValue);
              if (!isNaN(num)) {
                value = num > 1 ? num / 100 : num;
              }
            }
            
            if (!isNaN(value) && value >= 0) {
              stats.engagementShare = value;
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–æ–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è: ${(value * 100).toFixed(0)}%`);
              break;
            }
          }
        }
      }
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    if (stats.totalViews === 0) {
      // –°—É–º–º–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
      let sumViews = 0;
      const viewsIndex = 11; // –∫–æ–ª–æ–Ω–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
      
      for (let i = CONFIG.STRUCTURE.dataStartRow - 1; i < Math.min(data.length - 10, 650); i++) {
        const row = data[i];
        if (row && row[viewsIndex]) {
          const views = this.extractViews(row, this.getColumnMapping());
          if (views > 0) {
            sumViews += views;
          }
        }
      }
      
      if (sumViews > 0) {
        stats.totalViews = sumViews;
        console.log(`üìä –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ–¥—Å—á–∏—Ç–∞–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö: ${sumViews}`);
      }
    }
    
    return stats;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ —Å—Ç—Ä–æ–∫
   */
  isEmptyRow(row) {
    return !row || row.every(cell => !cell || String(cell).trim() === '');
  }

  isSectionHeader(row) {
    if (!row || row.length === 0) return false;
    const firstCell = String(row[0] || '').toLowerCase().trim();
    return firstCell.includes('–æ—Ç–∑—ã–≤—ã') || 
           firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') || 
           firstCell.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è') ||
           firstCell.includes('—Ç–æ–ø-20') ||
           firstCell.includes('–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
  }

  isStatisticsRow(row) {
    if (!row || row.length === 0) return false;
    const firstCell = String(row[0] || '').toLowerCase().trim();
    return firstCell.includes('—Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤') || 
           firstCell.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞') ||
           firstCell.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π') ||
           firstCell.includes('–¥–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π');
  }

  /**
   * –ú–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  extractPlatform(row, columnMapping) {
    const index = columnMapping.platform;
    return index !== undefined && row[index] ? String(row[index]).trim() : '';
  }

  extractText(row, columnMapping) {
    const index = columnMapping.text;
    return index !== undefined && row[index] ? String(row[index]).trim() : '';
  }

  extractDate(row, columnMapping) {
    const index = columnMapping.date;
    if (index !== undefined && row[index]) {
      const dateValue = row[index];
      if (dateValue instanceof Date) {
        return Utilities.formatDate(dateValue, Session.getScriptTimeZone(), CONFIG.FORMATTING.DATE_FORMAT);
      }
      return String(dateValue);
    }
    return '';
  }

  extractAuthor(row, columnMapping) {
    const index = columnMapping.author;
    return index !== undefined && row[index] ? String(row[index]).trim() : '';
  }

  extractViews(row, columnMapping) {
    const index = columnMapping.views;
    if (index !== undefined && row[index]) {
      const viewsValue = row[index];
      
      if (typeof viewsValue === 'number' && !isNaN(viewsValue)) {
        return Math.max(0, Math.floor(viewsValue));
      }
      
      const viewsStr = String(viewsValue).trim();
      const cleanStr = viewsStr.replace(/[^\d.,]/g, '');
      const normalizedStr = cleanStr.replace(',', '.');
      const parsed = parseFloat(normalizedStr);
      
      if (!isNaN(parsed)) {
        return Math.max(0, Math.floor(parsed));
      }
    }
    return 0;
  }

  extractEngagement(row, columnMapping) {
    const index = columnMapping.engagement;
    return index !== undefined && row[index] ? String(row[index]).trim() : '';
  }

  extractTheme(row, columnMapping) {
    const index = columnMapping.theme;
    return index !== undefined && row[index] ? String(row[index]).trim() : '';
  }

  extractLink(row, columnMapping) {
    const index = columnMapping.link;
    return index !== undefined && row[index] ? String(row[index]).trim() : '';
  }
}

// ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø GOOGLE APPS SCRIPT ====================

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –º–µ–Ω—é
 */
function processMonthlyReport() {
  const processor = new FinalMonthlyReportProcessor();
  const spreadsheetId = SpreadsheetApp.getActiveSpreadsheet().getId();
  const sheetName = SpreadsheetApp.getActiveSheet().getName();
  
  const result = processor.processReport(spreadsheetId, sheetName);
  
  if (result.success) {
    SpreadsheetApp.getUi().alert(
      '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      `–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n–°—Å—ã–ª–∫–∞: ${result.reportUrl}\n\n` +
      `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:\n- –û—Ç–∑—ã–≤–æ–≤: ${result.statistics.reviewsCount}\n` +
      `- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ç–æ–ø-20: ${result.statistics.commentsTop20Count}\n` +
      `- –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π: ${result.statistics.activeDiscussionsCount}\n` +
      `- –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${result.statistics.totalViews}`,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  } else {
    SpreadsheetApp.getUi().alert(
      '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${result.error}`,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
 */
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤')
    .addItem('üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü', 'processMonthlyReport')
    .addToUi();
}