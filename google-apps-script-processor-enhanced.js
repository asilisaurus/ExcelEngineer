/**
 * üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ô –ì–ò–ë–ö–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ï–ñ–ï–ú–ï–°–Ø–ß–ù–û–ô –†–ê–ë–û–¢–´
 * Google Apps Script –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
 * –í–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * 
 * –ê–≤—Ç–æ—Ä: AI Assistant + Background Agent
 * –í–µ—Ä—Å–∏—è: 2.0.0
 * –î–∞—Ç–∞: 2025
 */

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

const CONFIG = {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  PROCESSING: {
    MAX_ROWS: 10000,
    BATCH_SIZE: 100,
    TIMEOUT_SECONDS: 300
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ (–≥–∏–±–∫–∏–µ)
  COLUMNS: {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    PLATFORM: ['–ø–ª–æ—â–∞–¥–∫–∞', 'platform', 'site', '–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞'],
    TEXT: ['—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '—Ç–µ–∫—Å—Ç', 'message', 'content', '—Å–æ–æ–±—â–µ–Ω–∏–µ'],
    DATE: ['–¥–∞—Ç–∞', 'date', 'created', '–≤—Ä–µ–º—è'],
    AUTHOR: ['–∞–≤—Ç–æ—Ä', '–Ω–∏–∫', 'author', 'nickname', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'],
    VIEWS: ['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã', '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ', 'views', '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'],
    ENGAGEMENT: ['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ', 'engagement', '–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ'],
    POST_TYPE: ['—Ç–∏–ø –ø–æ—Å—Ç–∞', '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', 'post_type', '—Ç–∏–ø'],
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    THEME: ['—Ç–µ–º–∞', 'theme', 'subject', '–∑–∞–≥–æ–ª–æ–≤–æ–∫'],
    LINK: ['—Å—Å—ã–ª–∫–∞', 'link', 'url', '–∞–¥—Ä–µ—Å']
  },
  
  // –¢–∏–ø—ã –ø–æ—Å—Ç–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)
  POST_TYPES: {
    REVIEW: ['–æ—Å', '–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'review', '–æ—Ç–∑—ã–≤', '–æ—Å–Ω–æ–≤–Ω–æ–π'],
    COMMENT: ['—Ü—Å', '—Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'comment', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '—Ü–µ–ª–µ–≤–æ–π']
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  FORMATTING: {
    DATE_FORMAT: 'dd.mm.yyyy',
    NUMBER_FORMAT: '#,##0',
    CURRENCY_FORMAT: '#,##0 ‚ÇΩ'
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  TESTING: {
    ENABLE_DEBUG: true,
    LOG_DETAILS: true,
    VALIDATE_RESULTS: true
  }
};

// ==================== –ö–õ–ê–°–° –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê ====================

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 */
class EnhancedMonthlyReportProcessor {
  constructor() {
    this.stats = {
      totalRows: 0,
      reviewsCount: 0,
      commentsCount: 0,
      totalViews: 0,
      processingTime: 0,
      errors: []
    };
    
    this.columnMapping = {};
    this.monthInfo = null;
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞
   */
  processReport(spreadsheetId, sheetName = null) {
    const startTime = Date.now();
    
    try {
      console.log('üöÄ ENHANCED PROCESSOR - –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      
      // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const sourceData = this.getSourceData(spreadsheetId, sheetName);
      
      // 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
      this.monthInfo = this.detectMonth(sourceData);
      console.log(`üìÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ—Å—è—Ü: ${this.monthInfo.name} ${this.monthInfo.year}`);
      
      // 3. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
      this.analyzeDataStructure(sourceData);
      
      // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      const processedData = this.processData(sourceData);
      
      // 5. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
      const reportUrl = this.createReport(processedData);
      
      // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      this.stats.processingTime = Date.now() - startTime;
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', this.stats);
      
      return {
        success: true,
        reportUrl: reportUrl,
        statistics: this.stats,
        monthInfo: this.monthInfo
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
      this.stats.errors.push(error.toString());
      
      return {
        success: false,
        error: error.toString(),
        statistics: this.stats
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  getSourceData(spreadsheetId, sheetName) {
    const spreadsheet = SpreadsheetApp.openById(spreadsheetId);
    const sheet = sheetName ? spreadsheet.getSheetByName(sheetName) : spreadsheet.getActiveSheet();
    
    if (!sheet) {
      throw new Error(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    const data = sheet.getDataRange().getValues();
    this.stats.totalRows = data.length;
    
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    return data;
  }

  /**
   * –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
   */
  detectMonth(data) {
    // –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞
    const sheetName = SpreadsheetApp.getActiveSheet().getName();
    const monthFromSheet = this.extractMonthFromText(sheetName);
    if (monthFromSheet) {
      return { ...monthFromSheet, detectedFrom: 'sheet' };
    }
    
    // –ü–æ–∏—Å–∫ –≤ –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫)
    for (let i = 0; i < Math.min(20, data.length); i++) {
      const rowText = data[i].join(' ').toLowerCase();
      const monthFromData = this.extractMonthFromText(rowText);
      if (monthFromData) {
        return { ...monthFromData, detectedFrom: 'content' };
      }
    }
    
    // –ü–æ–∏—Å–∫ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    const fileName = SpreadsheetApp.getActiveSpreadsheet().getName();
    const monthFromFile = this.extractMonthFromText(fileName);
    if (monthFromFile) {
      return { ...monthFromFile, detectedFrom: 'filename' };
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const now = new Date();
    return {
      name: this.getMonthName(now.getMonth()),
      short: this.getMonthShort(now.getMonth()),
      number: now.getMonth() + 1,
      year: now.getFullYear(),
      detectedFrom: 'default'
    };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  extractMonthFromText(text) {
    const lowerText = text.toLowerCase();
    
    const months = [
      { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤', number: 1 },
      { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤', number: 2 },
      { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä', number: 3 },
      { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä', number: 4 },
      { name: '–ú–∞–π', short: '–ú–∞–π', number: 5 },
      { name: '–ò—é–Ω—å', short: '–ò—é–Ω', number: 6 },
      { name: '–ò—é–ª—å', short: '–ò—é–ª', number: 7 },
      { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥', number: 8 },
      { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω', number: 9 },
      { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç', number: 10 },
      { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è', number: 11 },
      { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫', number: 12 }
    ];
    
    for (const month of months) {
      const variants = [
        month.name.toLowerCase(),
        month.short.toLowerCase(),
        `${month.short}25`,
        `${month.name}25`,
        `${month.short}2025`,
        `${month.name}2025`
      ];
      
      if (variants.some(variant => lowerText.includes(variant))) {
        return {
          name: month.name,
          short: month.short,
          number: month.number,
          year: 2025
        };
      }
    }
    
    return null;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
   */
  analyzeDataStructure(data) {
    if (data.length === 0) {
      throw new Error('–î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã');
    }
    
    const headers = data[0];
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫
    this.columnMapping = {};
    
    for (let i = 0; i < headers.length; i++) {
      const header = String(headers[i]).toLowerCase();
      
      // –ü–ª–æ—â–∞–¥–∫–∞
      if (CONFIG.COLUMNS.PLATFORM.some(keyword => header.includes(keyword))) {
        this.columnMapping.platform = i;
      }
      
      // –¢–µ–∫—Å—Ç
      if (CONFIG.COLUMNS.TEXT.some(keyword => header.includes(keyword))) {
        this.columnMapping.text = i;
      }
      
      // –î–∞—Ç–∞
      if (CONFIG.COLUMNS.DATE.some(keyword => header.includes(keyword))) {
        this.columnMapping.date = i;
      }
      
      // –ê–≤—Ç–æ—Ä
      if (CONFIG.COLUMNS.AUTHOR.some(keyword => header.includes(keyword))) {
        this.columnMapping.author = i;
      }
      
      // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
      if (CONFIG.COLUMNS.VIEWS.some(keyword => header.includes(keyword))) {
        this.columnMapping.views = i;
      }
      
      // –¢–∏–ø –ø–æ—Å—Ç–∞
      if (CONFIG.COLUMNS.POST_TYPE.some(keyword => header.includes(keyword))) {
        this.columnMapping.postType = i;
      }
    }
    
    console.log('üó∫Ô∏è –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫:', this.columnMapping);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    const requiredColumns = ['platform', 'text', 'date'];
    const missingColumns = requiredColumns.filter(col => this.columnMapping[col] === undefined);
    
    if (missingColumns.length > 0) {
      console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: ${missingColumns.join(', ')}`);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  processData(data) {
    const processedData = {
      reviews: [],
      comments: [],
      statistics: {
        totalReviews: 0,
        totalComments: 0,
        totalViews: 0,
        platforms: new Set()
      }
    };
    
    let currentSection = null;
    
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (this.isEmptyRow(row)) continue;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏—é
      const section = this.detectSection(row);
      if (section) {
        currentSection = section;
        continue;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      if (currentSection && this.isDataRow(row)) {
        const record = this.processRow(row, currentSection);
        
        if (record) {
          if (currentSection === 'reviews') {
            processedData.reviews.push(record);
            processedData.statistics.totalReviews++;
          } else if (currentSection === 'comments') {
            processedData.comments.push(record);
            processedData.statistics.totalComments++;
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          processedData.statistics.totalViews += record.views || 0;
          if (record.platform) {
            processedData.statistics.platforms.add(record.platform);
          }
        }
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.stats.reviewsCount = processedData.statistics.totalReviews;
    this.stats.commentsCount = processedData.statistics.totalComments;
    this.stats.totalViews = processedData.statistics.totalViews;
    
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedData.statistics.totalReviews} –æ—Ç–∑—ã–≤–æ–≤, ${processedData.statistics.totalComments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
    
    return processedData;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
   */
  detectSection(row) {
    if (row.length === 0) return null;
    
    const firstCell = String(row[0]).toLowerCase();
    
    if (firstCell.includes('–æ—Ç–∑—ã–≤—ã') || firstCell.includes('reviews')) {
      return 'reviews';
    }
    
    if (firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') || firstCell.includes('comments')) {
      return 'comments';
    }
    
    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
   */
  isEmptyRow(row) {
    return !row || row.every(cell => !cell || String(cell).trim() === '');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
   */
  isDataRow(row) {
    if (row.length < 3) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    const textIndex = this.columnMapping.text || 2;
    const text = row[textIndex];
    
    return text && String(text).trim().length > 10;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  processRow(row, section) {
    try {
      const record = {
        section: section,
        platform: this.extractPlatform(row),
        text: this.extractText(row),
        date: this.extractDate(row),
        author: this.extractAuthor(row),
        views: this.extractViews(row),
        postType: this.extractPostType(row),
        theme: this.extractTheme(row),
        link: this.extractLink(row)
      };
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏
      if (!record.text || record.text.length < 10) {
        return null;
      }
      
      return record;
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${row}:`, error);
      return null;
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
   */
  extractPlatform(row) {
    const index = this.columnMapping.platform;
    if (index !== undefined && row[index]) {
      return String(row[index]).trim();
    }
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
   */
  extractText(row) {
    const index = this.columnMapping.text;
    if (index !== undefined && row[index]) {
      return String(row[index]).trim();
    }
    
    // –ü–æ–∏—Å–∫ –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
    for (let i = 0; i < row.length; i++) {
      const cell = row[i];
      if (cell && String(cell).length > 20) {
        return String(cell).trim();
      }
    }
    
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã
   */
  extractDate(row) {
    const index = this.columnMapping.date;
    if (index !== undefined && row[index]) {
      const dateValue = row[index];
      
      if (dateValue instanceof Date) {
        return Utilities.formatDate(dateValue, Session.getScriptTimeZone(), CONFIG.FORMATTING.DATE_FORMAT);
      }
      
      return String(dateValue);
    }
    
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞
   */
  extractAuthor(row) {
    const index = this.columnMapping.author;
    if (index !== undefined && row[index]) {
      return String(row[index]).trim();
    }
    return '–ê–Ω–æ–Ω–∏–º';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
   */
  extractViews(row) {
    const index = this.columnMapping.views;
    if (index !== undefined && row[index]) {
      const viewsStr = String(row[index]).replace(/[^\d]/g, '');
      const views = parseInt(viewsStr);
      return isNaN(views) ? 0 : views;
    }
    return 0;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞
   */
  extractPostType(row) {
    const index = this.columnMapping.postType;
    if (index !== undefined && row[index]) {
      const type = String(row[index]).toLowerCase();
      
      if (CONFIG.POST_TYPES.REVIEW.some(keyword => type.includes(keyword))) {
        return '–û—Ç–∑—ã–≤';
      }
      
      if (CONFIG.POST_TYPES.COMMENT.some(keyword => type.includes(keyword))) {
        return '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π';
      }
    }
    
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º—ã
   */
  extractTheme(row) {
    const index = this.columnMapping.theme;
    if (index !== undefined && row[index]) {
      return String(row[index]).trim();
    }
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
   */
  extractLink(row) {
    const index = this.columnMapping.link;
    if (index !== undefined && row[index]) {
      return String(row[index]).trim();
    }
    return '';
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
   */
  createReport(processedData) {
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const reportSheetName = `–û—Ç—á–µ—Ç_${this.monthInfo.name}_${this.monthInfo.year}`;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingSheet = spreadsheet.getSheetByName(reportSheetName);
    if (existingSheet) {
      spreadsheet.deleteSheet(existingSheet);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
    const reportSheet = spreadsheet.insertSheet(reportSheetName);
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
    reportSheet.getRange('A1').setValue(`–û–¢–ß–ï–¢ –ó–ê ${this.monthInfo.name.toUpperCase()} ${this.monthInfo.year}`);
    reportSheet.getRange('A1:H1').merge();
    reportSheet.getRange('A1').setFontWeight('bold').setFontSize(14);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    reportSheet.getRange('A3').setValue('–°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    reportSheet.getRange('A3').setFontWeight('bold');
    
    const statsData = [
      ['–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤:', this.stats.reviewsCount],
      ['–í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', this.stats.commentsCount],
      ['–û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:', this.stats.totalViews],
      ['–ü–ª–∞—Ç—Ñ–æ—Ä–º:', Array.from(processedData.statistics.platforms).length],
      ['–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', `${(this.stats.processingTime / 1000).toFixed(2)} —Å–µ–∫`]
    ];
    
    reportSheet.getRange(4, 1, statsData.length, 2).setValues(statsData);
    
    // –û—Ç–∑—ã–≤—ã
    let currentRow = statsData.length + 6;
    reportSheet.getRange(`A${currentRow}`).setValue('–û–¢–ó–´–í–´:');
    reportSheet.getRange(`A${currentRow}`).setFontWeight('bold').setFontSize(12);
    currentRow++;
    
    const reviewHeaders = ['–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞', '–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞', '–ê–≤—Ç–æ—Ä', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–¢–∏–ø', '–¢–µ–º–∞', '–°—Å—ã–ª–∫–∞'];
    reportSheet.getRange(currentRow, 1, 1, reviewHeaders.length).setValues([reviewHeaders]);
    reportSheet.getRange(currentRow, 1, 1, reviewHeaders.length).setFontWeight('bold');
    currentRow++;
    
    if (processedData.reviews.length > 0) {
      const reviewData = processedData.reviews.map(review => [
        review.platform,
        review.text,
        review.date,
        review.author,
        review.views,
        review.postType,
        review.theme,
        review.link
      ]);
      
      reportSheet.getRange(currentRow, 1, reviewData.length, reviewHeaders.length).setValues(reviewData);
      currentRow += reviewData.length;
    }
    
    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    currentRow += 2;
    reportSheet.getRange(`A${currentRow}`).setValue('–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò:');
    reportSheet.getRange(`A${currentRow}`).setFontWeight('bold').setFontSize(12);
    currentRow++;
    
    reportSheet.getRange(currentRow, 1, 1, reviewHeaders.length).setValues([reviewHeaders]);
    reportSheet.getRange(currentRow, 1, 1, reviewHeaders.length).setFontWeight('bold');
    currentRow++;
    
    if (processedData.comments.length > 0) {
      const commentData = processedData.comments.map(comment => [
        comment.platform,
        comment.text,
        comment.date,
        comment.author,
        comment.views,
        comment.postType,
        comment.theme,
        comment.link
      ]);
      
      reportSheet.getRange(currentRow, 1, commentData.length, reviewHeaders.length).setValues(commentData);
      currentRow += commentData.length;
    }
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    currentRow += 2;
    const totalRow = [
      '–ò–¢–û–ì–û:',
      '',
      '',
      '',
      this.stats.totalViews,
      '',
      '',
      ''
    ];
    reportSheet.getRange(currentRow, 1, 1, totalRow.length).setValues([totalRow]);
    reportSheet.getRange(currentRow, 1, 1, totalRow.length).setFontWeight('bold');
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    reportSheet.autoResizeColumns(1, reviewHeaders.length);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    const dataRange = reportSheet.getDataRange();
    reportSheet.getRange(1, 1, dataRange.getNumRows(), dataRange.getNumColumns()).createFilter();
    
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${reportSheetName}`);
    
    return spreadsheet.getUrl();
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  getMonthName(monthIndex) {
    const months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                   '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
    return months[monthIndex];
  }

  getMonthShort(monthIndex) {
    const months = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                   '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫'];
    return months[monthIndex];
  }
}

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
function processMonthlyReport(spreadsheetId = null, sheetName = null) {
  const processor = new EnhancedMonthlyReportProcessor();
  
  if (!spreadsheetId) {
    spreadsheetId = SpreadsheetApp.getActiveSpreadsheet().getId();
  }
  
  return processor.processReport(spreadsheetId, sheetName);
}

/**
 * –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞
 */
function quickProcess() {
  return processMonthlyReport();
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º –ª–∏—Å—Ç–∞
 */
function processWithSheetSelection() {
  const ui = SpreadsheetApp.getUi();
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheets = spreadsheet.getSheets();
  
  const sheetNames = sheets.map(sheet => sheet.getName());
  const response = ui.prompt(
    '–í—ã–±–æ—Ä –ª–∏—Å—Ç–∞',
    `–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã:\n${sheetNames.join('\n')}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:`,
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() === ui.Button.OK) {
    const selectedSheet = response.getResponseText().trim();
    return processMonthlyReport(spreadsheet.getId(), selectedSheet);
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
 */
function updateMenu() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤')
    .addItem('–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞', 'quickProcess')
    .addItem('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º –ª–∏—Å—Ç–∞', 'processWithSheetSelection')
    .addSeparator()
    .addItem('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'showSettings')
    .addToUi();
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
function showSettings() {
  const ui = SpreadsheetApp.getUi();
  ui.alert(
    '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞',
    `–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n` +
    `- –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–æ–∫: ${CONFIG.PROCESSING.MAX_ROWS}\n` +
    `- –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: ${CONFIG.PROCESSING.BATCH_SIZE}\n` +
    `- –¢–∞–π–º–∞—É—Ç: ${CONFIG.PROCESSING.TIMEOUT_SECONDS} —Å–µ–∫\n` +
    `- –û—Ç–ª–∞–¥–∫–∞: ${CONFIG.TESTING.ENABLE_DEBUG ? '–í–∫–ª—é—á–µ–Ω–∞' : '–í—ã–∫–ª—é—á–µ–Ω–∞'}`,
    ui.ButtonSet.OK
  );
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
 */
function onOpen() {
  updateMenu();
} 