import * as XLSX from 'xlsx';
import ExcelJS from 'exceljs';
import path from 'path';
import fs from 'fs';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è unified –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
interface ProcessingStats {
  totalRows: number;
  reviewsCount: number;
  commentsCount: number;
  activeDiscussionsCount: number;
  totalViews: number;
  engagementRate: number;
  platformsWithData: number;
  processingTime: number;
  qualityScore: number;
}

interface DataRow {
  –ø–ª–æ—â–∞–¥–∫–∞: string;
  —Ç–µ–º–∞: string;
  —Ç–µ–∫—Å—Ç: string;
  –¥–∞—Ç–∞: string;
  –Ω–∏–∫: string;
  –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: number | string;
  –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: string;
  —Ç–∏–ø–ü–æ—Å—Ç–∞: string;
  qualityScore: number;
  originalRow: any[];
}

interface ProcessedData {
  reviews: DataRow[];
  topComments: DataRow[];
  activeDiscussions: DataRow[];
  statistics: ProcessingStats;
  monthName: string;
  fileName: string;
}

interface ProcessingConfig {
  maxReviews: number;
  maxTopComments: number;
  minTextLength: number;
  enableQualityFiltering: boolean;
  enableSmartFiltering: boolean;
}

export class ExcelProcessorUnified {
  // –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑ smart processor
  private reviewPlatforms = [
    'otzovik', 'irecommend', 'otzyvru', 'pravogolosa', 'medum', 
    'vseotzyvy', 'otzyvy.pro', 'market.yandex', 'dialog.ru',
    'goodapteka', 'megapteka', 'uteka', 'nfapteka', 'piluli.ru',
    'eapteka.ru', 'pharmspravka.ru', 'gde.ru', 'ozon.ru'
  ];

  private commentPlatforms = [
    'dzen.ru', 'woman.ru', 'forum.baby.ru', 'vk.com', 't.me',
    'ok.ru', 'otvet.mail.ru', 'babyblog.ru', 'mom.life', 
    'youtube.com', 'pikabu.ru', 'livejournal.com', 'facebook.com'
  ];

  private defaultConfig: ProcessingConfig = {
    maxReviews: 22,
    maxTopComments: 20,
    minTextLength: 10,
    enableQualityFiltering: true,
    enableSmartFiltering: true
  };

  // –ì–∏–±–∫–∏–π –≤—Ö–æ–¥ –∫–∞–∫ –∏–∑ smart processor
  async processExcelFile(
    input: string | Buffer, 
    fileName?: string,
    config?: Partial<ProcessingConfig>
  ): Promise<{ outputPath: string; statistics: ProcessingStats }> {
    const startTime = Date.now();
    const processingConfig = { ...this.defaultConfig, ...config };
    
    try {
      console.log('üîÑ UNIFIED PROCESSOR - –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', fileName || 'unknown');
      
      let workbook: XLSX.WorkBook;
      let originalFileName: string;
      
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–∫ –∏ –±—É—Ñ–µ—Ä–∞ (–∏–∑ smart)
      if (typeof input === 'string') {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        if (!fs.existsSync(input)) {
          throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${input}`);
        }
        const buffer = fs.readFileSync(input);
        workbook = XLSX.read(buffer, { 
          type: 'buffer',
          cellDates: false,
          cellNF: false,
          cellText: false,
          raw: true
        });
        originalFileName = fileName || path.basename(input);
      } else {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –±—É—Ñ–µ—Ä
        workbook = XLSX.read(input, { 
          type: 'buffer',
          cellDates: false,
          cellNF: false,
          cellText: false,
          raw: true
        });
        originalFileName = fileName || 'unknown.xlsx';
      }
      
      console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã:', workbook.SheetNames);
      
      // –ü–æ–∏—Å–∫ –ª–∏—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –º–µ—Å—è—Ü–∞ (–∏–∑ smart)
      const months = ["–Ø–Ω–≤25", "–§–µ–≤25", "–ú–∞—Ä25", "–ú–∞—Ä—Ç25", "–ê–ø—Ä25", "–ú–∞–π25", "–ò—é–Ω25", 
                     "–ò—é–ª25", "–ê–≤–≥25", "–°–µ–Ω25", "–û–∫—Ç25", "–ù–æ—è25", "–î–µ–∫25"];
      
      const worksheet = workbook.Sheets[workbook.SheetNames.find((name: string) => 
        months.some(month => name.includes(month))
      ) || workbook.SheetNames[0]];
      
      console.log('üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç:', workbook.SheetNames[0]);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö (–∏–∑ perfect)
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { 
        header: 1, 
        defval: '',
        raw: true
      }) as any[][];
      
      console.log('üìà –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞:', jsonData.length);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ª—É—á—à–µ–π –ª–æ–≥–∏–∫–æ–π
      const processedData = this.extractDataPerfectly(jsonData, originalFileName, processingConfig);
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
      const outputPath = await this.createPerfectWorkbook(processedData, originalFileName);
      
      const processingTime = Date.now() - startTime;
      processedData.statistics.processingTime = processingTime;
      
      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞', processingTime, '–º—Å');
      
      return {
        outputPath,
        statistics: processedData.statistics
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  private extractDataPerfectly(
    jsonData: any[][],
    originalFileName: string,
    config: ProcessingConfig
  ): ProcessedData {
    console.log('üîç UNIFIED EXTRACTION - –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...');
    
    const reviews: DataRow[] = [];
    const topComments: DataRow[] = [];
    const activeDiscussions: DataRow[] = [];
    
    let totalViews = 0;
    let engagementCount = 0;
    let commentsWithViews = 0;
    let totalQualityScore = 0;
    
    for (let i = 0; i < jsonData.length; i++) {
      const row = jsonData[i];
      if (!row || !Array.isArray(row) || row.length === 0) continue;
      
      const rowType = this.analyzeRowType(row);
      
      if (rowType === 'review') {
        const reviewData = this.extractReviewData(row, i + 1);
        if (reviewData && this.passesQualityFilter(reviewData, config)) {
          reviews.push(reviewData);
          totalQualityScore += reviewData.qualityScore;
          
          if (typeof reviewData.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã === 'number') {
            totalViews += reviewData.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã;
          }
        }
      } else if (rowType === 'comment') {
        const commentData = this.extractCommentData(row, i + 1);
        if (commentData && this.passesQualityFilter(commentData, config)) {
          // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¢–æ–ø-20 –∏ –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–∏–∑ ultimate)
          if (topComments.length < config.maxTopComments) {
            topComments.push(commentData);
          } else {
            activeDiscussions.push(commentData);
          }
          
          totalQualityScore += commentData.qualityScore;
          
          // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
          if (typeof commentData.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã === 'number') {
            totalViews += commentData.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã;
            commentsWithViews++;
          }
          
          if (commentData.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ && 
              (commentData.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.toLowerCase().includes('–µ—Å—Ç—å') || 
               commentData.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.toLowerCase().includes('–¥–∞') ||
               commentData.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.toLowerCase().includes('+'))) {
            engagementCount++;
          }
        }
      }
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é (–∏–∑ smart)
    const filteredReviews = this.applySmartFiltering(reviews, config.maxReviews);
    const filteredTopComments = this.applySmartFiltering(topComments, config.maxTopComments);
    
    console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ: ${filteredReviews.length} –æ—Ç–∑—ã–≤–æ–≤, ${filteredTopComments.length} —Ç–æ–ø-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, ${activeDiscussions.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π`);
    
    const totalRows = filteredReviews.length + filteredTopComments.length + activeDiscussions.length;
    const discussionCount = filteredTopComments.length + activeDiscussions.length;
    const engagementRate = discussionCount > 0 ? Math.round((engagementCount / discussionCount) * 100) : 0;
    const platformsWithData = commentsWithViews > 0 ? Math.round((commentsWithViews / discussionCount) * 100) : 0;
    const averageQualityScore = totalRows > 0 ? Math.round(totalQualityScore / totalRows) : 0;
    
    const statistics: ProcessingStats = {
      totalRows,
      reviewsCount: filteredReviews.length,
      commentsCount: filteredTopComments.length,
      activeDiscussionsCount: activeDiscussions.length,
      totalViews,
      engagementRate,
      platformsWithData,
      processingTime: 0, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
      qualityScore: averageQualityScore
    };
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏ —Ñ–∞–π–ª–∞
    const monthName = this.extractMonthName(originalFileName);
    const fileName = this.generateFileName(originalFileName, monthName);
    
    return {
      reviews: filteredReviews,
      topComments: filteredTopComments,
      activeDiscussions,
      statistics,
      monthName,
      fileName
    };
  }

  private analyzeRowType(row: any[]): string {
    if (!row || row.length === 0) return 'empty';
    
    const colA = this.getCleanValue(row[0]).toLowerCase();
    const colB = this.getCleanValue(row[1]).toLowerCase();
    const colD = this.getCleanValue(row[3]).toLowerCase();
    const colE = this.getCleanValue(row[4]).toLowerCase();
    const colN = this.getCleanValue(row[13]).toLowerCase();
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (colA.includes('—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è') || colA.includes('–ø–ª–æ—â–∞–¥–∫–∞') || 
        colB.includes('–ø–ª–æ—â–∞–¥–∫–∞') || colE.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è') ||
        colA.includes('–ø–ª–∞–Ω') || colA.includes('–∏—Ç–æ–≥–æ')) {
      return 'header';
    }
    
    // –¢–æ—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ (–∏–∑ ultimate)
    if (colA.includes('–æ—Ç–∑—ã–≤')) {
      return 'review';
    }
    
    if (colA.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')) {
      return 'comment';
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ URL –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º (–∏–∑ smart)
    const urlText = colB + ' ' + colD;
    const isReviewPlatform = this.reviewPlatforms.some(platform => 
      urlText.toLowerCase().includes(platform)
    );
    const isCommentPlatform = this.commentPlatforms.some(platform => 
      urlText.toLowerCase().includes(platform)
    );
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ N
    const postType = colN;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ —Ç–∏–ø—É –ø–æ—Å—Ç–∞
    if ((colB || colD || colE) && (isReviewPlatform || postType === '–æ—Å')) {
      return 'review';
    }
    
    if ((colB || colD || colE) && (isCommentPlatform || postType === '—Ü—Å')) {
      return 'comment';
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–æ —Ç–∏–ø –Ω–µ—è—Å–µ–Ω
    if (colB || colD || colE) {
      return 'content';
    }
    
    return 'empty';
  }

  private extractReviewData(row: any[], rowIndex: number): DataRow | null {
    try {
      const –ø–ª–æ—â–∞–¥–∫–∞ = this.getCleanValue(row[1]);
      const —Ç–µ–º–∞ = this.extractThemeFromText(this.getCleanValue(row[4]));
      const —Ç–µ–∫—Å—Ç = this.getCleanValue(row[4]);
      const –¥–∞—Ç–∞ = this.convertExcelDateToString(row[6]);
      const –Ω–∏–∫ = this.getCleanValue(row[7]);
      const –ø—Ä–æ—Å–º–æ—Ç—Ä—ã = this.extractViewsFromRow(row, 'review');
      const qualityScore = this.calculateQualityScore(row);
      
      if (!–ø–ª–æ—â–∞–¥–∫–∞ && !—Ç–µ–∫—Å—Ç) return null;
      
      return {
        –ø–ª–æ—â–∞–¥–∫–∞,
        —Ç–µ–º–∞,
        —Ç–µ–∫—Å—Ç,
        –¥–∞—Ç–∞,
        –Ω–∏–∫,
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
        –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        —Ç–∏–ø–ü–æ—Å—Ç–∞: '–û–°',
        qualityScore,
        originalRow: row
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex}:`, error);
      return null;
    }
  }

  private extractCommentData(row: any[], rowIndex: number): DataRow | null {
    try {
      const –ø–ª–æ—â–∞–¥–∫–∞ = this.getCleanValue(row[1]);
      const —Ç–µ–º–∞ = this.extractThemeFromText(this.getCleanValue(row[4]));
      const —Ç–µ–∫—Å—Ç = this.getCleanValue(row[4]);
      const –¥–∞—Ç–∞ = this.convertExcelDateToString(row[6]);
      const –Ω–∏–∫ = this.getCleanValue(row[7]);
      const –ø—Ä–æ—Å–º–æ—Ç—Ä—ã = this.extractViewsFromRow(row, 'comment');
      const –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ = this.getCleanValue(row[12]) || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
      const qualityScore = this.calculateQualityScore(row);
      
      if (!–ø–ª–æ—â–∞–¥–∫–∞ && !—Ç–µ–∫—Å—Ç) return null;
      
      return {
        –ø–ª–æ—â–∞–¥–∫–∞,
        —Ç–µ–º–∞,
        —Ç–µ–∫—Å—Ç,
        –¥–∞—Ç–∞,
        –Ω–∏–∫,
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
        –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ,
        —Ç–∏–ø–ü–æ—Å—Ç–∞: '–¶–°',
        qualityScore,
        originalRow: row
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex}:`, error);
      return null;
    }
  }

  // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç Excel serial numbers (–∏–∑ perfect)
  private convertExcelDateToString(dateValue: any): string {
    if (!dateValue) return '';
    
    // –ï—Å–ª–∏ —ç—Ç–æ Excel serial number (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 40000)
    if (typeof dateValue === 'number' && dateValue > 40000) {
      try {
        const date = new Date((dateValue - 25569) * 86400 * 1000);
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear();
        return `${day}.${month}.${year}`;
      } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –¥–∞—Ç—ã:', dateValue, error);
        return dateValue.toString();
      }
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM/DD/YYYY
    if (typeof dateValue === 'string' && dateValue.includes('/')) {
      const parts = dateValue.split('/');
      if (parts.length === 3) {
        const day = parts[1].padStart(2, '0');
        const month = parts[0].padStart(2, '0');
        const year = parts[2];
        return `${day}.${month}.${year}`;
      }
    }
    
    return dateValue.toString();
  }

  private extractViewsFromRow(row: any[], type: 'review' | 'comment'): number | string {
    if (type === 'review') {
      // –î–ª—è –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ù–ï –≤ –∫–æ–ª–æ–Ω–∫–µ G (—Ç–∞–º –¥–∞—Ç–∞)
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–ª–æ–Ω–∫–∏
      const possibleViews = [row[10], row[11], row[12]];
      
      for (const value of possibleViews) {
        if (typeof value === 'number' && value > 0 && value < 10000000) {
          return Math.round(value);
        }
      }
    } else {
      // –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö K, L, M (10, 11, 12)
      const possibleViews = [row[10], row[11], row[12]];
      
      for (const value of possibleViews) {
        if (typeof value === 'number' && value > 0 && value < 10000000) {
          return Math.round(value);
        }
      }
    }
    
    return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–∏–∑ ultimate)
  private extractThemeFromText(text: string): string {
    if (!text) return '';
    
    const cleanText = text.replace(/–ù–∞–∑–≤–∞–Ω–∏–µ:\s*/i, '').trim();
    const firstSentence = cleanText.split('.')[0];
    
    if (firstSentence.length > 50) {
      return firstSentence.substring(0, 47) + '...';
    }
    
    return firstSentence;
  }

  // –°–∏—Å—Ç–µ–º–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ smart processor
  private calculateQualityScore(row: any[]): number {
    let score = 100;
    
    const colB = this.getCleanValue(row[1]);
    const colD = this.getCleanValue(row[3]);
    const colE = this.getCleanValue(row[4]);
    const colG = row[6];
    const colH = this.getCleanValue(row[7]);
    const colN = this.getCleanValue(row[13]);
    
    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!colE || colE.length < 20) score -= 30;
    if (!colD || !colD.includes('http')) score -= 25;
    if (!colG || typeof colG !== 'number') score -= 20;
    if (!colH || colH.length < 3) score -= 15;
    if (!colN || (colN !== '–æ—Å' && colN !== '—Ü—Å')) score -= 10;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã
    if (colE.length < 50) score -= 10;
    if (colD.includes('deleted') || colD.includes('removed')) score -= 50;
    
    return Math.max(0, score);
  }

  private passesQualityFilter(row: DataRow, config: ProcessingConfig): boolean {
    if (!config.enableQualityFiltering) return true;
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
    if (row.—Ç–µ–∫—Å—Ç.length < config.minTextLength) return false;
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞
    if (row.qualityScore < 30) return false;
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    if (row.—Ç–µ–∫—Å—Ç.includes('—É–¥–∞–ª–µ–Ω') || row.—Ç–µ–∫—Å—Ç.includes('removed')) return false;
    
    return true;
  }

  // –£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–∏–∑ smart)
  private applySmartFiltering(rows: DataRow[], maxCount: number): DataRow[] {
    if (!rows.length) return rows;
    
    console.log(`üîç –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é: ${rows.length} ‚Üí –º–∞–∫—Å. ${maxCount}`);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    const sortedRows = [...rows].sort((a, b) => b.qualityScore - a.qualityScore);
    
    // –ë–µ—Ä–µ–º –ª—É—á—à–∏–µ
    const filtered = sortedRows.slice(0, maxCount);
    
    console.log(`‚úÖ –ü–æ—Å–ª–µ —É–º–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filtered.length} –∑–∞–ø–∏—Å–µ–π`);
    
    return filtered;
  }

  private getCleanValue(value: any): string {
    if (value === null || value === undefined) return '';
    return value.toString().trim();
  }

  private extractMonthName(fileName: string): string {
    const monthsMap: { [key: string]: string } = {
      '—è–Ω–≤': '–Ø–Ω–≤–∞—Ä—å', '—Ñ–µ–≤': '–§–µ–≤—Ä–∞–ª—å', '–º–∞—Ä': '–ú–∞—Ä—Ç', '–º–∞—Ä—Ç': '–ú–∞—Ä—Ç',
      '–∞–ø—Ä': '–ê–ø—Ä–µ–ª—å', '–º–∞–π': '–ú–∞–π', '–∏—é–Ω': '–ò—é–Ω—å',
      '–∏—é–ª': '–ò—é–ª—å', '–∞–≤–≥': '–ê–≤–≥—É—Å—Ç', '—Å–µ–Ω': '–°–µ–Ω—Ç—è–±—Ä—å',
      '–æ–∫—Ç': '–û–∫—Ç—è–±—Ä—å', '–Ω–æ—è': '–ù–æ—è–±—Ä—å', '–¥–µ–∫': '–î–µ–∫–∞–±—Ä—å'
    };
    
    const lowerFileName = fileName.toLowerCase();
    for (const [key, value] of Object.entries(monthsMap)) {
      if (lowerFileName.includes(key)) {
        return value;
      }
    }
    
    return '–ú–∞—Ä—Ç';
  }

  private generateFileName(originalFileName: string, monthName: string): string {
    const baseName = originalFileName.replace(/\.[^/.]+$/, '');
    const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    return `${baseName}_${monthName}_2025_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_${timestamp}.xlsx`;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ workbook (–∏–∑ perfect)
  private async createPerfectWorkbook(data: ProcessedData, originalFileName: string): Promise<string> {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...');
    
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet(`${data.monthName} 2025`);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    worksheet.columns = [
      { width: 60 }, { width: 30 }, { width: 80 }, { width: 12 },
      { width: 20 }, { width: 12 }, { width: 15 }, { width: 10 },
      { width: 8 }, { width: 12 }, { width: 15 }, { width: 8 }
    ];

    // –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–ø–∫–∏ –æ—Ç—á–µ—Ç–∞
    this.createPerfectHeader(worksheet, data);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
    this.createPerfectTableHeaders(worksheet, data);

    let currentRow = 5;

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π
    currentRow = this.addPerfectSection(worksheet, '–û—Ç–∑—ã–≤—ã', data.reviews, currentRow);
    currentRow = this.addPerfectSection(worksheet, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20 –≤—ã–¥–∞—á–∏', data.topComments, currentRow);
    
    if (data.activeDiscussions.length > 0) {
      currentRow = this.addPerfectSection(worksheet, '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)', data.activeDiscussions, currentRow);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    this.addPerfectSummary(worksheet, data.statistics, currentRow + 2);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
    const outputPath = path.join(process.cwd(), 'uploads', data.fileName);
    await workbook.xlsx.writeFile(outputPath);

    console.log('‚úÖ –ò–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω:', outputPath);
    return outputPath;
  }

  private createPerfectHeader(worksheet: ExcelJS.Worksheet, data: ProcessedData): void {
    const headerFill = { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'FF2D1B69' } };
    const headerFont = { name: 'Arial', size: 9, bold: true, color: { argb: 'FFFFFFFF' } };
    const centerAlign = { horizontal: 'center' as const, vertical: 'middle' as const, wrapText: true };
    
    // –°—Ç—Ä–æ–∫–∞ 1: –ü—Ä–æ–¥—É–∫—Ç
    worksheet.mergeCells('A1:B1');
    worksheet.getCell('A1').value = '–ü—Ä–æ–¥—É–∫—Ç';
    worksheet.mergeCells('C1:H1');
    worksheet.getCell('C1').value = '–ê–∫—Ä–∏—Ö–∏–Ω - –§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º';
    
    // –°—Ç—Ä–æ–∫–∞ 2: –ü–µ—Ä–∏–æ–¥
    worksheet.mergeCells('A2:B2');
    worksheet.getCell('A2').value = '–ü–µ—Ä–∏–æ–¥';
    worksheet.mergeCells('C2:H2');
    worksheet.getCell('C2').value = `${data.monthName} 2025`;
    
    // –°—Ç—Ä–æ–∫–∞ 3: –ü–ª–∞–Ω
    worksheet.mergeCells('A3:B3');
    worksheet.getCell('A3').value = '–ü–ª–∞–Ω';
    worksheet.mergeCells('C3:H3');
    worksheet.getCell('C3').value = `–û—Ç–∑—ã–≤—ã - ${data.statistics.reviewsCount}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - ${data.statistics.commentsCount}`;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    worksheet.getCell('I3').value = '–û—Ç–∑—ã–≤';
    worksheet.getCell('J3').value = '–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ';
    worksheet.getCell('K3').value = '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ';
    worksheet.getCell('L3').value = '–í—Å–µ–≥–æ';

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
    for (let row = 1; row <= 3; row++) {
      for (let col = 1; col <= 12; col++) {
        const cell = worksheet.getCell(row, col);
        cell.fill = headerFill;
        cell.font = headerFont;
        cell.alignment = centerAlign;
        cell.border = {
          top: { style: 'thin' }, left: { style: 'thin' },
          bottom: { style: 'thin' }, right: { style: 'thin' }
        };
      }
    }
  }

  private createPerfectTableHeaders(worksheet: ExcelJS.Worksheet, data: ProcessedData): void {
    const headers = [
      '–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–î–∞—Ç–∞', '–ù–∏–∫', 
      '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø –ø–æ—Å—Ç–∞', 
      data.statistics.reviewsCount.toString(),
      data.statistics.commentsCount.toString(),
      '', 
      data.statistics.totalRows.toString()
    ];
    
    const headerRow = worksheet.getRow(4);
    headerRow.values = headers;
    
    const headerFill = { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'FF2D1B69' } };
    const headerFont = { name: 'Arial', size: 9, bold: true, color: { argb: 'FFFFFFFF' } };
    const centerAlign = { horizontal: 'center' as const, vertical: 'middle' as const, wrapText: true };

    headers.forEach((_, index) => {
      const cell = headerRow.getCell(index + 1);
      cell.font = headerFont;
      cell.fill = headerFill;
      cell.alignment = centerAlign;
      cell.border = {
        top: { style: 'thin' }, left: { style: 'thin' },
        bottom: { style: 'thin' }, right: { style: 'thin' }
      };
    });
  }

  private addPerfectSection(worksheet: ExcelJS.Worksheet, sectionName: string, data: DataRow[], startRow: number): number {
    let currentRow = startRow;

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
    worksheet.mergeCells(`A${currentRow}:H${currentRow}`);
    const sectionCell = worksheet.getCell(`A${currentRow}`);
    sectionCell.value = sectionName;
    sectionCell.font = { name: 'Arial', size: 9, bold: true, color: { argb: 'FF000000' } };
    sectionCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFC5D9F1' } };
    sectionCell.alignment = { horizontal: 'center', vertical: 'middle', wrapText: true };
    sectionCell.border = {
      top: { style: 'thin' }, left: { style: 'thin' },
      bottom: { style: 'thin' }, right: { style: 'thin' }
    };
    worksheet.getRow(currentRow).height = 12;
    currentRow++;

    // –î–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    data.forEach(row => {
      const dataRow = worksheet.getRow(currentRow);
      dataRow.values = [
        row.–ø–ª–æ—â–∞–¥–∫–∞, row.—Ç–µ–º–∞, row.—Ç–µ–∫—Å—Ç, row.–¥–∞—Ç–∞,
        row.–Ω–∏–∫, row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã, row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ, row.—Ç–∏–ø–ü–æ—Å—Ç–∞
      ];
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫
      dataRow.eachCell((cell: any, colNumber: number) => {
        cell.font = { name: 'Arial', size: 9 };
        cell.border = {
          top: { style: 'thin' }, left: { style: 'thin' },
          bottom: { style: 'thin' }, right: { style: 'thin' }
        };
        
        if (colNumber === 4 || colNumber === 6) {
          cell.alignment = { horizontal: 'center', vertical: 'top', wrapText: true };
        } else {
          cell.alignment = { horizontal: 'left', vertical: 'top', wrapText: true };
        }
      });
      
      dataRow.height = 12;
      currentRow++;
    });

    return currentRow;
  }

  private addPerfectSummary(worksheet: ExcelJS.Worksheet, statistics: ProcessingStats, startRow: number): void {
    const summaryData = [
      ['', '', '', '', '–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤*', statistics.totalViews],
      ['', '', '', '', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç–∑—ã–≤—ã)', statistics.reviewsCount],
      ['', '', '', '', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (—Ñ–æ—Ä—É–º—ã, —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç–∞—Ç—å—è–º)', statistics.commentsCount],
      ['', '', '', '', '–î–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º –≤ –¥–∏–∞–ª–æ–≥', `${statistics.engagementRate}%`],
      ['', '', '', '', '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π', `${statistics.qualityScore}%`],
      [],
      ['', '', '*–ë–µ–∑ —É—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–æ–∫ —Å –∑–∞–∫—Ä—ã—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ—á—Ç–µ–Ω–∏–π'],
      ['', '', '–ü–ª–æ—â–∞–¥–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', '', '', `${statistics.platformsWithData}%`],
      ['', '', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á—Ç–µ–Ω–∏–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ 30% –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤, —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.']
    ];

    summaryData.forEach((rowData, index) => {
      const row = worksheet.getRow(startRow + index);
      row.values = rowData;
      row.font = { name: 'Arial', size: 9 };
    });
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
export const unifiedProcessor = new ExcelProcessorUnified();