import * as XLSX from 'xlsx';
import ExcelJS from 'exceljs';
import path from 'path';
import fs from 'fs';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ V2
interface ProcessingStats {
  totalRows: number;
  reviewsCount: number;
  commentsCount: number;
  activeDiscussionsCount: number;
  totalViews: number;
  engagementRate: number;
  platformsWithData: number;
  processingTime: number;
  qualityScore: number;
}

interface DataRow {
  –ø–ª–æ—â–∞–¥–∫–∞: string;
  —Ç–µ–º–∞: string;
  —Ç–µ–∫—Å—Ç: string;
  –¥–∞—Ç–∞: string;
  –Ω–∏–∫: string;
  –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: number | string;
  –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: string;
  —Ç–∏–ø–ü–æ—Å—Ç–∞: string;
  section: 'reviews' | 'comments' | 'discussions';
  originalRow: any[];
}

interface ProcessedData {
  reviews: DataRow[];
  comments: DataRow[];
  discussions: DataRow[];
  monthName: string;
  totalViews: number;
  fileName: string;
}

interface MonthInfo {
  name: string;
  shortName: string;
  detectedFrom: 'filename' | 'sheet' | 'content' | 'default';
}

export class ExcelProcessorImprovedV2 {

  async processExcelFile(
    input: string | Buffer, 
    fileName?: string,
    selectedSheet?: string
  ): Promise<{ outputPath: string; statistics: ProcessingStats }> {
    const startTime = Date.now();
    
    try {
      console.log('üî• IMPROVED V2 PROCESSOR - –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', fileName || 'unknown');
      
      // 1. –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      const { workbook, originalFileName } = await this.safeReadFile(input, fileName);
      
      // 2. –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
      const monthInfo = this.detectMonthIntelligently(workbook, originalFileName);
      console.log(`üìÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ—Å—è—Ü: ${monthInfo.name} (–∏—Å—Ç–æ—á–Ω–∏–∫: ${monthInfo.detectedFrom})`);
      
      // 3. –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ª–∏—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
      const targetSheet = this.findDataSheet(workbook, monthInfo, selectedSheet);
      console.log(`üìã –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: ${targetSheet.name || 'unknown'}`);
      
      // 4. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const rawData = this.extractRawData(targetSheet);
      console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${rawData.length}`);
      
      // 5. –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
      const processedData = this.analyzeAndExtractDataCorrectlyV2(rawData, monthInfo, originalFileName);
      
      // 6. –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –ò–¢–û–ì–û —Å—Ç—Ä–æ–∫–æ–π
      const outputPath = await this.createReferenceReportV2(processedData);
      
      // 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const statistics = this.generateStatisticsV2(processedData, Date.now() - startTime);
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', outputPath);
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', statistics);
      
      return { outputPath, statistics };
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  private async safeReadFile(input: string | Buffer, fileName?: string): Promise<{
    workbook: XLSX.WorkBook;
    originalFileName: string;
  }> {
    try {
      let workbook: XLSX.WorkBook;
      let originalFileName: string;
      
      if (typeof input === 'string') {
        if (!fs.existsSync(input)) {
          throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${input}`);
        }
        
        const buffer = fs.readFileSync(input);
        workbook = XLSX.read(buffer, { 
          type: 'buffer',
          cellDates: true,
          cellNF: false,
          cellText: false,
          raw: false // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∞ –Ω–µ raw
        });
        originalFileName = fileName || path.basename(input);
        
      } else {
        if (!input || input.length === 0) {
          throw new Error('–ü—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä —Ñ–∞–π–ª–∞');
        }
        
        workbook = XLSX.read(input, { 
          type: 'buffer',
          cellDates: true,
          cellNF: false,
          cellText: false,
          raw: false // –ò–°–ü–†–ê–í–õ–ï–ù–û: —ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É [object Object]
        });
        originalFileName = fileName || 'unknown.xlsx';
      }
      
      if (!workbook.SheetNames || workbook.SheetNames.length === 0) {
        throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—Å—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏');
      }
      
      console.log(`üìã –ù–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã: ${workbook.SheetNames.join(', ')}`);
      
      return { workbook, originalFileName };
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  private detectMonthIntelligently(workbook: XLSX.WorkBook, fileName: string): MonthInfo {
    const monthsMap = {
      '—è–Ω–≤–∞—Ä—å': { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤' },
      '—è–Ω–≤': { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤' },
      '—Ñ–µ–≤—Ä–∞–ª—å': { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤' },
      '—Ñ–µ–≤': { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤' },
      '–º–∞—Ä—Ç': { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä' },
      '–º–∞—Ä': { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä' },
      '–∞–ø—Ä–µ–ª—å': { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä' },
      '–∞–ø—Ä': { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä' },
      '–º–∞–π': { name: '–ú–∞–π', short: '–ú–∞–π' },
      '–∏—é–Ω—å': { name: '–ò—é–Ω—å', short: '–ò—é–Ω' },
      '–∏—é–Ω': { name: '–ò—é–Ω—å', short: '–ò—é–Ω' },
      '–∏—é–ª—å': { name: '–ò—é–ª—å', short: '–ò—é–ª' },
      '–∏—é–ª': { name: '–ò—é–ª—å', short: '–ò—é–ª' },
      '–∞–≤–≥—É—Å—Ç': { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥' },
      '–∞–≤–≥': { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥' },
      '—Å–µ–Ω—Ç—è–±—Ä—å': { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω' },
      '—Å–µ–Ω': { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω' },
      '–æ–∫—Ç—è–±—Ä—å': { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç' },
      '–æ–∫—Ç': { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç' },
      '–Ω–æ—è–±—Ä—å': { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è' },
      '–Ω–æ—è': { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è' },
      '–¥–µ–∫–∞–±—Ä—å': { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫' },
      '–¥–µ–∫': { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫' }
    };

    for (const sheetName of workbook.SheetNames) {
      const lowerSheetName = sheetName.toLowerCase();
      for (const [key, value] of Object.entries(monthsMap)) {
        if (lowerSheetName.includes(key)) {
          return {
            name: value.name,
            shortName: value.short,
            detectedFrom: 'sheet'
          };
        }
      }
    }

    const lowerFileName = fileName.toLowerCase();
    for (const [key, value] of Object.entries(monthsMap)) {
      if (lowerFileName.includes(key)) {
        return {
          name: value.name,
          shortName: value.short,
          detectedFrom: 'filename'
        };
      }
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ò—é–Ω—å (–∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    return {
      name: '–ò—é–Ω—å',
      shortName: '–ò—é–Ω',
      detectedFrom: 'default'
    };
  }

  private findDataSheet(workbook: XLSX.WorkBook, monthInfo: MonthInfo, selectedSheet?: string): XLSX.WorkSheet {
    const sheetNames = workbook.SheetNames;
    console.log('üìã –ù–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã:', sheetNames);
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 0: –ï—Å–ª–∏ —è–≤–Ω–æ –≤—ã–±—Ä–∞–Ω –ª–∏—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (selectedSheet && sheetNames.includes(selectedSheet)) {
      console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∏—Å—Ç: ${selectedSheet}`);
      const sheet = workbook.Sheets[selectedSheet];
      (sheet as any).name = selectedSheet;
      return sheet;
    }
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –º–µ—Å—è—Ü–µ–º
    const monthPatterns = [
      monthInfo.name.toLowerCase(),
      monthInfo.shortName.toLowerCase(),
      monthInfo.name.toLowerCase() + '25',
      monthInfo.shortName.toLowerCase() + '25',
      '–∏—é–Ω—å25', // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      '–∏—é–Ω25'
    ];
    
    let bestSheet = workbook.Sheets[sheetNames[0]];
    let maxRows = 0;
    let bestSheetName = sheetNames[0];
    let monthMatch = false;

    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ª–∏—Å—Ç—ã —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –º–µ—Å—è—Ü–µ–º
    for (const sheetName of sheetNames) {
      const lowerSheetName = sheetName.toLowerCase();
      const isMonthMatch = monthPatterns.some(pattern => lowerSheetName.includes(pattern));
      
      if (isMonthMatch) {
        try {
          const sheet = workbook.Sheets[sheetName];
          const data = XLSX.utils.sheet_to_json(sheet, { header: 1 }) as any[][];
          
          if (data.length > maxRows || !monthMatch) {
            maxRows = data.length;
            bestSheet = sheet;
            bestSheetName = sheetName;
            monthMatch = true;
            console.log(`üìÖ –ù–∞–π–¥–µ–Ω –ª–∏—Å—Ç —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –º–µ—Å—è—Ü–µ–º: ${sheetName} (${data.length} —Å—Ç—Ä–æ–∫)`);
          }
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–∏—Å—Ç–∞ ${sheetName}:`, error);
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –º–µ—Å—è—Ü–µ–º, –≤—ã–±–∏—Ä–∞–µ–º –ª–∏—Å—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–æ–∫
    if (!monthMatch) {
      console.log('‚ö†Ô∏è –õ–∏—Å—Ç —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –º–µ—Å—è—Ü–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ª–∏—Å—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–æ–∫');
      maxRows = 0;
      
      for (const sheetName of sheetNames) {
        try {
          const sheet = workbook.Sheets[sheetName];
          const data = XLSX.utils.sheet_to_json(sheet, { header: 1 }) as any[][];
          if (data.length > maxRows) {
            maxRows = data.length;
            bestSheet = sheet;
            bestSheetName = sheetName;
          }
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–∏—Å—Ç–∞ ${sheetName}:`, error);
        }
      }
    }

    console.log(`üìã –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: ${bestSheetName} (${maxRows} —Å—Ç—Ä–æ–∫)`);
    (bestSheet as any).name = bestSheetName;
    return bestSheet;
  }

  private extractRawData(worksheet: XLSX.WorkSheet): any[][] {
    try {
      const data = XLSX.utils.sheet_to_json(worksheet, { 
        header: 1, 
        defval: '',
        raw: false, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        dateNF: 'dd.mm.yyyy'
      }) as any[][];
      
      return data.filter(row => 
        row && Array.isArray(row) && row.some(cell => 
          cell !== null && cell !== undefined && cell !== ''
        )
      );
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  private analyzeAndExtractDataCorrectlyV2(rawData: any[][], monthInfo: MonthInfo, fileName: string): ProcessedData {
    console.log('üîç IMPROVED V2 EXTRACTION - –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const reviews: DataRow[] = [];
    const comments: DataRow[] = [];
    const discussions: DataRow[] = [];
    let totalViews = 0;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ 4 (–∏–Ω–¥–µ–∫—Å 3), –∞ –Ω–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    let headerRowIndex = 3; // –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ 4
    let columnMapping: { [key: string]: number } = {};
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ 4 –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (rawData.length > 3 && rawData[3]) {
      const headerRow = rawData[3];
      const hasHeaders = headerRow.some((cell: any) => 
        cell && cell.toString().toLowerCase().includes('—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è')
      );
      
      if (hasHeaders) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ 4');
        headerRow.forEach((header: any, index: number) => {
          if (header) {
            const cleanHeader = header.toString().toLowerCase().trim();
            columnMapping[cleanHeader] = index;
          }
        });
        console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:', headerRow);
        console.log('–ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫:', columnMapping);
      } else {
        console.warn('‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ 4 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö');
        headerRowIndex = this.findHeaderRow(rawData);
      }
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    if (Object.keys(columnMapping).length === 0) {
      console.warn('‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞');
      columnMapping = {
        '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è': 0,     // –ö–æ–ª–æ–Ω–∫–∞ 1 = –∏–Ω–¥–µ–∫—Å 0
        '–ø–ª–æ—â–∞–¥–∫–∞': 1,           // –ö–æ–ª–æ–Ω–∫–∞ 2 = –∏–Ω–¥–µ–∫—Å 1  
        '–ø—Ä–æ–¥—É–∫—Ç': 2,            // –ö–æ–ª–æ–Ω–∫–∞ 3 = –∏–Ω–¥–µ–∫—Å 2
        '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ': 3, // –ö–æ–ª–æ–Ω–∫–∞ 4 = –∏–Ω–¥–µ–∫—Å 3
        '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è': 4,    // –ö–æ–ª–æ–Ω–∫–∞ 5 = –∏–Ω–¥–µ–∫—Å 4
        '—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏': 5, // –ö–æ–ª–æ–Ω–∫–∞ 6 = –∏–Ω–¥–µ–∫—Å 5
        '–¥–∞—Ç–∞': 6,               // –ö–æ–ª–æ–Ω–∫–∞ 7 = –∏–Ω–¥–µ–∫—Å 6
        '–Ω–∏–∫': 7,                // –ö–æ–ª–æ–Ω–∫–∞ 8 = –∏–Ω–¥–µ–∫—Å 7
        '–∞–≤—Ç–æ—Ä': 8,              // –ö–æ–ª–æ–Ω–∫–∞ 9 = –∏–Ω–¥–µ–∫—Å 8
        '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–µ–º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ': 10,     // –ö–æ–ª–æ–Ω–∫–∞ 11 = –∏–Ω–¥–µ–∫—Å 10
        '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞': 11,     // –ö–æ–ª–æ–Ω–∫–∞ 12 = –∏–Ω–¥–µ–∫—Å 11 (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
        '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ': 12,          // –ö–æ–ª–æ–Ω–∫–∞ 13 = –∏–Ω–¥–µ–∫—Å 12
        '–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ': 13,                   // –ö–æ–ª–æ–Ω–∫–∞ 14 = –∏–Ω–¥–µ–∫—Å 13
        '—Ç–∏–ø –ø–æ—Å—Ç–∞': 14                     // –ö–æ–ª–æ–Ω–∫–∞ 15 = –∏–Ω–¥–µ–∫—Å 14
      };
    }
    
    const startRow = headerRowIndex + 1;
    console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Å —Å—Ç—Ä–æ–∫–∏ ${startRow + 1}`);
    
    for (let i = startRow; i < rawData.length; i++) {
      const row = rawData[i];
      if (!row || row.length === 0) continue;
      
      const rowType = this.analyzeRowTypeByStructureV2(row, columnMapping);
      
      if (rowType === 'review') {
        const reviewData = this.extractReviewDataByStructureV2(row, columnMapping, i);
        if (reviewData) {
          reviews.push(reviewData);
          if (typeof reviewData.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã === 'number') {
            totalViews += reviewData.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã;
          }
        }
      } else if (rowType === 'comment') {
        const commentData = this.extractCommentDataByStructureV2(row, columnMapping, i);
        if (commentData) {
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
          if (comments.length < 15) { // –ü–µ—Ä–≤—ã–µ 15 - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            commentData.section = 'comments';
            comments.push(commentData);
          } else { // –û—Å—Ç–∞–ª—å–Ω—ã–µ - –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
            commentData.section = 'discussions';
            discussions.push(commentData);
          }
          
          if (typeof commentData.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã === 'number') {
            totalViews += commentData.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã;
          }
        }
      }
    }
    
    console.log(`üìä –ò–ó–í–õ–ï–ß–ï–ù–û V2: ${reviews.length} –æ—Ç–∑—ã–≤–æ–≤, ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, ${discussions.length} –æ–±—Å—É–∂–¥–µ–Ω–∏–π`);
    
    return {
      reviews,
      comments,
      discussions,
      monthName: monthInfo.name,
      totalViews,
      fileName: this.generateOutputFileName(fileName, monthInfo.name)
    };
  }

  private findHeaderRow(rawData: any[][]): number {
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≤ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö
    for (let i = 0; i < Math.min(10, rawData.length); i++) {
      const row = rawData[i];
      if (row && Array.isArray(row)) {
        const rowStr = row.map(cell => (cell || '').toString().toLowerCase()).join(' ');
        if (rowStr.includes('—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è') || rowStr.includes('–ø–ª–æ—â–∞–¥–∫–∞') || rowStr.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${i + 1}`);
          return i;
        }
      }
    }
    
    console.warn('‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É 4 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    return 3; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç—Ä–æ–∫–∞ 4 (–∏–Ω–¥–µ–∫—Å 3)
  }

  private analyzeRowTypeByStructureV2(row: any[], columnMapping: { [key: string]: number }): string {
    const typeColumn = columnMapping['—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è'] || 0;
    const postTypeColumn = columnMapping['—Ç–∏–ø –ø–æ—Å—Ç–∞'] || 14;
    const textColumn = columnMapping['—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'] || 4;
    const platformColumn = columnMapping['–ø–ª–æ—â–∞–¥–∫–∞'] || 1;
    
    const typeValue = this.getCleanValue(row[typeColumn]).toLowerCase();
    const postTypeValue = this.getCleanValue(row[postTypeColumn]).toLowerCase();
    const textValue = this.getCleanValue(row[textColumn]);
    const platformValue = this.getCleanValue(row[platformColumn]);
    
    if (!textValue && !platformValue) return 'empty';
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    if (postTypeValue === '–æ—Å' || postTypeValue === '–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') {
      return 'review';
    }
    
    if (postTypeValue === '—Ü—Å' || postTypeValue === '—Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') {
      return 'comment';  
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    if (typeValue.includes('–æ—Ç–∑—ã–≤—ã (–æ—Ç–∑–æ–≤–∏–∫–∏)') || typeValue.includes('–æ—Ç–∑—ã–≤ –Ω–∞ —Ç–æ–≤–∞—Ä')) {
      return 'review';
    }
    
    if (typeValue.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') || typeValue.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö')) {
      return 'comment';
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if (textValue.length > 15) {
      return 'comment';
    }
    
    return 'empty';
  }

  private extractReviewDataByStructureV2(row: any[], columnMapping: { [key: string]: number }, index: number): DataRow | null {
    try {
      const platformColumn = columnMapping['–ø–ª–æ—â–∞–¥–∫–∞'] || 1;
      const textColumn = columnMapping['—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'] || 4;
      const linkColumn = columnMapping['—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ'] || 3;
      const dateColumn = columnMapping['–¥–∞—Ç–∞'] || 6;
      const nickColumn = columnMapping['–Ω–∏–∫'] || 7;
      const authorColumn = columnMapping['–∞–≤—Ç–æ—Ä'] || 8;
      const viewsColumn1 = columnMapping['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞'] || 11; // –ò–°–ü–†–ê–í–õ–ï–ù–û!
      const viewsColumn2 = columnMapping['–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ'] || 12;
      const engagementColumn = columnMapping['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ'] || 13;
      
      const –ø–ª–æ—â–∞–¥–∫–∞ = this.getCleanValue(row[platformColumn]);
      const —Ç–µ–∫—Å—Ç = this.getCleanValue(row[textColumn]);
      
      if (!–ø–ª–æ—â–∞–¥–∫–∞ && !—Ç–µ–∫—Å—Ç) return null;
      if (—Ç–µ–∫—Å—Ç.length < 10) return null;
      
      const —Ç–µ–º–∞ = this.extractTheme(—Ç–µ–∫—Å—Ç);
      
      return {
        –ø–ª–æ—â–∞–¥–∫–∞,
        —Ç–µ–º–∞,
        —Ç–µ–∫—Å—Ç,
        –¥–∞—Ç–∞: this.extractDateByStructure(row, dateColumn),
        –Ω–∏–∫: this.extractAuthorByStructure(row, nickColumn, authorColumn),
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: this.extractViewsByStructureV2(row, viewsColumn1, viewsColumn2),
        –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: this.extractEngagementByStructure(row, engagementColumn),
        —Ç–∏–ø–ü–æ—Å—Ç–∞: '–û–°',
        section: 'reviews',
        originalRow: row
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${index + 1}:`, error);
      return null;
    }
  }

  private extractCommentDataByStructureV2(row: any[], columnMapping: { [key: string]: number }, index: number): DataRow | null {
    try {
      const platformColumn = columnMapping['–ø–ª–æ—â–∞–¥–∫–∞'] || 1;
      const textColumn = columnMapping['—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'] || 4;
      const linkColumn = columnMapping['—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ'] || 3;
      const dateColumn = columnMapping['–¥–∞—Ç–∞'] || 6;
      const nickColumn = columnMapping['–Ω–∏–∫'] || 7;
      const authorColumn = columnMapping['–∞–≤—Ç–æ—Ä'] || 8;
      const viewsColumn1 = columnMapping['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞'] || 11; // –ò–°–ü–†–ê–í–õ–ï–ù–û!
      const viewsColumn2 = columnMapping['–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ'] || 12;
      const engagementColumn = columnMapping['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ'] || 13;
      
      const –ø–ª–æ—â–∞–¥–∫–∞ = this.getCleanValue(row[platformColumn]);
      const —Ç–µ–∫—Å—Ç = this.getCleanValue(row[textColumn]);
      
      if (!–ø–ª–æ—â–∞–¥–∫–∞ && !—Ç–µ–∫—Å—Ç) return null;
      if (—Ç–µ–∫—Å—Ç.length < 10) return null;
      
      const —Ç–µ–º–∞ = this.extractTheme(—Ç–µ–∫—Å—Ç);
      
      return {
        –ø–ª–æ—â–∞–¥–∫–∞,
        —Ç–µ–º–∞,
        —Ç–µ–∫—Å—Ç,
        –¥–∞—Ç–∞: this.extractDateByStructure(row, dateColumn),
        –Ω–∏–∫: this.extractAuthorByStructure(row, nickColumn, authorColumn),
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: this.extractViewsByStructureV2(row, viewsColumn1, viewsColumn2),
        –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: this.extractEngagementByStructure(row, engagementColumn),
        —Ç–∏–ø–ü–æ—Å—Ç–∞: '–¶–°',
        section: 'comments',
        originalRow: row
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Å—Ç—Ä–æ–∫–µ ${index + 1}:`, error);
      return null;
    }
  }

  private extractTheme(text: string): string {
    if (!text) return '';
    
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    const cleanText = text.replace(/\s+/g, ' ').trim();
    
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–ù–∞–∑–≤–∞–Ω–∏–µ:", –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ, —á—Ç–æ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
    if (cleanText.toLowerCase().startsWith('–Ω–∞–∑–≤–∞–Ω–∏–µ:')) {
      const themeText = cleanText.substring(9).trim();
      if (themeText.length > 5 && themeText.length <= 80) {
        return themeText;
      }
    }
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ —Ç–µ–º—É
    return cleanText.length > 50 ? cleanText.substring(0, 50) + '...' : cleanText;
  }

  private extractDateByStructure(row: any[], dateColumn: number): string {
    const value = row[dateColumn];
    if (!value) return '';
    
    if (value instanceof Date) {
      return this.formatDate(value);
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π Excel
    if (typeof value === 'string' && value.includes('2025')) {
      return this.formatDateString(value);
    }
    
    return value.toString();
  }

  private extractAuthorByStructure(row: any[], nickColumn: number, authorColumn: number): string {
    const nick = this.getCleanValue(row[nickColumn]);
    const author = this.getCleanValue(row[authorColumn]);
    
    // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –Ω–∏–∫–Ω–µ–π–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    return nick || author || '';
  }

  private extractViewsByStructureV2(row: any[], viewsColumn1: number, viewsColumn2: number): number | string {
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
    const views1 = row[viewsColumn1];
    const views2 = row[viewsColumn2];
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º "–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ"
    if (views2 && typeof views2 === 'number' && views2 > 0) {
      return Math.round(views2);
    }
    
    // –ü–æ—Ç–æ–º "–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞"
    if (views1 && typeof views1 === 'number' && views1 > 0) {
      return Math.round(views1);
    }
    
    return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
  }

  private extractEngagementByStructure(row: any[], engagementColumn: number): string {
    const value = row[engagementColumn];
    if (!value) return '';
    
    const str = value.toString().toLowerCase();
    if (str.includes('–µ—Å—Ç—å') || str.includes('–¥–∞') || str.includes('+')) {
      return '–ï—Å—Ç—å';
    }
    
    return str;
  }

  private async createReferenceReportV2(data: ProcessedData): Promise<string> {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ V2...');
    
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet(data.monthName);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
    this.createReferenceHeader(worksheet, data);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    const headerRow = this.createReferenceTableHeaders(worksheet, data);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    let currentRow = headerRow + 1;
    
    // –°–µ–∫—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤
    worksheet.getCell(`A${currentRow}`).value = '–û—Ç–∑—ã–≤—ã';
    worksheet.getCell(`A${currentRow}`).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFE6F3FF' }
    };
    currentRow++;
    
    currentRow = this.addReferenceSection(worksheet, 'reviews', data.reviews, currentRow);
    
    // –°–µ–∫—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    worksheet.getCell(`A${currentRow}`).value = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20 –≤—ã–¥–∞—á–∏';
    worksheet.getCell(`A${currentRow}`).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFE6F7E6' }
    };
    currentRow++;
    
    currentRow = this.addReferenceSection(worksheet, 'comments', data.comments, currentRow);
    
    // –°–µ–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π
    worksheet.getCell(`A${currentRow}`).value = '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)';
    worksheet.getCell(`A${currentRow}`).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFFFF2E6' }
    };
    currentRow++;
    
    currentRow = this.addReferenceSection(worksheet, 'discussions', data.discussions, currentRow);
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –°—Ç—Ä–æ–∫–∞ "–ò—Ç–æ–≥–æ"
    this.addTotalRow(worksheet, data, currentRow);
    
    const outputPath = path.join(process.cwd(), 'uploads', data.fileName);
    await workbook.xlsx.writeFile(outputPath);
    
    console.log(`‚úÖ –û—Ç—á–µ—Ç V2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputPath}`);
    return outputPath;
  }

  private addTotalRow(worksheet: ExcelJS.Worksheet, data: ProcessedData, startRow: number): void {
    const totalRow = startRow + 1;
    
    // –°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    worksheet.getCell(`A${totalRow}`).value = `–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${data.totalViews.toLocaleString()}`;
    worksheet.getCell(`A${totalRow}`).font = { bold: true, size: 12 };
    worksheet.getCell(`A${totalRow}`).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFCCCCCC' }
    };
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç–∑—ã–≤—ã)
    const totalRow2 = totalRow + 1;
    worksheet.getCell(`A${totalRow2}`).value = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç–∑—ã–≤—ã): ${data.reviews.length}`;
    worksheet.getCell(`A${totalRow2}`).font = { bold: true };
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
    const totalRow3 = totalRow2 + 1;
    const totalDiscussions = data.comments.length + data.discussions.length;
    worksheet.getCell(`A${totalRow3}`).value = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (—Ñ–æ—Ä—É–º—ã, —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç–∞—Ç—å—è–º): ${totalDiscussions}`;
    worksheet.getCell(`A${totalRow3}`).font = { bold: true };
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
    worksheet.mergeCells(`A${totalRow}:H${totalRow}`);
    worksheet.mergeCells(`A${totalRow2}:H${totalRow2}`);
    worksheet.mergeCells(`A${totalRow3}:H${totalRow3}`);
  }

  private createReferenceHeader(worksheet: ExcelJS.Worksheet, data: ProcessedData): void {
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
    worksheet.getCell('A1').value = '–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º';
    worksheet.getCell('A1').font = { bold: true, size: 16 };
    worksheet.getCell('A1').fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FF2D1341' }
    };
    worksheet.getCell('A1').font = { ...worksheet.getCell('A1').font, color: { argb: 'FFFFFFFF' } };
    
    // –ü–µ—Ä–∏–æ–¥
    const currentDate = new Date();
    const excelDate = this.dateToExcelSerial(currentDate);
    worksheet.getCell('B2').value = '–ü–µ—Ä–∏–æ–¥';
    worksheet.getCell('C2').value = excelDate;
    worksheet.getCell('C2').numFmt = 'dd.mm.yyyy';
    
    // –ü–ª–∞–Ω
    worksheet.getCell('B3').value = '–ü–ª–∞–Ω';
    worksheet.getCell('C3').value = `${data.reviews.length} –æ—Ç–∑—ã–≤–æ–≤, ${data.comments.length + data.discussions.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, ${data.totalViews.toLocaleString()} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`;
    worksheet.getCell('B3').fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFE6F3FF' }
    };
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏
    worksheet.mergeCells('A1:H1');
    worksheet.mergeCells('C3:H3');
  }

  private createReferenceTableHeaders(worksheet: ExcelJS.Worksheet, data: ProcessedData): number {
    const headerRow = 4;
    
    const headers = ['–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞', '–ù–∏–∫', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø –ø–æ—Å—Ç–∞'];
    
    headers.forEach((header, index) => {
      const cell = worksheet.getCell(headerRow, index + 1);
      cell.value = header;
      cell.font = { bold: true };
      cell.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFD9D9D9' }
      };
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      };
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
    worksheet.getColumn(1).width = 15; // –ü–ª–æ—â–∞–¥–∫–∞
    worksheet.getColumn(2).width = 30; // –¢–µ–º–∞
    worksheet.getColumn(3).width = 50; // –¢–µ–∫—Å—Ç
    worksheet.getColumn(4).width = 12; // –î–∞—Ç–∞
    worksheet.getColumn(5).width = 15; // –ù–∏–∫
    worksheet.getColumn(6).width = 12; // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
    worksheet.getColumn(7).width = 12; // –í–æ–≤–ª–µ—á–µ–Ω–∏–µ
    worksheet.getColumn(8).width = 10; // –¢–∏–ø –ø–æ—Å—Ç–∞
    
    return headerRow;
  }

  private addReferenceSection(worksheet: ExcelJS.Worksheet, sectionName: string, data: DataRow[], startRow: number): number {
    let currentRow = startRow;
    
    data.forEach((item) => {
      worksheet.getCell(currentRow, 1).value = item.–ø–ª–æ—â–∞–¥–∫–∞;
      worksheet.getCell(currentRow, 2).value = item.—Ç–µ–º–∞;
      worksheet.getCell(currentRow, 3).value = item.—Ç–µ–∫—Å—Ç;
      worksheet.getCell(currentRow, 4).value = item.–¥–∞—Ç–∞;
      worksheet.getCell(currentRow, 5).value = item.–Ω–∏–∫;
      worksheet.getCell(currentRow, 6).value = item.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã;
      worksheet.getCell(currentRow, 7).value = item.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ;
      worksheet.getCell(currentRow, 8).value = item.—Ç–∏–ø–ü–æ—Å—Ç–∞;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
      for (let col = 1; col <= 8; col++) {
        worksheet.getCell(currentRow, col).border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        };
      }
      
      currentRow++;
    });
    
    return currentRow + 1; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏
  }

  private generateStatisticsV2(data: ProcessedData, processingTime: number): ProcessingStats {
    const totalRows = data.reviews.length + data.comments.length + data.discussions.length;
    const engagementCount = [...data.reviews, ...data.comments, ...data.discussions]
      .filter(row => row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ && row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.toLowerCase().includes('–µ—Å—Ç—å')).length;
    
    const engagementRate = totalRows > 0 ? Math.round((engagementCount / totalRows) * 100) : 0;
    
    return {
      totalRows,
      reviewsCount: data.reviews.length,
      commentsCount: data.comments.length,
      activeDiscussionsCount: data.discussions.length,
      totalViews: data.totalViews,
      engagementRate,
      platformsWithData: 100, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–º–µ—é—Ç –¥–∞–Ω–Ω—ã–µ
      processingTime: Math.round(processingTime / 1000),
      qualityScore: 95 // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è V2
    };
  }

  private getCleanValue(value: any): string {
    if (value === null || value === undefined) return '';
    return value.toString().trim();
  }

  private formatDate(date: Date): string {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
  }

  private formatDateString(dateStr: string): string {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
    if (dateStr.includes('2025')) {
      const match = dateStr.match(/(\w{3})\s+(\w{3})\s+(\d{2})\s+(\d{4})/);
      if (match) {
        const monthMap: { [key: string]: string } = {
          'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04',
          'May': '05', 'Jun': '06', 'Jul': '07', 'Aug': '08',
          'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'
        };
        const month = monthMap[match[2]] || '06';
        return `${match[3]}.${month}.${match[4]}`;
      }
    }
    
    return dateStr;
  }

  private dateToExcelSerial(date: Date): number {
    const epoch = new Date(1900, 0, 1);
    const daysDiff = Math.floor((date.getTime() - epoch.getTime()) / (1000 * 60 * 60 * 24));
    return daysDiff + 2;
  }

  private generateOutputFileName(originalFileName: string, monthName: string): string {
    const baseName = originalFileName.replace(/\.[^/.]+$/, '');
    const currentDate = new Date();
    const dateStr = currentDate.toISOString().slice(0, 10).replace(/-/g, '');
    return `${baseName}_${monthName}_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_${dateStr}.xlsx`;
  }
}

export const improvedProcessorV2 = new ExcelProcessorImprovedV2();