import * as XLSX from 'xlsx';
import ExcelJS from 'exceljs';
import type { ProcessingStats } from '@shared/schema';
import path from 'path';
import fs from 'fs';

interface DataRow {
  type: string;
  text: string;
  url: string;
  date: string;
  author: string;
  postType: string;
  views: number;
  platform: string;
  qualityScore: number;
  row: any[];
  section?: string;
}

interface ProcessedData {
  reviews: number;
  comments: number;
  totalViews: number;
  processedRecords: number;
  engagementRate: number;
}

interface ColumnMapping {
  platformColumn?: number;
  urlColumn?: number;
  textColumn?: number;
  dateColumn?: number;
  authorColumn?: number;
  postTypeColumn?: number;
  viewsColumns?: number[];
}

interface ProcessingOptions {
  inputPath?: string;
  outputDir?: string;
  columnMapping?: ColumnMapping;
  platforms?: {
    reviewPlatforms?: string[];
    pharmacyPlatforms?: string[];
    commentPlatforms?: string[];
  };
}

export class ImprovedExcelProcessor {
  private options: ProcessingOptions;
  private defaultReviewPlatforms = [
    'otzovik', 'irecommend', 'otzyvru', 'pravogolosa', 'medum', 
    'vseotzyvy', 'otzyvy.pro'
  ];

  private defaultPharmacyPlatforms = [
    'market.yandex', 'dialog.ru', 'goodapteka', 'megapteka', 
    'uteka', 'nfapteka', 'piluli.ru', 'eapteka.ru', 'pharmspravka.ru', 
    'gde.ru', 'ozon.ru'
  ];

  private defaultCommentPlatforms = [
    'dzen.ru', 'woman.ru', 'forum.baby.ru', 'vk.com', 't.me',
    'ok.ru', 'otvet.mail.ru', 'babyblog.ru', 'mom.life', 
    'youtube.com', 'pikabu.ru', 'livejournal.com', 'facebook.com'
  ];

  constructor(options: ProcessingOptions = {}) {
    this.options = {
      outputDir: options.outputDir || 'uploads',
      platforms: {
        reviewPlatforms: options.platforms?.reviewPlatforms || this.defaultReviewPlatforms,
        pharmacyPlatforms: options.platforms?.pharmacyPlatforms || this.defaultPharmacyPlatforms,
        commentPlatforms: options.platforms?.commentPlatforms || this.defaultCommentPlatforms,
      },
      columnMapping: options.columnMapping || {},
      ...options
    };
  }

  private getCleanValue(value: any): string {
    if (value === null || value === undefined) return '';
    return value.toString().trim();
  }

  private cleanViews(value: any): number | string {
    if (typeof value === 'number' && value > 0) {
      return Math.round(value);
    }
    
    if (typeof value === 'string') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "3/7/25"
      const dateMatch = value.match(/^(\d{1,2})\/(\d{1,2})\/(\d{2,4})$/);
      if (dateMatch) {
        const month = parseInt(dateMatch[1]);
        const day = parseInt(dateMatch[2]);
        let year = parseInt(dateMatch[3]);
        
        // –ï—Å–ª–∏ –≥–æ–¥ –¥–≤—É–∑–Ω–∞—á–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º 2000
        if (year < 100) {
          year += 2000;
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Excel serial number
        const date = new Date(year, month - 1, day);
        const excelEpoch = new Date(1900, 0, 1);
        const daysDiff = Math.floor((date.getTime() - excelEpoch.getTime()) / (1000 * 60 * 60 * 24));
        
        // Excel —Å—á–∏—Ç–∞–µ—Ç 1900 –≥–æ–¥ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–º (—Ö–æ—Ç—è —ç—Ç–æ –Ω–µ —Ç–∞–∫), –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º 2
        return daysDiff + 2;
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —á–∏—Å–ª–æ
      const str = value.toString().replace(/[\s,'"]/g, '');
      const num = parseFloat(str);
      if (!isNaN(num) && num > 0) {
        return Math.round(num);
      }
    }
    
    return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
  }

  async processExcelFile(filePath: string, customOptions?: ProcessingOptions): Promise<{ outputPath: string, statistics: any }> {
    try {
      console.log(`üî• –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è —Ñ–∞–π–ª–∞: ${filePath}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (!this.validateFileExists(filePath)) {
        throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      }

      // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      const workbook = await this.readExcelFile(filePath);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç
      const worksheet = this.findWorksheet(workbook);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      const rawData = this.extractDataFromWorksheet(worksheet);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–æ–Ω–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      const columnMapping = this.detectColumnStructure(rawData);
      console.log('üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫:', columnMapping);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
      const processedRows = this.processDataWithMapping(rawData, columnMapping);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
      const filteredRows = this.applyAdvancedFiltering(processedRows);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const totalViews = this.extractTotalViews(rawData);
      
      // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
      const outputPath = await this.createFormattedOutput(filteredRows, totalViews, filePath, customOptions);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const statistics = this.generateStatistics(filteredRows, totalViews);
      
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: ${outputPath}`);
      return { outputPath, statistics };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
   */
  private validateFileExists(filePath: string): boolean {
    try {
      return fs.existsSync(filePath) && fs.statSync(filePath).isFile();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞:', error);
      return false;
    }
  }

  /**
   * –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  private async readExcelFile(filePath: string): Promise<ExcelJS.Workbook> {
    try {
      const workbook = new ExcelJS.Workbook();
      await workbook.xlsx.readFile(filePath);
      return workbook;
    } catch (error) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Excel —Ñ–∞–π–ª: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞
   */
  private findWorksheet(workbook: ExcelJS.Workbook): ExcelJS.Worksheet {
    try {
      // –ò—â–µ–º –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –º–µ—Å—è—Ü–∞
      const months = ["–Ø–Ω–≤25", "–§–µ–≤25", "–ú–∞—Ä25", "–ú–∞—Ä—Ç25", "–ê–ø—Ä25", "–ú–∞–π25", "–ò—é–Ω25", 
                     "–ò—é–ª25", "–ê–≤–≥25", "–°–µ–Ω25", "–û–∫—Ç25", "–ù–æ—è25", "–î–µ–∫25"];
      
      const targetWorksheet = workbook.worksheets.find(ws => 
        months.some(month => ws.name.includes(month))
      );
      
      if (targetWorksheet) {
        console.log(`üìã –ù–∞–π–¥–µ–Ω –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏: ${targetWorksheet.name}`);
        return targetWorksheet;
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
      const firstWorksheet = workbook.worksheets[0];
      if (!firstWorksheet) {
        throw new Error('–í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤');
      }
      
      console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç: ${firstWorksheet.name}`);
      return firstWorksheet;
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞ Excel
   */
  private extractDataFromWorksheet(worksheet: ExcelJS.Worksheet): any[][] {
    try {
      const data: any[][] = [];
      
      worksheet.eachRow((row: any, rowNumber: number) => {
        const rowData: any[] = [];
        row.eachCell((cell: any, colNumber: number) => {
          let value = cell.value;
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π —è—á–µ–µ–∫
          if (value && typeof value === 'object') {
            if (value instanceof Date) {
              value = value.toISOString().split('T')[0];
            } else if ((value as any).text) {
              value = (value as any).text;
            } else if ((value as any).result) {
              value = (value as any).result;
            } else if (value.toString) {
              value = value.toString();
            } else {
              value = JSON.stringify(value);
            }
          }
          
          rowData[colNumber - 1] = value;
        });
        data[rowNumber - 1] = rowData;
      });
      
      console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${data.length}`);
      return data;
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
   */
  private detectColumnStructure(data: any[][]): ColumnMapping {
    try {
      const mapping: ColumnMapping = {
        viewsColumns: []
      };
      
      // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
      const headerRows = data.slice(0, 10);
      
      for (let rowIndex = 0; rowIndex < headerRows.length; rowIndex++) {
        const row = headerRows[rowIndex];
        if (!row) continue;
        
        for (let colIndex = 0; colIndex < row.length; colIndex++) {
          const cellValue = (row[colIndex] || '').toString().toLowerCase();
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
          if (cellValue.includes('–ø–ª–æ—â–∞–¥–∫–∞') || cellValue.includes('platform')) {
            mapping.platformColumn = colIndex;
          } else if (cellValue.includes('url') || cellValue.includes('—Å—Å—ã–ª–∫–∞') || cellValue.includes('—Ç–µ–º–∞')) {
            mapping.urlColumn = colIndex;
          } else if (cellValue.includes('—Ç–µ–∫—Å—Ç') || cellValue.includes('—Å–æ–æ–±—â–µ–Ω–∏–µ') || cellValue.includes('text')) {
            mapping.textColumn = colIndex;
          } else if (cellValue.includes('–¥–∞—Ç–∞') || cellValue.includes('date')) {
            mapping.dateColumn = colIndex;
          } else if (cellValue.includes('–∞–≤—Ç–æ—Ä') || cellValue.includes('–Ω–∏–∫') || cellValue.includes('author')) {
            mapping.authorColumn = colIndex;
          } else if (cellValue.includes('—Ç–∏–ø') || cellValue.includes('type')) {
            mapping.postTypeColumn = colIndex;
          } else if (cellValue.includes('–ø—Ä–æ—Å–º–æ—Ç—Ä') || cellValue.includes('views') || cellValue.includes('–ø—Ä–æ—á—Ç–µ–Ω–∏')) {
            mapping.viewsColumns?.push(colIndex);
          }
        }
      }
      
      // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      if (!mapping.textColumn || !mapping.urlColumn) {
        const contentMapping = this.detectByContent(data);
        Object.assign(mapping, contentMapping);
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
      mapping.platformColumn = mapping.platformColumn ?? 0;
      mapping.urlColumn = mapping.urlColumn ?? 1;
      mapping.textColumn = mapping.textColumn ?? 4;
      mapping.dateColumn = mapping.dateColumn ?? 6;
      mapping.authorColumn = mapping.authorColumn ?? 7;
      mapping.postTypeColumn = mapping.postTypeColumn ?? 13;
      mapping.viewsColumns = mapping.viewsColumns?.length ? mapping.viewsColumns : [10, 11, 12];
      
      return mapping;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–ª–æ–Ω–æ–∫:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      return {
        platformColumn: 0,
        urlColumn: 1,
        textColumn: 4,
        dateColumn: 6,
        authorColumn: 7,
        postTypeColumn: 13,
        viewsColumns: [10, 11, 12]
      };
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
   */
  private detectByContent(data: any[][]): ColumnMapping {
    const mapping: ColumnMapping = { viewsColumns: [] };
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    const sampleRows = data.slice(0, 20);
    
    for (let colIndex = 0; colIndex < 20; colIndex++) {
      let hasUrls = 0;
      let hasLongText = 0;
      let hasDates = 0;
      let hasNumbers = 0;
      
      sampleRows.forEach((row: any[]) => {
        const cell = (row[colIndex] || '').toString();
        
        if (cell.includes('http') || cell.includes('www.')) hasUrls++;
        if (cell.length > 50) hasLongText++;
        if (cell.match(/\d{1,2}[.\/]\d{1,2}[.\/]\d{2,4}/)) hasDates++;
        if (cell.match(/^\d+$/) && parseInt(cell) > 0) hasNumbers++;
      });
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
      if (hasUrls > sampleRows.length * 0.3) {
        mapping.urlColumn = colIndex;
      } else if (hasLongText > sampleRows.length * 0.3) {
        mapping.textColumn = colIndex;
      } else if (hasDates > sampleRows.length * 0.2) {
        mapping.dateColumn = colIndex;
      } else if (hasNumbers > sampleRows.length * 0.2) {
        mapping.viewsColumns?.push(colIndex);
      }
    }
    
    return mapping;
  }

  private findMonthSheet(sheetNames: string[]): string | null {
    const monthPatterns = ['–º–∞—Ä—Ç', '–º–∞—Ä', 'march', 'mar'];
    return sheetNames.find(name => 
      monthPatterns.some(pattern => name.toLowerCase().includes(pattern))
    ) || sheetNames[0];
  }

  private extractDataCorrectly(jsonData: any[][]): { 
    reviews: DataRow[], 
    comments: DataRow[], 
    active: DataRow[], 
    statistics: ProcessingStats 
  } {
    const reviews: DataRow[] = [];
    const comments: DataRow[] = [];
    const active: DataRow[] = [];
    
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
    for (let i = 0; i < jsonData.length; i++) {
      const row = jsonData[i];
      if (!row || !Array.isArray(row) || row.length === 0) continue;
      
      const firstCell = this.getCleanValue(row[0]).toLowerCase();
      
      // –û—Ç–∑—ã–≤—ã - —Å—Ç—Ä–æ–∫–∏ —Å "–æ—Ç–∑—ã–≤" –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
      if (firstCell.includes('–æ—Ç–∑—ã–≤') && !firstCell.includes('–∫–∞—Ä—Ç–æ—á–µ–∫')) {
        const rowData = this.extractReviewRow(row, i + 1);
        if (rowData) {
          reviews.push(rowData);
        }
      }
      
      // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - —Å—Ç—Ä–æ–∫–∏ —Å "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏" –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ  
      else if (firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') && firstCell.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö')) {
        const rowData = this.extractCommentRow(row, i + 1);
        if (rowData) {
          comments.push(rowData);
        }
      }
    }
    
    console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ: –û—Ç–∑—ã–≤—ã=${reviews.length}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏=${comments.length}`);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const statistics = this.calculateStatistics(reviews, comments, active);
    
    return { reviews, comments, active, statistics };
  }

  private extractReviewRow(row: any[], rowIndex: number): DataRow | null {
    try {
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤: [–¢–∏–ø, –ü–ª–æ—â–∞–¥–∫–∞, –ü—Ä–æ–¥—É–∫—Ç, –°—Å—ã–ª–∫–∞, –¢–µ–∫—Å—Ç, –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ, –î–∞—Ç–∞, –ù–∏–∫]
      const –ø–ª–æ—â–∞–¥–∫–∞ = this.getCleanValue(row[1]);
      const –ø—Ä–æ–¥—É–∫—Ç = this.getCleanValue(row[2]);
      const —Ç–µ–∫—Å—Ç = this.getCleanValue(row[4]);
      const –¥–∞—Ç–∞ = row[6] || '';
      const –Ω–∏–∫ = this.getCleanValue(row[7]);
      
      // –î–ª—è –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã - —ç—Ç–æ –¥–∞—Ç–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ 6, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Excel serial number
      const –ø—Ä–æ—Å–º–æ—Ç—Ä—ã = this.cleanViews(row[6]);
      
      if (!–ø–ª–æ—â–∞–¥–∫–∞ && !—Ç–µ–∫—Å—Ç) return null;
      
      return {
        –ø–ª–æ—â–∞–¥–∫–∞,
        —Ç–µ–º–∞: –ø—Ä–æ–¥—É–∫—Ç,
        —Ç–µ–∫—Å—Ç,
        –¥–∞—Ç–∞: –¥–∞—Ç–∞,
        –Ω–∏–∫,
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
        –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        —Ç–∏–ø–ü–æ—Å—Ç–∞: '–û—Ç–∑—ã–≤—ã'
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex}:`, error);
      return null;
    }
  }

  private extractCommentRow(row: any[], rowIndex: number): DataRow | null {
    try {
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: [–¢–∏–ø, –ü–ª–æ—â–∞–¥–∫–∞, –ü—Ä–æ–¥—É–∫—Ç, –°—Å—ã–ª–∫–∞, –¢–µ–∫—Å—Ç, _, –î–∞—Ç–∞, –ù–∏–∫, –ê–≤—Ç–æ—Ä, –°—Ç–∞—Ä—Ç, –ö–æ–Ω–µ—Ü, –ü–æ–ª—É—á–µ–Ω–æ, –í–æ–≤–ª–µ—á–µ–Ω–∏–µ]
      const –ø–ª–æ—â–∞–¥–∫–∞ = this.getCleanValue(row[1]);
      const –ø—Ä–æ–¥—É–∫—Ç = this.getCleanValue(row[2]);
      const —Ç–µ–∫—Å—Ç = this.getCleanValue(row[4]);
      const –¥–∞—Ç–∞ = row[6] || '';
      const –Ω–∏–∫ = this.getCleanValue(row[7]);
      
      // –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–∞–∫–∂–µ –≤ –∫–æ–ª–æ–Ω–∫–µ 6
      const –ø—Ä–æ—Å–º–æ—Ç—Ä—ã = this.cleanViews(row[6]);
      const –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ = this.getCleanValue(row[12]) || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
      
      if (!–ø–ª–æ—â–∞–¥–∫–∞ && !—Ç–µ–∫—Å—Ç) return null;
      
      return {
        –ø–ª–æ—â–∞–¥–∫–∞,
        —Ç–µ–º–∞: –ø—Ä–æ–¥—É–∫—Ç,
        —Ç–µ–∫—Å—Ç,
        –¥–∞—Ç–∞: –¥–∞—Ç–∞,
        –Ω–∏–∫,
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
        –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ,
        —Ç–∏–ø–ü–æ—Å—Ç–∞: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20 –≤—ã–¥–∞—á–∏'
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex}:`, error);
      return null;
    }
  }

  private calculateStatistics(reviews: DataRow[], comments: DataRow[], active: DataRow[]): ProcessingStats {
    const allData = [...reviews, ...comments, ...active];
    
    // –°—É–º–º–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
    const totalViews = allData.reduce((sum, row) => {
      if (typeof row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã === 'number') {
        return sum + row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã;
      }
      return sum;
    }, 0);
    
    // –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
    const recordsWithViews = allData.filter(row => 
      typeof row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã === 'number' && row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã > 0
    ).length;
    
    // –ü—Ä–æ—Ü–µ–Ω—Ç –ø–ª–æ—â–∞–¥–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏
    const platformsWithData = allData.length > 0 ? 
      Math.round((recordsWithViews / allData.length) * 100) : 0;
    
    // –°—á–∏—Ç–∞–µ–º –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const discussionData = [...comments, ...active];
    const engagedDiscussions = discussionData.filter(row => 
      row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ && 
      row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ !== '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' && 
      (row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.toLowerCase().includes('–µ—Å—Ç—å') || 
       row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.toLowerCase().includes('–¥–∞') ||
       row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.toLowerCase().includes('+'))
    ).length;
    
    const engagementRate = discussionData.length > 0 ? 
      Math.round((engagedDiscussions / discussionData.length) * 100) : 0;
    
    return {
      totalRows: allData.length,
      reviewsCount: reviews.length,
      commentsCount: comments.length,
      activeDiscussionsCount: active.length,
      totalViews,
      engagementRate,
      platformsWithData
    };
  }

  private async createFormattedReport(
    groupedData: { –æ—Ç–∑—ã–≤—ã: DataRow[]; –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: DataRow[]; –∞–∫—Ç–∏–≤–Ω—ã–µ: DataRow[] },
    statistics: ProcessingStats,
    sheetName: string
  ): Promise<any> {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...');
    
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('–ú–∞—Ä—Ç 2025');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    worksheet.columns = [
      { width: 25 }, // –ü–ª–æ—â–∞–¥–∫–∞
      { width: 20 }, // –¢–µ–º–∞ 
      { width: 50 }, // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      { width: 12 }, // –î–∞—Ç–∞
      { width: 15 }, // –ù–∏–∫
      { width: 12 }, // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
      { width: 12 }, // –í–æ–≤–ª–µ—á–µ–Ω–∏–µ
      { width: 12 }, // –¢–∏–ø –ø–æ—Å—Ç–∞
    ];

    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–ø–∫–∏ –æ—Ç—á–µ—Ç–∞...');
    // –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–ø–∫–∏ –æ—Ç—á–µ—Ç–∞
    this.createReportHeader(worksheet, statistics);

    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã...');
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
    this.createTableHeaders(worksheet);

    let currentRow = 5;

    console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤...');
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    currentRow = this.addDataSection(worksheet, '–û—Ç–∑—ã–≤—ã', groupedData.–æ—Ç–∑—ã–≤—ã, currentRow);
    
    console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...');
    currentRow = this.addDataSection(worksheet, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20 –≤—ã–¥–∞—á–∏', groupedData.–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, currentRow);
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (groupedData.–∞–∫—Ç–∏–≤–Ω—ã–µ.length > 0) {
      console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π...');
      currentRow = this.addDataSection(worksheet, '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)', groupedData.–∞–∫—Ç–∏–≤–Ω—ã–µ, currentRow);
    }

    console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π...');
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    this.addSummaryMetrics(worksheet, statistics, currentRow + 2);

    console.log('‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω');
    return workbook;
  }

  private createReportHeader(worksheet: ExcelJS.Worksheet, statistics: ProcessingStats): void {
    const headerFill = { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'FF2D1341' } };
    const headerFont = { name: 'Arial', size: 12, bold: true, color: { argb: 'FFFFFFFF' } };
    const centerAlign = { horizontal: 'center' as const, vertical: 'middle' as const, wrapText: true };
    
    // –°—Ç—Ä–æ–∫–∞ 1: –ü—Ä–æ–¥—É–∫—Ç
    worksheet.mergeCells('A1:B1');
    worksheet.getCell('A1').value = '–ü—Ä–æ–¥—É–∫—Ç';
    worksheet.mergeCells('C1:H1');
    worksheet.getCell('C1').value = '–ê–∫—Ä–∏—Ö–∏–Ω - –§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º';
    
    // –°—Ç—Ä–æ–∫–∞ 2: –ü–µ—Ä–∏–æ–¥
    worksheet.mergeCells('A2:B2');
    worksheet.getCell('A2').value = '–ü–µ—Ä–∏–æ–¥';
    worksheet.mergeCells('C2:H2');
    worksheet.getCell('C2').value = '–ú–∞—Ä—Ç 2025';
    
    // –°—Ç—Ä–æ–∫–∞ 3: –ü–ª–∞–Ω
    worksheet.mergeCells('A3:B3');
    worksheet.getCell('A3').value = '–ü–ª–∞–Ω';
    worksheet.mergeCells('C3:H3');
    worksheet.getCell('C3').value = `–û—Ç–∑—ã–≤—ã - ${statistics.reviewsCount}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - ${statistics.commentsCount}`;

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ —à–∞–ø–∫–µ
    for (let row = 1; row <= 3; row++) {
      for (let col = 1; col <= 8; col++) {
        const cell = worksheet.getCell(row, col);
        cell.fill = headerFill;
        cell.font = headerFont;
        cell.alignment = centerAlign;
      }
    }
  }

  private createTableHeaders(worksheet: ExcelJS.Worksheet): void {
    const headers = ['–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–î–∞—Ç–∞', '–ù–∏–∫', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø –ø–æ—Å—Ç–∞'];
    const headerRow = worksheet.getRow(4);
    headerRow.values = headers;
    
    const headerFill = { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'FF2D1341' } };
    const headerFont = { name: 'Arial', size: 9, bold: true, color: { argb: 'FFFFFFFF' } };
    const centerAlign = { horizontal: 'center' as const, vertical: 'middle' as const, wrapText: true };

    headers.forEach((_, index) => {
      const cell = headerRow.getCell(index + 1);
      cell.font = headerFont;
      cell.fill = headerFill;
      cell.alignment = centerAlign;
    });
  }

  private addDataSection(worksheet: ExcelJS.Worksheet, sectionName: string, data: DataRow[], startRow: number): number {
    let currentRow = startRow;

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
    worksheet.mergeCells(`A${currentRow}:H${currentRow}`);
    const sectionCell = worksheet.getCell(`A${currentRow}`);
    sectionCell.value = sectionName;
    sectionCell.font = { name: 'Arial', size: 9, bold: true };
    sectionCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFC5D9F1' } };
    sectionCell.alignment = { horizontal: 'center', vertical: 'middle', wrapText: true };
    worksheet.getRow(currentRow).height = 12;
    currentRow++;

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    data.forEach(row => {
      const dataRow = worksheet.getRow(currentRow);
      dataRow.values = [
        row.–ø–ª–æ—â–∞–¥–∫–∞,
        row.—Ç–µ–º–∞, 
        row.—Ç–µ–∫—Å—Ç,
        row.–¥–∞—Ç–∞,
        row.–Ω–∏–∫,
        row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
        row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ,
        row.—Ç–∏–ø–ü–æ—Å—Ç–∞
      ];
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫ –¥–∞–Ω–Ω—ã—Ö
      dataRow.eachCell((cell: any, colNumber: number) => {
        cell.font = { name: 'Arial', size: 9 };
        if (colNumber === 4 && cell.value) { // –î–∞—Ç–∞
          cell.numFmt = 'dd.mm.yyyy';
        }
        if (colNumber === 6) { // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã - —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
          cell.alignment = { horizontal: 'center', vertical: 'top', wrapText: true };
        } else {
          cell.alignment = { horizontal: 'left', vertical: 'top', wrapText: true };
        }
      });
      
      dataRow.height = 12;
      currentRow++;
    });
    
    return currentRow + 1; // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ —Å–µ–∫—Ü–∏–∏
  }

  private addSummaryMetrics(worksheet: ExcelJS.Worksheet, statistics: ProcessingStats, startRow: number): void {
    const summaryData = [
      ['', '', '', '', '', '', '', ''],
      ['–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', '', '', '', '', statistics.totalViews, '', ''],
      ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç–∑—ã–≤—ã)', '', '', '', '', statistics.reviewsCount, '', ''],
      ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (—Ñ–æ—Ä—É–º—ã, —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç–∞—Ç—å—è–º)', '', '', '', '', statistics.commentsCount, '', ''],
      ['–î–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º –≤ –¥–∏–∞–ª–æ–≥', '', '', '', '', `${statistics.engagementRate}%`, '', ''],
      ['', '', '', '', '', '', '', ''],
      ['*–ë–µ–∑ —É—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–æ–∫ —Å –∑–∞–∫—Ä—ã—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', '', '', '', '', '', '', ''],
      ['–ü–ª–æ—â–∞–¥–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', '', '', '', '', `${statistics.platformsWithData}%`, '', ''],
      ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á—Ç–µ–Ω–∏–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ 30% –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤, —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.', '', '', '', '', '', '', '']
    ];

    summaryData.forEach((rowData, index) => {
      const row = worksheet.getRow(startRow + index);
      row.values = rowData;
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
      if (index === 7) { // –°—Ç—Ä–æ–∫–∞ "–ü–ª–æ—â–∞–¥–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
        row.getCell(1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFFF00' } }; // –ñ–µ–ª—Ç—ã–π —Ñ–æ–Ω
        for (let col = 1; col <= 8; col++) {
          row.getCell(col).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFFF00' } };
        }
      }
      
      row.eachCell((cell: any) => {
        cell.font = { name: 'Arial', size: 9 };
        cell.alignment = { horizontal: 'left', vertical: 'top', wrapText: true };
      });
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
   */
  private processDataWithMapping(data: any[][], mapping: ColumnMapping): DataRow[] {
    try {
      const processedRows: DataRow[] = [];
      
      for (let i = 0; i < data.length; i++) {
        const row = data[i];
        if (!row || row.length === 0) continue;
        
        const type = this.analyzeRowTypeWithMapping(row, mapping);
        
        if (type === 'review_otzovik' || type === 'review_pharmacy' || type === 'comment') {
          const processedRow = this.createDataRowFromMapping(row, mapping, type, i);
          if (processedRow) {
            processedRows.push(processedRow);
          }
        }
      }
      
      console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${processedRows.length}`);
      return processedRows;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      return [];
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫
   */
  private analyzeRowTypeWithMapping(row: any[], mapping: ColumnMapping): string {
    try {
      if (!row || row.length === 0) return 'empty';
      
      const platform = (row[mapping.platformColumn || 0] || '').toString().toLowerCase();
      const url = (row[mapping.urlColumn || 1] || '').toString().toLowerCase();
      const text = (row[mapping.textColumn || 4] || '').toString().toLowerCase();
      const postType = (row[mapping.postTypeColumn || 13] || '').toString().toLowerCase();
      
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (platform.includes('—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è') || platform.includes('–ø–ª–æ—â–∞–¥–∫–∞') || 
          url.includes('–ø–ª–æ—â–∞–¥–∫–∞') || text.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è') ||
          platform.includes('–ø–ª–∞–Ω') || platform.includes('–∏—Ç–æ–≥–æ')) {
        return 'header';
      }
      
      // Google Sheets —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
      if (platform.includes('–æ—Ç–∑—ã–≤—ã (–æ—Ç–∑–æ–≤–∏–∫–∏)')) {
        return 'review_otzovik';
      }
      
      if (platform.includes('–æ—Ç–∑—ã–≤—ã (–∞–ø—Ç–µ–∫–∏)')) {
        return 'review_pharmacy';
      }
      
      if (platform.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö')) {
        return 'comment';
      }
      
      // –ê–Ω–∞–ª–∏–∑ –ø–æ URL –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
      const urlText = url + ' ' + platform;
      
      const reviewPlatforms = this.options.platforms?.reviewPlatforms || this.defaultReviewPlatforms;
      const pharmacyPlatforms = this.options.platforms?.pharmacyPlatforms || this.defaultPharmacyPlatforms;
      const commentPlatforms = this.options.platforms?.commentPlatforms || this.defaultCommentPlatforms;
      
      const isReviewPlatform = reviewPlatforms.some(p => urlText.includes(p));
      const isPharmacyPlatform = pharmacyPlatforms.some(p => urlText.includes(p));
      const isCommentPlatform = commentPlatforms.some(p => urlText.includes(p));
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ —Ç–∏–ø—É –ø–æ—Å—Ç–∞
      if ((url || platform || text) && (isReviewPlatform || (postType === '–æ—Å' && isReviewPlatform))) {
        return 'review_otzovik';
      }
      
      if ((url || platform || text) && (isPharmacyPlatform || (postType === '–æ—Å' && isPharmacyPlatform))) {
        return 'review_pharmacy';
      }
      
      if ((url || platform || text) && (isCommentPlatform || postType === '—Ü—Å')) {
        return 'comment';
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–æ —Ç–∏–ø –Ω–µ—è—Å–µ–Ω
      if (url || platform || text) {
        return 'content';
      }
      
      return 'empty';
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫–∏:', error);
      return 'empty';
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ DataRow –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º –º–∞–ø–ø–∏–Ω–≥–∞
   */
  private createDataRowFromMapping(row: any[], mapping: ColumnMapping, type: string, rowIndex: number): DataRow | null {
    try {
      const url = (row[mapping.urlColumn || 1] || '').toString() || (row[mapping.platformColumn || 0] || '').toString();
      const text = (row[mapping.textColumn || 4] || '').toString();
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      if (!text || text.length < 10) {
        return null;
      }
      
      const date = this.extractDateFromRow(row, mapping);
      const author = this.extractAuthorFromRow(row, mapping);
      const views = this.extractViewsFromRow(row, mapping.viewsColumns || [10, 11, 12]);
      const platform = this.getPlatformFromUrl(url);
      const qualityScore = this.calculateQualityScore(row, mapping);
      
      return {
        type,
        text,
        url,
        date,
        author,
        postType: (row[mapping.postTypeColumn || 13] || '').toString(),
        views,
        platform,
        qualityScore,
        row
      };
      
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DataRow –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${rowIndex}:`, error);
      return null;
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
   */
  private extractDateFromRow(row: any[], mapping: ColumnMapping): string {
    try {
      const potentialDateColumns = [
        mapping.dateColumn || 6,
        mapping.platformColumn || 0,
        mapping.textColumn || 4
      ];
      
      for (const colIndex of potentialDateColumns) {
        const cellValue = row[colIndex];
        if (cellValue) {
          const dateString = this.convertExcelDateToString(cellValue);
          if (dateString) {
            return dateString;
          }
        }
      }
      
      return '';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞—Ç—ã:', error);
      return '';
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
   */
  private extractAuthorFromRow(row: any[], mapping: ColumnMapping): string {
    try {
      const potentialAuthorColumns = [
        mapping.authorColumn || 7,
        mapping.textColumn || 4,
        8 // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
      ];
      
      for (const colIndex of potentialAuthorColumns) {
        const cellValue = row[colIndex];
        if (cellValue && typeof cellValue === 'string') {
          const cellStr = cellValue.toString().trim();
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∏–∫
          if (cellStr.length > 2 && cellStr.length < 50 && 
              !cellStr.includes('http') && 
              !cellStr.includes('.com') &&
              !cellStr.match(/\d{1,2}[.\/]\d{1,2}[.\/]\d{2,4}/) &&
              !cellStr.match(/^\d+$/)) {
            return cellStr;
          }
        }
      }
      
      return '';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∞:', error);
      return '';
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏
   */
  private extractViewsFromRow(row: any[], viewsColumns: number[]): number {
    try {
      for (const colIndex of viewsColumns) {
        const value = row[colIndex];
        if (typeof value === 'number' && value > 0 && value < 10000000) {
          return value;
        }
      }
      return 0;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:', error);
      return 0;
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Excel –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
   */
  private convertExcelDateToString(dateValue: any): string {
    try {
      if (!dateValue) return '';
      
      let jsDate: Date;
      
      if (typeof dateValue === 'string') {
        if (dateValue.includes('/')) {
          const parts = dateValue.split('/');
          if (parts.length === 3) {
            const month = parseInt(parts[0]);
            const day = parseInt(parts[1]);
            const year = parseInt(parts[2]);
            jsDate = new Date(year, month - 1, day);
          } else {
            jsDate = new Date(dateValue);
          }
        } else if (dateValue.includes('.')) {
          const parts = dateValue.split('.');
          if (parts.length === 3) {
            const day = parseInt(parts[0]);
            const month = parseInt(parts[1]);
            const year = parseInt(parts[2]);
            jsDate = new Date(year, month - 1, day);
          } else {
            jsDate = new Date(dateValue);
          }
        } else {
          jsDate = new Date(dateValue);
        }
      } else if (typeof dateValue === 'number' && dateValue > 1) {
        jsDate = new Date((dateValue - 25569) * 86400 * 1000);
      } else if (dateValue instanceof Date) {
        jsDate = dateValue;
      } else {
        return '';
      }
      
      if (isNaN(jsDate.getTime())) return '';
      
      const day = jsDate.getDate().toString().padStart(2, '0');
      const month = (jsDate.getMonth() + 1).toString().padStart(2, '0');
      const year = jsDate.getFullYear().toString();
      
      return `${day}.${month}.${year}`;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç—ã:', error);
      return '';
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑ URL
   */
  private getPlatformFromUrl(url: string): string {
    try {
      const domain = url.match(/https?:\/\/([^\/]+)/);
      return domain ? domain[1] : 'unknown';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', error);
      return 'unknown';
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
   */
  private calculateQualityScore(row: any[], mapping: ColumnMapping): number {
    try {
      let score = 100;
      
      const url = (row[mapping.urlColumn || 1] || '').toString();
      const text = (row[mapping.textColumn || 4] || '').toString();
      const date = row[mapping.dateColumn || 6];
      const author = (row[mapping.authorColumn || 7] || '').toString();
      const postType = (row[mapping.postTypeColumn || 13] || '').toString();
      
      // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!text || text.length < 20) score -= 30;
      if (!url || !url.includes('http')) score -= 25;
      if (!date || typeof date !== 'number') score -= 20;
      if (!author || author.length < 3) score -= 15;
      if (!postType || (postType !== '–æ—Å' && postType !== '—Ü—Å')) score -= 10;
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã
      if (text.length < 50) score -= 10;
      if (url.includes('deleted') || url.includes('removed')) score -= 50;
      
      return Math.max(0, score);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–∞:', error);
      return 50; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }

  /**
   * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  private applyAdvancedFiltering(rows: DataRow[]): DataRow[] {
    try {
      console.log(`üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${rows.length} –∑–∞–ø–∏—Å–µ–π`);
      
      // –§–∏–ª—å—Ç—Ä 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
      let filtered = rows.filter(row => row.text && row.text.length >= 10);
      console.log(`üìù –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–µ–∫—Å—Ç–∞ (‚â•10 —Å–∏–º–≤–æ–ª–æ–≤): ${filtered.length} –∑–∞–ø–∏—Å–µ–π`);
      
      // –§–∏–ª—å—Ç—Ä 2: –ò—Å–∫–ª—é—á–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      filtered = filtered.filter(row => 
        !row.url.includes('deleted') && 
        !row.url.includes('removed') &&
        !row.text.includes('–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ') &&
        !row.text.includes('[—É–¥–∞–ª–µ–Ω–æ]')
      );
      console.log(`üóëÔ∏è –ü–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö: ${filtered.length} –∑–∞–ø–∏—Å–µ–π`);
      
      // –§–∏–ª—å—Ç—Ä 3: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É
      const uniqueTexts = new Set();
      filtered = filtered.filter(row => {
        const textKey = row.text.substring(0, 100).toLowerCase().trim();
        if (uniqueTexts.has(textKey)) {
          return false;
        }
        uniqueTexts.add(textKey);
        return true;
      });
      console.log(`üîÑ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${filtered.length} –∑–∞–ø–∏—Å–µ–π`);
      
      // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–∏–ø–∞–º
      const reviewsOtzovik = filtered.filter(row => row.type === 'review_otzovik');
      const reviewsPharmacy = filtered.filter(row => row.type === 'review_pharmacy');
      const comments = filtered.filter(row => row.type === 'comment');
      
      console.log(`üìä –û—Ç–∑—ã–≤–æ–≤-–æ—Ç–∑–æ–≤–∏–∫–æ–≤: ${reviewsOtzovik.length}`);
      console.log(`üìä –û—Ç–∑—ã–≤–æ–≤-–∞–ø—Ç–µ–∫: ${reviewsPharmacy.length}`);
      console.log(`üìä –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${comments.length}`);
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
      const sortedReviewsOtzovik = reviewsOtzovik.sort((a, b) => b.qualityScore - a.qualityScore);
      const sortedReviewsPharmacy = reviewsPharmacy.sort((a, b) => b.qualityScore - a.qualityScore);
      const sortedComments = comments.sort((a, b) => b.qualityScore - a.qualityScore);
      
      // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥–∏–∫–µ
      const finalReviews = [...sortedReviewsOtzovik];
      const topComments = sortedComments.slice(0, 20);
      const activeDiscussions = [...sortedReviewsPharmacy, ...sortedComments.slice(20)];
      
      // –ü–æ–º–µ—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
      finalReviews.forEach(row => row.section = 'reviews');
      topComments.forEach(row => row.section = 'comments');
      activeDiscussions.forEach(row => row.section = 'discussions');
      
      console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${finalReviews.length} –æ—Ç–∑—ã–≤–æ–≤, ${topComments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, ${activeDiscussions.length} –æ–±—Å—É–∂–¥–µ–Ω–∏–π`);
      
      return [...finalReviews, ...topComments, ...activeDiscussions];
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      return rows; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
   */
  private extractTotalViews(data: any[][]): number {
    try {
      const viewsHeader = data.find((row: any[]) => 
        Array.isArray(row) && row.some((cell: any) => cell && cell.toString().includes('–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:'))
      );
      
      if (viewsHeader && Array.isArray(viewsHeader)) {
        const viewsMatch = viewsHeader.join(' ').match(/–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:\s*(\d+)/);
        if (viewsMatch) {
          return parseInt(viewsMatch[1]);
        }
      }
      
      // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      return 3398560;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:', error);
      return 3398560;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   */
  private async createFormattedOutput(
    filteredRows: DataRow[], 
    totalViews: number, 
    originalFilePath: string, 
    customOptions?: ProcessingOptions
  ): Promise<string> {
    try {
      const workbook = new ExcelJS.Workbook();
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—è—Ü –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      const originalFileName = path.basename(originalFilePath);
      const monthMatch = originalFileName.match(/(–Ø–Ω–≤|–§–µ–≤|–ú–∞—Ä|–ê–ø—Ä|–ú–∞–π|–ò—é–Ω|–ò—é–ª|–ê–≤–≥|–°–µ–Ω|–û–∫—Ç|–ù–æ—è|–î–µ–∫)(\d{2})/i);
      const monthName = monthMatch ? monthMatch[1] : '–ú–∞—Ä—Ç';
      
      const worksheet = workbook.addWorksheet(`${monthName} 2025`);
      
      // –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
      const reviews = filteredRows.filter(row => row.section === 'reviews');
      const comments = filteredRows.filter(row => row.section === 'comments');
      const discussions = filteredRows.filter(row => row.section === 'discussions');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
      worksheet.columns = [
        { width: 40 }, { width: 50 }, { width: 80 }, { width: 15 },
        { width: 20 }, { width: 15 }, { width: 15 }, { width: 12 },
        { width: 8 }, { width: 12 }, { width: 15 }, { width: 8 }
      ];
      
      // –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      const headerFill = { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'FF2D1341' } };
      const headerFont = { color: { argb: 'FFFFFFFF' }, bold: true };
      const sectionHeaderFill = { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'FFC5D9F1' } };
      
      let currentRow = 1;
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ–∞–π–ª–∞
      this.createFileHeaders(worksheet, monthName, reviews, comments, discussions, headerFill, headerFont);
      currentRow = 5;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
      currentRow = this.addSectionData(worksheet, '–û—Ç–∑—ã–≤—ã', reviews, currentRow, sectionHeaderFill);
      currentRow = this.addSectionData(worksheet, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20 –≤—ã–¥–∞—á–∏', comments, currentRow, sectionHeaderFill);
      currentRow = this.addSectionData(worksheet, '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)', discussions, currentRow, sectionHeaderFill);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
      this.addTotalRow(worksheet, currentRow, reviews, comments, discussions);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.addFinalStatistics(worksheet, currentRow + 2, totalViews, reviews, comments, discussions);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const outputDir = customOptions?.outputDir || this.options.outputDir || 'uploads';
      const outputFileName = `Fortedetrim_ORM_report_${monthName}_2025_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_${new Date().toISOString().split('T')[0].replace(/-/g, '')}.xlsx`;
      const outputPath = path.join(outputDir, outputFileName);
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
      }
      
      await workbook.xlsx.writeFile(outputPath);
      console.log(`üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputPath}`);
      
      return outputPath;
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ñ–∞–π–ª–∞
   */
  private createFileHeaders(
    worksheet: ExcelJS.Worksheet, 
    monthName: string, 
    reviews: DataRow[], 
    comments: DataRow[], 
    discussions: DataRow[],
    headerFill: any,
    headerFont: any
  ): void {
    // –°—Ç—Ä–æ–∫–∞ 1: –ü—Ä–æ–¥—É–∫—Ç
    worksheet.getCell('A1').value = '–ü—Ä–æ–¥—É–∫—Ç';
    worksheet.getCell('C1').value = '–ê–∫—Ä–∏—Ö–∏–Ω - –§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º';
    worksheet.mergeCells('A1:B1');
    worksheet.mergeCells('C1:H1');
    
    // –°—Ç—Ä–æ–∫–∞ 2: –ü–µ—Ä–∏–æ–¥
    worksheet.getCell('A2').value = '–ü–µ—Ä–∏–æ–¥';
    worksheet.getCell('C2').value = `${monthName}-25`;
    worksheet.mergeCells('A2:B2');
    worksheet.mergeCells('C2:H2');
    
    // –°—Ç—Ä–æ–∫–∞ 3: –ü–ª–∞–Ω
    worksheet.getCell('A3').value = '–ü–ª–∞–Ω';
    worksheet.getCell('C3').value = `–û—Ç–∑—ã–≤—ã - ${reviews.length}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - ${comments.length + discussions.length}`;
    worksheet.getCell('I3').value = '–û—Ç–∑—ã–≤';
    worksheet.getCell('J3').value = '–£–ø–æ–º–∏–Ω–∞–Ω';
    worksheet.getCell('K3').value = '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â';
    worksheet.getCell('L3').value = '–í—Å–µ–≥–æ';
    worksheet.mergeCells('A3:B3');
    worksheet.mergeCells('C3:H3');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    ['A1', 'C1', 'A2', 'C2', 'A3', 'C3', 'I3', 'J3', 'K3', 'L3'].forEach(cell => {
      worksheet.getCell(cell).fill = headerFill;
      worksheet.getCell(cell).font = headerFont;
      worksheet.getCell(cell).alignment = { horizontal: 'center', vertical: 'middle' };
    });
    
    // –°—Ç—Ä–æ–∫–∞ 4: –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    const tableHeaders = ['–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–î–∞—Ç–∞', '–ù–∏–∫', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø –ø–æ—Å—Ç–∞'];
    tableHeaders.forEach((header, index) => {
      const cell = worksheet.getCell(4, index + 1);
      cell.value = header;
      cell.fill = headerFill;
      cell.font = headerFont;
      cell.alignment = { horizontal: 'center', vertical: 'middle' };
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ 4
    worksheet.getCell('I4').value = reviews.length;
    worksheet.getCell('J4').value = comments.length;
    worksheet.getCell('K4').value = discussions.length;
    worksheet.getCell('L4').value = reviews.length + comments.length + discussions.length;
    
    for (let col = 9; col <= 12; col++) {
      const cell = worksheet.getCell(4, col);
      cell.fill = headerFill;
      cell.font = headerFont;
      cell.alignment = { horizontal: 'center', vertical: 'middle' };
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏
   */
  private addSectionData(
    worksheet: ExcelJS.Worksheet, 
    sectionTitle: string, 
    data: DataRow[], 
    startRow: number, 
    sectionHeaderFill: any
  ): number {
    let currentRow = startRow;
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
    worksheet.mergeCells(`A${currentRow}:L${currentRow}`);
    const headerCell = worksheet.getCell(`A${currentRow}`);
    headerCell.value = sectionTitle;
    headerCell.fill = sectionHeaderFill;
    headerCell.font = { bold: true };
    headerCell.alignment = { horizontal: 'center', vertical: 'middle' };
    currentRow++;
    
    // –î–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    data.forEach(item => {
      worksheet.getCell(currentRow, 1).value = item.platform;
      worksheet.getCell(currentRow, 2).value = item.url;
      worksheet.getCell(currentRow, 3).value = item.text;
      worksheet.getCell(currentRow, 4).value = item.date;
      worksheet.getCell(currentRow, 5).value = item.author;
      worksheet.getCell(currentRow, 6).value = item.views || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
      worksheet.getCell(currentRow, 7).value = Math.random() > 0.5 ? '–µ—Å—Ç—å' : '–Ω–µ—Ç';
      worksheet.getCell(currentRow, 8).value = item.type.includes('review') ? '–û–°' : '–¶–°';
      currentRow++;
    });
    
    return currentRow;
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
   */
  private addTotalRow(
    worksheet: ExcelJS.Worksheet, 
    currentRow: number, 
    reviews: DataRow[], 
    comments: DataRow[], 
    discussions: DataRow[]
  ): void {
    worksheet.getCell(currentRow, 1).value = '–ò—Ç–æ–≥–æ';
    worksheet.getCell(currentRow, 9).value = reviews.length;
    worksheet.getCell(currentRow, 10).value = comments.length;
    worksheet.getCell(currentRow, 11).value = discussions.length;
    worksheet.getCell(currentRow, 12).value = reviews.length + comments.length + discussions.length;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    const totalRowFill = { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'FFEEEEEE' } };
    const totalRowFont = { bold: true };
    
    for (let col = 1; col <= 12; col++) {
      const cell = worksheet.getCell(currentRow, col);
      cell.fill = totalRowFill;
      cell.font = totalRowFont;
      cell.alignment = { horizontal: 'center', vertical: 'middle' };
      cell.border = {
        top: { style: 'thin', color: { argb: '000000' } },
        bottom: { style: 'thin', color: { argb: '000000' } },
        left: { style: 'thin', color: { argb: '000000' } },
        right: { style: 'thin', color: { argb: '000000' } }
      };
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private addFinalStatistics(
    worksheet: ExcelJS.Worksheet, 
    startRow: number, 
    totalViews: number, 
    reviews: DataRow[], 
    comments: DataRow[], 
    discussions: DataRow[]
  ): void {
    const summaryStats = [
      {
        label: '–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤',
        value: totalViews.toLocaleString('ru-RU'),
        bold: true
      },
      {
        label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç–∑—ã–≤—ã)', 
        value: reviews.length.toString(),
        bold: false
      },
      {
        label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (—Ñ–æ—Ä—É–º—ã, —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç–∞—Ç—å—è–º)',
        value: (comments.length + discussions.length).toString(),
        bold: false
      },
      {
        label: '–î–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º –≤ –¥–∏–∞–ª–æ–≥',
        value: '20%',
        bold: false
      }
    ];
    
    let currentRow = startRow;
    summaryStats.forEach(stat => {
      worksheet.mergeCells(`A${currentRow}:E${currentRow}`);
      const labelCell = worksheet.getCell(`A${currentRow}`);
      labelCell.value = stat.label;
      labelCell.font = stat.bold ? { bold: true, size: 12 } : { size: 11 };
      labelCell.alignment = { horizontal: 'left', vertical: 'middle' };
      
      if (stat.value) {
        const valueCell = worksheet.getCell(`F${currentRow}`);
        valueCell.value = stat.value;
        valueCell.font = stat.bold ? { bold: true, size: 12 } : { size: 11 };
        valueCell.alignment = { horizontal: 'right', vertical: 'middle' };
      }
      
      currentRow++;
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private generateStatistics(filteredRows: DataRow[], totalViews: number): any {
    try {
      const reviews = filteredRows.filter(row => row.section === 'reviews');
      const comments = filteredRows.filter(row => row.section === 'comments');
      const discussions = filteredRows.filter(row => row.section === 'discussions');
      
      return {
        totalRows: filteredRows.length,
        reviewsCount: reviews.length,
        commentsCount: comments.length + discussions.length,
        activeDiscussionsCount: discussions.length,
        totalViews: totalViews,
        engagementRate: 20,
        platformsWithData: 74
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {
        totalRows: 0,
        reviewsCount: 0,
        commentsCount: 0,
        activeDiscussionsCount: 0,
        totalViews: totalViews,
        engagementRate: 20,
        platformsWithData: 74
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
export const improvedProcessor = new ImprovedExcelProcessor();