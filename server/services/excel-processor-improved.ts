import * as XLSX from 'xlsx';
import ExcelJS from 'exceljs';
import type { ProcessingStats } from '@shared/schema';

interface DataRow {
  –ø–ª–æ—â–∞–¥–∫–∞: string;
  —Ç–µ–º–∞: string;
  —Ç–µ–∫—Å—Ç: string;
  –¥–∞—Ç–∞: string | Date;
  –Ω–∏–∫: string;
  –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: number | string;
  –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: string;
  —Ç–∏–ø–ü–æ—Å—Ç–∞: string;
}

export class ExcelProcessor {
  private getCleanValue(value: any): string {
    if (value === null || value === undefined) return '';
    return value.toString().trim();
  }

  private cleanViews(value: any): number | string {
    if (typeof value === 'number' && value > 0) {
      return Math.round(value);
    }
    
    if (typeof value === 'string') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "3/7/25"
      const dateMatch = value.match(/^(\d{1,2})\/(\d{1,2})\/(\d{2,4})$/);
      if (dateMatch) {
        const month = parseInt(dateMatch[1]);
        const day = parseInt(dateMatch[2]);
        let year = parseInt(dateMatch[3]);
        
        // –ï—Å–ª–∏ –≥–æ–¥ –¥–≤—É–∑–Ω–∞—á–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º 2000
        if (year < 100) {
          year += 2000;
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Excel serial number
        const date = new Date(year, month - 1, day);
        const excelEpoch = new Date(1900, 0, 1);
        const daysDiff = Math.floor((date.getTime() - excelEpoch.getTime()) / (1000 * 60 * 60 * 24));
        
        // Excel —Å—á–∏—Ç–∞–µ—Ç 1900 –≥–æ–¥ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–º (—Ö–æ—Ç—è —ç—Ç–æ –Ω–µ —Ç–∞–∫), –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º 2
        return daysDiff + 2;
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —á–∏—Å–ª–æ
      const str = value.toString().replace(/[\s,'"]/g, '');
      const num = parseFloat(str);
      if (!isNaN(num) && num > 0) {
        return Math.round(num);
      }
    }
    
    return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
  }

  async processExcelFile(buffer: Buffer, originalFileName: string): Promise<{ workbook: any; statistics: ProcessingStats }> {
    try {
      console.log('üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', originalFileName);
      
      // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
      const workbook = XLSX.read(buffer, { 
        type: 'buffer',
        cellDates: true,
        cellNF: false,
        cellText: false
      });
      
      console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã:', workbook.SheetNames);
      
      // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –ª–∏—Å—Ç
      const monthSheet = this.findMonthSheet(workbook.SheetNames);
      if (!monthSheet) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –º–µ—Å—è—Ü–∞');
      }
      
      console.log('üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç:', monthSheet);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      const worksheet = workbook.Sheets[monthSheet];
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { 
        header: 1, 
        defval: '',
        raw: false // –í–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–µ–ª
      }) as any[][];
      
      console.log('üìà –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞:', jsonData.length);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
      const { reviews, comments, active, statistics } = this.extractDataCorrectly(jsonData);
      
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:', {
        reviews: reviews.length,
        comments: comments.length,
        active: active.length,
        total: statistics.totalRows,
        totalViews: statistics.totalViews
      });
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...');
      const formattedWorkbook = await this.createFormattedReport(
        { –æ—Ç–∑—ã–≤—ã: reviews, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: comments, –∞–∫—Ç–∏–≤–Ω—ã–µ: active },
        statistics,
        monthSheet
      );
      
      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      
      return {
        workbook: formattedWorkbook,
        statistics
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  private findMonthSheet(sheetNames: string[]): string | null {
    const monthPatterns = ['–º–∞—Ä—Ç', '–º–∞—Ä', 'march', 'mar'];
    return sheetNames.find(name => 
      monthPatterns.some(pattern => name.toLowerCase().includes(pattern))
    ) || sheetNames[0];
  }

  private extractDataCorrectly(jsonData: any[][]): { 
    reviews: DataRow[], 
    comments: DataRow[], 
    active: DataRow[], 
    statistics: ProcessingStats 
  } {
    const reviews: DataRow[] = [];
    const comments: DataRow[] = [];
    const active: DataRow[] = [];
    
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
    for (let i = 0; i < jsonData.length; i++) {
      const row = jsonData[i];
      if (!row || !Array.isArray(row) || row.length === 0) continue;
      
      const firstCell = this.getCleanValue(row[0]).toLowerCase();
      
      // –û—Ç–∑—ã–≤—ã - —Å—Ç—Ä–æ–∫–∏ —Å "–æ—Ç–∑—ã–≤" –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
      if (firstCell.includes('–æ—Ç–∑—ã–≤') && !firstCell.includes('–∫–∞—Ä—Ç–æ—á–µ–∫')) {
        const rowData = this.extractReviewRow(row, i + 1);
        if (rowData) {
          reviews.push(rowData);
        }
      }
      
      // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - —Å—Ç—Ä–æ–∫–∏ —Å "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏" –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ  
      else if (firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') && firstCell.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö')) {
        const rowData = this.extractCommentRow(row, i + 1);
        if (rowData) {
          comments.push(rowData);
        }
      }
    }
    
    console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ: –û—Ç–∑—ã–≤—ã=${reviews.length}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏=${comments.length}`);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const statistics = this.calculateStatistics(reviews, comments, active);
    
    return { reviews, comments, active, statistics };
  }

  private extractReviewRow(row: any[], rowIndex: number): DataRow | null {
    try {
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤: [–¢–∏–ø, –ü–ª–æ—â–∞–¥–∫–∞, –ü—Ä–æ–¥—É–∫—Ç, –°—Å—ã–ª–∫–∞, –¢–µ–∫—Å—Ç, –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ, –î–∞—Ç–∞, –ù–∏–∫]
      const –ø–ª–æ—â–∞–¥–∫–∞ = this.getCleanValue(row[1]);
      const –ø—Ä–æ–¥—É–∫—Ç = this.getCleanValue(row[2]);
      const —Ç–µ–∫—Å—Ç = this.getCleanValue(row[4]);
      const –¥–∞—Ç–∞ = row[6] || '';
      const –Ω–∏–∫ = this.getCleanValue(row[7]);
      
      // –î–ª—è –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã - —ç—Ç–æ –¥–∞—Ç–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ 6, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Excel serial number
      const –ø—Ä–æ—Å–º–æ—Ç—Ä—ã = this.cleanViews(row[6]);
      
      if (!–ø–ª–æ—â–∞–¥–∫–∞ && !—Ç–µ–∫—Å—Ç) return null;
      
      return {
        –ø–ª–æ—â–∞–¥–∫–∞,
        —Ç–µ–º–∞: –ø—Ä–æ–¥—É–∫—Ç,
        —Ç–µ–∫—Å—Ç,
        –¥–∞—Ç–∞: –¥–∞—Ç–∞,
        –Ω–∏–∫,
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
        –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        —Ç–∏–ø–ü–æ—Å—Ç–∞: '–û—Ç–∑—ã–≤—ã'
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex}:`, error);
      return null;
    }
  }

  private extractCommentRow(row: any[], rowIndex: number): DataRow | null {
    try {
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: [–¢–∏–ø, –ü–ª–æ—â–∞–¥–∫–∞, –ü—Ä–æ–¥—É–∫—Ç, –°—Å—ã–ª–∫–∞, –¢–µ–∫—Å—Ç, _, –î–∞—Ç–∞, –ù–∏–∫, –ê–≤—Ç–æ—Ä, –°—Ç–∞—Ä—Ç, –ö–æ–Ω–µ—Ü, –ü–æ–ª—É—á–µ–Ω–æ, –í–æ–≤–ª–µ—á–µ–Ω–∏–µ]
      const –ø–ª–æ—â–∞–¥–∫–∞ = this.getCleanValue(row[1]);
      const –ø—Ä–æ–¥—É–∫—Ç = this.getCleanValue(row[2]);
      const —Ç–µ–∫—Å—Ç = this.getCleanValue(row[4]);
      const –¥–∞—Ç–∞ = row[6] || '';
      const –Ω–∏–∫ = this.getCleanValue(row[7]);
      
      // –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–∞–∫–∂–µ –≤ –∫–æ–ª–æ–Ω–∫–µ 6
      const –ø—Ä–æ—Å–º–æ—Ç—Ä—ã = this.cleanViews(row[6]);
      const –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ = this.getCleanValue(row[12]) || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
      
      if (!–ø–ª–æ—â–∞–¥–∫–∞ && !—Ç–µ–∫—Å—Ç) return null;
      
      return {
        –ø–ª–æ—â–∞–¥–∫–∞,
        —Ç–µ–º–∞: –ø—Ä–æ–¥—É–∫—Ç,
        —Ç–µ–∫—Å—Ç,
        –¥–∞—Ç–∞: –¥–∞—Ç–∞,
        –Ω–∏–∫,
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
        –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ,
        —Ç–∏–ø–ü–æ—Å—Ç–∞: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20 –≤—ã–¥–∞—á–∏'
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex}:`, error);
      return null;
    }
  }

  private calculateStatistics(reviews: DataRow[], comments: DataRow[], active: DataRow[]): ProcessingStats {
    const allData = [...reviews, ...comments, ...active];
    
    // –°—É–º–º–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
    const totalViews = allData.reduce((sum, row) => {
      if (typeof row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã === 'number') {
        return sum + row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã;
      }
      return sum;
    }, 0);
    
    // –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
    const recordsWithViews = allData.filter(row => 
      typeof row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã === 'number' && row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã > 0
    ).length;
    
    // –ü—Ä–æ—Ü–µ–Ω—Ç –ø–ª–æ—â–∞–¥–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏
    const platformsWithData = allData.length > 0 ? 
      Math.round((recordsWithViews / allData.length) * 100) : 0;
    
    // –°—á–∏—Ç–∞–µ–º –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const discussionData = [...comments, ...active];
    const engagedDiscussions = discussionData.filter(row => 
      row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ && 
      row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ !== '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' && 
      (row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.toLowerCase().includes('–µ—Å—Ç—å') || 
       row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.toLowerCase().includes('–¥–∞') ||
       row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.toLowerCase().includes('+'))
    ).length;
    
    const engagementRate = discussionData.length > 0 ? 
      Math.round((engagedDiscussions / discussionData.length) * 100) : 0;
    
    return {
      totalRows: allData.length,
      reviewsCount: reviews.length,
      commentsCount: comments.length,
      activeDiscussionsCount: active.length,
      totalViews,
      engagementRate,
      platformsWithData
    };
  }

  private async createFormattedReport(
    groupedData: { –æ—Ç–∑—ã–≤—ã: DataRow[]; –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: DataRow[]; –∞–∫—Ç–∏–≤–Ω—ã–µ: DataRow[] },
    statistics: ProcessingStats,
    sheetName: string
  ): Promise<any> {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...');
    
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('–ú–∞—Ä—Ç 2025');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    worksheet.columns = [
      { width: 25 }, // –ü–ª–æ—â–∞–¥–∫–∞
      { width: 20 }, // –¢–µ–º–∞ 
      { width: 50 }, // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      { width: 12 }, // –î–∞—Ç–∞
      { width: 15 }, // –ù–∏–∫
      { width: 12 }, // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
      { width: 12 }, // –í–æ–≤–ª–µ—á–µ–Ω–∏–µ
      { width: 12 }, // –¢–∏–ø –ø–æ—Å—Ç–∞
    ];

    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–ø–∫–∏ –æ—Ç—á–µ—Ç–∞...');
    // –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–ø–∫–∏ –æ—Ç—á–µ—Ç–∞
    this.createReportHeader(worksheet, statistics);

    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã...');
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
    this.createTableHeaders(worksheet);

    let currentRow = 5;

    console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤...');
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    currentRow = this.addDataSection(worksheet, '–û—Ç–∑—ã–≤—ã', groupedData.–æ—Ç–∑—ã–≤—ã, currentRow);
    
    console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...');
    currentRow = this.addDataSection(worksheet, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20 –≤—ã–¥–∞—á–∏', groupedData.–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, currentRow);
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (groupedData.–∞–∫—Ç–∏–≤–Ω—ã–µ.length > 0) {
      console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π...');
      currentRow = this.addDataSection(worksheet, '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)', groupedData.–∞–∫—Ç–∏–≤–Ω—ã–µ, currentRow);
    }

    console.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π...');
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    this.addSummaryMetrics(worksheet, statistics, currentRow + 2);

    console.log('‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω');
    return workbook;
  }

  private createReportHeader(worksheet: ExcelJS.Worksheet, statistics: ProcessingStats): void {
    const headerFill = { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'FF2D1341' } };
    const headerFont = { name: 'Arial', size: 12, bold: true, color: { argb: 'FFFFFFFF' } };
    const centerAlign = { horizontal: 'center' as const, vertical: 'middle' as const, wrapText: true };
    
    // –°—Ç—Ä–æ–∫–∞ 1: –ü—Ä–æ–¥—É–∫—Ç
    worksheet.mergeCells('A1:B1');
    worksheet.getCell('A1').value = '–ü—Ä–æ–¥—É–∫—Ç';
    worksheet.mergeCells('C1:H1');
    worksheet.getCell('C1').value = '–ê–∫—Ä–∏—Ö–∏–Ω - –§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º';
    
    // –°—Ç—Ä–æ–∫–∞ 2: –ü–µ—Ä–∏–æ–¥
    worksheet.mergeCells('A2:B2');
    worksheet.getCell('A2').value = '–ü–µ—Ä–∏–æ–¥';
    worksheet.mergeCells('C2:H2');
    worksheet.getCell('C2').value = '–ú–∞—Ä—Ç 2025';
    
    // –°—Ç—Ä–æ–∫–∞ 3: –ü–ª–∞–Ω
    worksheet.mergeCells('A3:B3');
    worksheet.getCell('A3').value = '–ü–ª–∞–Ω';
    worksheet.mergeCells('C3:H3');
    worksheet.getCell('C3').value = `–û—Ç–∑—ã–≤—ã - ${statistics.reviewsCount}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - ${statistics.commentsCount}`;

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ —à–∞–ø–∫–µ
    for (let row = 1; row <= 3; row++) {
      for (let col = 1; col <= 8; col++) {
        const cell = worksheet.getCell(row, col);
        cell.fill = headerFill;
        cell.font = headerFont;
        cell.alignment = centerAlign;
      }
    }
  }

  private createTableHeaders(worksheet: ExcelJS.Worksheet): void {
    const headers = ['–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–î–∞—Ç–∞', '–ù–∏–∫', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø –ø–æ—Å—Ç–∞'];
    const headerRow = worksheet.getRow(4);
    headerRow.values = headers;
    
    const headerFill = { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'FF2D1341' } };
    const headerFont = { name: 'Arial', size: 9, bold: true, color: { argb: 'FFFFFFFF' } };
    const centerAlign = { horizontal: 'center' as const, vertical: 'middle' as const, wrapText: true };

    headers.forEach((_, index) => {
      const cell = headerRow.getCell(index + 1);
      cell.font = headerFont;
      cell.fill = headerFill;
      cell.alignment = centerAlign;
    });
  }

  private addDataSection(worksheet: ExcelJS.Worksheet, sectionName: string, data: DataRow[], startRow: number): number {
    let currentRow = startRow;

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
    worksheet.mergeCells(`A${currentRow}:H${currentRow}`);
    const sectionCell = worksheet.getCell(`A${currentRow}`);
    sectionCell.value = sectionName;
    sectionCell.font = { name: 'Arial', size: 9, bold: true };
    sectionCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFC5D9F1' } };
    sectionCell.alignment = { horizontal: 'center', vertical: 'middle', wrapText: true };
    worksheet.getRow(currentRow).height = 12;
    currentRow++;

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    data.forEach(row => {
      const dataRow = worksheet.getRow(currentRow);
      dataRow.values = [
        row.–ø–ª–æ—â–∞–¥–∫–∞,
        row.—Ç–µ–º–∞, 
        row.—Ç–µ–∫—Å—Ç,
        row.–¥–∞—Ç–∞,
        row.–Ω–∏–∫,
        row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
        row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ,
        row.—Ç–∏–ø–ü–æ—Å—Ç–∞
      ];
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫ –¥–∞–Ω–Ω—ã—Ö
      dataRow.eachCell((cell: any, colNumber: number) => {
        cell.font = { name: 'Arial', size: 9 };
        if (colNumber === 4 && cell.value) { // –î–∞—Ç–∞
          cell.numFmt = 'dd.mm.yyyy';
        }
        if (colNumber === 6) { // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã - —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
          cell.alignment = { horizontal: 'center', vertical: 'top', wrapText: true };
        } else {
          cell.alignment = { horizontal: 'left', vertical: 'top', wrapText: true };
        }
      });
      
      dataRow.height = 12;
      currentRow++;
    });
    
    return currentRow + 1; // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ —Å–µ–∫—Ü–∏–∏
  }

  private addSummaryMetrics(worksheet: ExcelJS.Worksheet, statistics: ProcessingStats, startRow: number): void {
    const summaryData = [
      ['', '', '', '', '', '', '', ''],
      ['–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', '', '', '', '', statistics.totalViews, '', ''],
      ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç–∑—ã–≤—ã)', '', '', '', '', statistics.reviewsCount, '', ''],
      ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (—Ñ–æ—Ä—É–º—ã, —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç–∞—Ç—å—è–º)', '', '', '', '', statistics.commentsCount, '', ''],
      ['–î–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º –≤ –¥–∏–∞–ª–æ–≥', '', '', '', '', `${statistics.engagementRate}%`, '', ''],
      ['', '', '', '', '', '', '', ''],
      ['*–ë–µ–∑ —É—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–æ–∫ —Å –∑–∞–∫—Ä—ã—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', '', '', '', '', '', '', ''],
      ['–ü–ª–æ—â–∞–¥–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', '', '', '', '', `${statistics.platformsWithData}%`, '', ''],
      ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á—Ç–µ–Ω–∏–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ 30% –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤, —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.', '', '', '', '', '', '', '']
    ];

    summaryData.forEach((rowData, index) => {
      const row = worksheet.getRow(startRow + index);
      row.values = rowData;
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
      if (index === 7) { // –°—Ç—Ä–æ–∫–∞ "–ü–ª–æ—â–∞–¥–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
        row.getCell(1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFFF00' } }; // –ñ–µ–ª—Ç—ã–π —Ñ–æ–Ω
        for (let col = 1; col <= 8; col++) {
          row.getCell(col).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFFF00' } };
        }
      }
      
      row.eachCell((cell: any) => {
        cell.font = { name: 'Arial', size: 9 };
        cell.alignment = { horizontal: 'left', vertical: 'top', wrapText: true };
      });
    });
  }
}