import * as XLSX from 'xlsx';
import ExcelJS from 'exceljs';
import type { ProcessingStats } from '@shared/schema';

interface DataRow {
  –ø–ª–æ—â–∞–¥–∫–∞: string;
  —Ç–µ–º–∞: string;
  —Ç–µ–∫—Å—Ç: string;
  –¥–∞—Ç–∞: string | Date;
  –Ω–∏–∫: string;
  –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: number | string;
  –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: string;
  —Ç–∏–ø–ü–æ—Å—Ç–∞: string;
}



export class ExcelProcessor {
  private getCleanValue(value: any): string {
    if (!value || value === null || value === undefined) return '';
    return String(value).trim();
  }

  private cleanViews(value: any): number | string {
    if (!value || value === null || value === undefined) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    
    // –ï—Å–ª–∏ —É–∂–µ —á–∏—Å–ª–æ, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (typeof value === 'number') {
      return value > 0 ? Math.round(value) : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    }
    
    const str = String(value).trim();
    if (str === '' || str === '-' || str.toLowerCase() === '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö' || str === '0') {
      return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ –Ω–∞–ø—Ä—è–º—É—é
    const num = parseFloat(str.replace(/[\s,'"]/g, ''));
    if (!isNaN(num) && num > 0) {
      return Math.round(num);
    }

    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    return str;
  }

  async processExcelFile(buffer: Buffer, originalFileName: string): Promise<{ workbook: any; statistics: ProcessingStats }> {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞...');
      
      // 1. –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
      const workbook = XLSX.read(buffer, { type: 'buffer' });
      console.log('üìÅ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, –ª–∏—Å—Ç—ã:', workbook.SheetNames);
      
      // 2. –ù–∞—Ö–æ–¥–∏–º –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –º–µ—Å—è—Ü–∞
      const sheetName = this.findMonthSheet(workbook.SheetNames);
      if (!sheetName) {
        throw new Error(`–õ–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –º–µ—Å—è—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã: ${workbook.SheetNames.join(', ')}`);
      }
      console.log('üìä –ù–∞–π–¥–µ–Ω –ª–∏—Å—Ç:', sheetName);
      
      // 3. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];
      console.log('üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–æ–∫:', jsonData.length);
      
      // 4. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      const { reviews, comments, active, statistics } = this.extractDataByFixedRanges(jsonData);
      console.log('üìÇ –ò–∑–≤–ª–µ—á–µ–Ω–æ:', {
        –æ—Ç–∑—ã–≤—ã: reviews.length,
        –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: comments.length,
        –∞–∫—Ç–∏–≤–Ω—ã–µ: active.length
      });
      
      // 5. –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
      const outputWorkbook = await this.createFormattedReport(
        { –æ—Ç–∑—ã–≤—ã: reviews, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: comments, –∞–∫—Ç–∏–≤–Ω—ã–µ: active }, 
        statistics, 
        sheetName
      );
      console.log('üìÑ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
      
      return { workbook: outputWorkbook, statistics };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  private findMonthSheet(sheetNames: string[]): string | null {
    const months = ['–Ø–Ω–≤25', '–§–µ–≤25', '–ú–∞—Ä25', '–ú–∞—Ä—Ç25', '–ê–ø—Ä25', '–ú–∞–π25', '–ò—é–Ω25', '–ò—é–ª25', '–ê–≤–≥25', '–°–µ–Ω25', '–û–∫—Ç25', '–ù–æ—è25', '–î–µ–∫25'];
    return sheetNames.find(name => months.some(month => name.includes(month))) || null;
  }

  private extractDataByFixedRanges(jsonData: any[][]): { 
    reviews: DataRow[], 
    comments: DataRow[], 
    active: DataRow[], 
    statistics: ProcessingStats 
  } {
    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
    const reviews = this.extractRowRange(jsonData, 4, 27, '–û—Ç–∑—ã–≤—ã'); // —Å—Ç—Ä–æ–∫–∏ 5-28
    const comments = this.extractRowRange(jsonData, 29, 48, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20 –≤—ã–¥–∞—á–∏'); // —Å—Ç—Ä–æ–∫–∏ 30-49
    const active: DataRow[] = []; // –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç—ã–µ
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const allData = [...reviews, ...comments, ...active];
    const totalViews = allData.reduce((sum, row) => {
      return sum + (typeof row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã === 'number' ? row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã : 0);
    }, 0);

    const recordsWithViews = allData.filter(row => 
      typeof row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã === 'number' && row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã > 0
    ).length;
    
    const platformsWithData = allData.length > 0 ? Math.round((recordsWithViews / allData.length) * 100) : 0;

    const discussionData = [...comments, ...active];
    const engagedDiscussions = discussionData.filter(row => 
      row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ && (
        row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.toLowerCase().includes('–µ—Å—Ç—å') ||
        row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.toLowerCase().includes('–¥–∞') ||
        row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.toLowerCase().includes('+') ||
        (row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.trim() !== '' && row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ !== '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
      )
    ).length;
    const engagementRate = discussionData.length > 0 ? Math.round((engagedDiscussions / discussionData.length) * 100) : 0;

    const statistics: ProcessingStats = {
      totalRows: allData.length,
      reviewsCount: reviews.length,
      commentsCount: comments.length,
      activeDiscussionsCount: active.length,
      totalViews,
      engagementRate,
      platformsWithData
    };

    return { reviews, comments, active, statistics };
  }

  private extractRowRange(jsonData: any[][], startRow: number, endRow: number, category: string): DataRow[] {
    const rows: DataRow[] = [];
    
    for (let i = startRow; i <= endRow && i < jsonData.length; i++) {
      const row = jsonData[i];
      if (!row || !Array.isArray(row)) continue;

      // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º A-H (0-7)
      const –ø–ª–æ—â–∞–¥–∫–∞ = this.getCleanValue(row[0]);
      const —Ç–µ–º–∞ = this.getCleanValue(row[1]);
      const —Ç–µ–∫—Å—Ç = this.getCleanValue(row[2]);
      const –¥–∞—Ç–∞ = row[3] || '';
      const –Ω–∏–∫ = this.getCleanValue(row[4]);
      const –ø—Ä–æ—Å–º–æ—Ç—Ä—ã = this.cleanViews(row[5]);
      const –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ = this.getCleanValue(row[6]);
      const —Ç–∏–ø–ü–æ—Å—Ç–∞ = category;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (–ø–ª–æ—â–∞–¥–∫–∞ || —Ç–µ–º–∞) {
        rows.push({
          –ø–ª–æ—â–∞–¥–∫–∞,
          —Ç–µ–º–∞,
          —Ç–µ–∫—Å—Ç,
          –¥–∞—Ç–∞,
          –Ω–∏–∫,
          –ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
          –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ,
          —Ç–∏–ø–ü–æ—Å—Ç–∞
        });
      }
    }
    
    return rows;
  }

  private async createFormattedReport(
    groupedData: { –æ—Ç–∑—ã–≤—ã: DataRow[]; –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: DataRow[]; –∞–∫—Ç–∏–≤–Ω—ã–µ: DataRow[] },
    statistics: ProcessingStats,
    sheetName: string
  ): Promise<any> {
    const workbook = new ExcelJS.Workbook();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
    const monthName = this.getMonthName(sheetName);
    const worksheet = workbook.addWorksheet(`${monthName} 2025`);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    worksheet.columns = [
      { width: 25 }, // –ü–ª–æ—â–∞–¥–∫–∞
      { width: 20 }, // –¢–µ–º–∞
      { width: 50 }, // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      { width: 12 }, // –î–∞—Ç–∞
      { width: 15 }, // –ù–∏–∫
      { width: 12 }, // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
      { width: 12 }, // –í–æ–≤–ª–µ—á–µ–Ω–∏–µ
      { width: 12 }, // –¢–∏–ø –ø–æ—Å—Ç–∞
    ];

    // –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–ø–∫–∏ –æ—Ç—á–µ—Ç–∞
    this.createReportHeader(worksheet, monthName);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
    this.createTableHeaders(worksheet);

    let currentRow = 5;

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    currentRow = this.addDataSection(worksheet, '–û—Ç–∑—ã–≤—ã', groupedData.–æ—Ç–∑—ã–≤—ã, currentRow);
    currentRow = this.addDataSection(worksheet, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20 –≤—ã–¥–∞—á–∏', groupedData.–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, currentRow);
    currentRow = this.addDataSection(worksheet, '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)', groupedData.–∞–∫—Ç–∏–≤–Ω—ã–µ, currentRow);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    this.addSummaryMetrics(worksheet, statistics, currentRow + 2);

    return workbook;
  }

  private getMonthName(sheetName: string): string {
    const monthMap: { [key: string]: string } = {
      '–Ø–Ω–≤': '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤': '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä': '–ú–∞—Ä—Ç', '–ú–∞—Ä—Ç': '–ú–∞—Ä—Ç',
      '–ê–ø—Ä': '–ê–ø—Ä–µ–ª—å', '–ú–∞–π': '–ú–∞–π', '–ò—é–Ω': '–ò—é–Ω—å', '–ò—é–ª': '–ò—é–ª—å',
      '–ê–≤–≥': '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω': '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç': '–û–∫—Ç—è–±—Ä—å',
      '–ù–æ—è': '–ù–æ—è–±—Ä—å', '–î–µ–∫': '–î–µ–∫–∞–±—Ä—å'
    };

    for (const [abbr, full] of Object.entries(monthMap)) {
      if (sheetName.includes(abbr)) return full;
    }
    return '–ú–µ—Å—è—Ü';
  }

  private createReportHeader(worksheet: ExcelJS.Worksheet, monthName: string): void {
    const headerFill = { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'FF2D1341' } };
    const headerFont = { name: 'Arial', size: 12, bold: true, color: { argb: 'FFFFFFFF' } };
    const centerAlign = { horizontal: 'center' as const, vertical: 'center' as const, wrapText: true };

    // –°—Ç—Ä–æ–∫–∞ 1: –ü—Ä–æ–¥—É–∫—Ç
    worksheet.mergeCells('A1:B1');
    worksheet.getCell('A1').value = '–ü—Ä–æ–¥—É–∫—Ç';
    worksheet.mergeCells('C1:H1');
    worksheet.getCell('C1').value = '–ê–∫—Ä–∏—Ö–∏–Ω - –§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º';

    // –°—Ç—Ä–æ–∫–∞ 2: –ü–µ—Ä–∏–æ–¥
    worksheet.mergeCells('A2:B2');
    worksheet.getCell('A2').value = '–ü–µ—Ä–∏–æ–¥';
    worksheet.mergeCells('C2:H2');
    worksheet.getCell('C2').value = `${monthName} 2025`;

    // –°—Ç—Ä–æ–∫–∞ 3: –ü–ª–∞–Ω
    worksheet.mergeCells('A3:B3');
    worksheet.getCell('A3').value = '–ü–ª–∞–Ω';
    worksheet.mergeCells('C3:H3');
    worksheet.getCell('C3').value = '–û—Ç–∑—ã–≤—ã - 22, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - 650';

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ —à–∞–ø–∫–µ
    for (let row = 1; row <= 3; row++) {
      for (let col = 1; col <= 8; col++) {
        const cell = worksheet.getCell(row, col);
        cell.fill = headerFill;
        cell.font = headerFont;
        cell.alignment = centerAlign;
      }
    }
  }

  private createTableHeaders(worksheet: ExcelJS.Worksheet): void {
    const headers = ['–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–î–∞—Ç–∞', '–ù–∏–∫', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø –ø–æ—Å—Ç–∞'];
    const headerRow = worksheet.getRow(4);
    headerRow.values = headers;

    const headerFill = { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'FF2D1341' } };
    const headerFont = { name: 'Arial', size: 9, bold: true, color: { argb: 'FFFFFFFF' } };
    const centerAlign = { horizontal: 'center' as const, vertical: 'center' as const, wrapText: true };

    headers.forEach((_, index) => {
      const cell = headerRow.getCell(index + 1);
      cell.font = headerFont;
      cell.fill = headerFill;
      cell.alignment = centerAlign;
    });
  }

  private addDataSection(worksheet: ExcelJS.Worksheet, sectionName: string, data: DataRow[], startRow: number): number {
    let currentRow = startRow;

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
    worksheet.mergeCells(`A${currentRow}:H${currentRow}`);
    const sectionCell = worksheet.getCell(`A${currentRow}`);
    sectionCell.value = sectionName;
    sectionCell.font = { name: 'Arial', size: 9, bold: true };
    sectionCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFC5D9F1' } };
    sectionCell.alignment = { horizontal: 'center', vertical: 'center', wrapText: true };
    worksheet.getRow(currentRow).height = 12;
    currentRow++;

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    data.forEach(row => {
      const dataRow = worksheet.getRow(currentRow);
      dataRow.values = [
        row.–ø–ª–æ—â–∞–¥–∫–∞,
        row.—Ç–µ–º–∞,
        row.—Ç–µ–∫—Å—Ç,
        row.–¥–∞—Ç–∞,
        row.–Ω–∏–∫,
        row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
        row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ,
        row.—Ç–∏–ø–ü–æ—Å—Ç–∞
      ];

      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫ –¥–∞–Ω–Ω—ã—Ö
      dataRow.eachCell((cell: any, colNumber: number) => {
        cell.font = { name: 'Arial', size: 9 };
        if (colNumber === 4 && cell.value) { // –î–∞—Ç–∞
          cell.numFmt = 'dd.mm.yyyy';
        }
        if (colNumber === 6) { // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã - —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
          cell.alignment = { horizontal: 'center', vertical: 'top', wrapText: true };
        } else {
          cell.alignment = { horizontal: 'left', vertical: 'top', wrapText: true };
        }
      });

      dataRow.height = 12;
      currentRow++;
    });

    return currentRow + 1; // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ —Å–µ–∫—Ü–∏–∏
  }

  private addSummaryMetrics(worksheet: ExcelJS.Worksheet, statistics: ProcessingStats, startRow: number): void {
    const summaryFill = { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'FFFCE4D6' } };
    const summaryFont = { name: 'Arial', size: 9, bold: true };
    const leftAlign = { horizontal: 'left' as const, vertical: 'top' as const, wrapText: true };
    const centerAlign = { horizontal: 'center' as const, vertical: 'center' as const };

    const metrics = [
      ['–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', statistics.totalViews],
      ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç–∑—ã–≤—ã)', statistics.reviewsCount],
      ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (—Ñ–æ—Ä—É–º—ã, —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç–∞—Ç—å—è–º)', statistics.commentsCount + statistics.activeDiscussionsCount],
      ['–î–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º –≤ –¥–∏–∞–ª–æ–≥', `${statistics.engagementRate}%`]
    ];

    metrics.forEach((metric, index) => {
      const rowNum = startRow + index;
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ A-E –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
      worksheet.mergeCells(`A${rowNum}:E${rowNum}`);
      worksheet.getCell(`A${rowNum}`).value = metric[0];
      worksheet.getCell(`F${rowNum}`).value = metric[1];

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      for (let col = 1; col <= 5; col++) {
        const cell = worksheet.getCell(rowNum, col);
        cell.fill = summaryFill;
        cell.font = summaryFont;
        cell.alignment = leftAlign;
      }

      const valueCell = worksheet.getCell(rowNum, 6);
      valueCell.fill = summaryFill;
      valueCell.font = summaryFont;
      valueCell.alignment = centerAlign;

      // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      if (index === 3) {
        valueCell.value = statistics.engagementRate / 100;
        valueCell.numFmt = '0%';
      }

      worksheet.getRow(rowNum).height = 12;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–Ω–æ—Å–∫–∏
    const footnoteRow = startRow + 6;
    worksheet.mergeCells(`A${footnoteRow}:F${footnoteRow}`);
    const footnoteCell = worksheet.getCell(`A${footnoteRow}`);
    footnoteCell.value = '*–ë–µ–∑ —É—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–æ–∫ —Å –∑–∞–∫—Ä—ã—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤';
    footnoteCell.font = { name: 'Arial', size: 8, italic: true };
    footnoteCell.alignment = leftAlign;
    worksheet.getRow(footnoteRow).height = 12;

    const footnote2Row = startRow + 7;
    worksheet.mergeCells(`A${footnote2Row}:F${footnote2Row}`);
    const footnote2Cell = worksheet.getCell(`A${footnote2Row}`);
    footnote2Cell.value = `–ü–ª–æ—â–∞–¥–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤                    ${statistics.platformsWithData}%`;
    footnote2Cell.font = { name: 'Arial', size: 8, bold: true };
    footnote2Cell.alignment = leftAlign;
    footnote2Cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFFF00' } };
    worksheet.getRow(footnote2Row).height = 12;

    const footnote3Row = startRow + 8;
    worksheet.mergeCells(`A${footnote3Row}:F${footnote3Row}`);
    const footnote3Cell = worksheet.getCell(`A${footnote3Row}`);
    footnote3Cell.value = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á—Ç–µ–Ω–∏–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ 30% –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤, —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.';
    footnote3Cell.font = { name: 'Arial', size: 8 };
    footnote3Cell.alignment = leftAlign;
    worksheet.getRow(footnote3Row).height = 12;
  }
}