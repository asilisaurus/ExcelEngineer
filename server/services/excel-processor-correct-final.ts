import ExcelJS from 'exceljs';
import path from 'path';
import fs from 'fs';

interface ProcessedData {
  reviews: number;
  comments: number;
  totalViews: number;
  processedRecords: number;
  engagementRate: number;
}

export class ExcelProcessorCorrectFinal {
  private convertExcelDateToString(excelDate: number): string {
    if (!excelDate || typeof excelDate !== 'number') {
      return '';
    }
    
    // Excel date serial number to JavaScript Date
    const jsDate = new Date((excelDate - 25569) * 86400 * 1000);
    
    // Format as DD.MM.YYYY
    const day = jsDate.getDate().toString().padStart(2, '0');
    const month = (jsDate.getMonth() + 1).toString().padStart(2, '0');
    const year = jsDate.getFullYear().toString();
    
    return `${day}.${month}.${year}`;
  }

  private extractTotalViews(headerRow: any[]): number {
    // –ò—â–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
    for (const cell of headerRow) {
      if (cell && typeof cell === 'string' && cell.includes('–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:')) {
        const match = cell.match(/(\d+)/);
        if (match) {
          return parseInt(match[1]);
        }
      }
    }
    return 0;
  }

  private countDataInRange(data: any[][], startRow: number, endRow: number): number {
    let count = 0;
    for (let i = startRow; i <= endRow; i++) {
      if (data[i] && data[i].length > 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö B(1), D(3), E(4)
        const hasData = data[i][1] || data[i][3] || data[i][4];
        if (hasData) {
          count++;
        }
      }
    }
    return count;
  }

  private findCommentSections(data: any[][]): number {
    let commentCount = 0;
    
    // –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 51
    for (let i = 51; i < data.length; i++) {
      if (data[i] && data[i].length > 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
        const hasData = data[i][1] || data[i][3] || data[i][4];
        if (hasData) {
          commentCount++;
        }
      }
    }
    
    return commentCount;
  }

  async processExcelFile(filePath: string): Promise<string> {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞:', filePath);
      
      const workbook = new ExcelJS.Workbook();
      await workbook.xlsx.readFile(filePath);
      
      console.log('üìä –õ–∏—Å—Ç—ã –≤ —Ñ–∞–π–ª–µ:', workbook.worksheets.map(ws => ws.name));
      
      // –ù–∞—Ö–æ–¥–∏–º –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –º–µ—Å—è—Ü–∞
      const months = ["–Ø–Ω–≤25", "–§–µ–≤25", "–ú–∞—Ä25", "–ú–∞—Ä—Ç25", "–ê–ø—Ä25", "–ú–∞–π25", "–ò—é–Ω25", 
                     "–ò—é–ª25", "–ê–≤–≥25", "–°–µ–Ω25", "–û–∫—Ç25", "–ù–æ—è25", "–î–µ–∫25"];
      
      const sourceSheet = workbook.worksheets.find(ws => 
        months.some(month => ws.name.includes(month))
      );
      
      if (!sourceSheet) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –º–µ—Å—è—Ü–∞');
      }
      
      console.log('üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–∏—Å—Ç:', sourceSheet.name);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
      const data: any[][] = [];
      sourceSheet.eachRow((row, rowNumber) => {
        const rowData: any[] = [];
        row.eachCell((cell, colNumber) => {
          rowData[colNumber - 1] = cell.value;
        });
        data[rowNumber - 1] = rowData;
      });
      
      console.log('üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:', data.length);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
      const totalViews = this.extractTotalViews(data[0] || []);
      console.log('üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞:', totalViews.toLocaleString());
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
      const otzReviews = this.countDataInRange(data, 5, 14); // —Å—Ç—Ä–æ–∫–∏ 6-15 (–∏–Ω–¥–µ–∫—Å—ã 5-14)
      const aptReviews = this.countDataInRange(data, 14, 27); // —Å—Ç—Ä–æ–∫–∏ 15-28 (–∏–Ω–¥–µ–∫—Å—ã 14-27)
      const totalReviews = otzReviews + aptReviews;
      
      console.log('üìù –û—Ç–∑—ã–≤—ã OTZ (—Å—Ç—Ä–æ–∫–∏ 6-15):', otzReviews);
      console.log('üìù –û—Ç–∑—ã–≤—ã APT (—Å—Ç—Ä–æ–∫–∏ 15-28):', aptReviews);
      console.log('üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤:', totalReviews);
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      const top20Comments = this.countDataInRange(data, 30, 50); // —Å—Ç—Ä–æ–∫–∏ 31-51 (–∏–Ω–¥–µ–∫—Å—ã 30-50)
      const additionalComments = this.findCommentSections(data);
      const totalComments = top20Comments + additionalComments;
      
      console.log('üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–û–ü-20 (—Å—Ç—Ä–æ–∫–∏ 31-51):', top20Comments);
      console.log('üí¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:', additionalComments);
      console.log('üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', totalComments);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const resultWorkbook = new ExcelJS.Workbook();
      const resultSheet = resultWorkbook.addWorksheet('–ú–∞—Ä—Ç 2025');
      
      // –ó–∞–≥–æ–ª–æ–≤–æ–∫
      resultSheet.getCell('A1').value = '–ü—Ä–æ–¥—É–∫—Ç';
      resultSheet.getCell('B1').value = '–ê–∫—Ä–∏—Ö–∏–Ω - –§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º';
      
      // –ü–µ—Ä–∏–æ–¥
      resultSheet.getCell('A2').value = '–ü–µ—Ä–∏–æ–¥';
      resultSheet.getCell('B2').value = 45717; // Excel date for March 2025
      
      // –ü–ª–∞–Ω
      resultSheet.getCell('A3').value = '–ü–ª–∞–Ω';
      resultSheet.getCell('B3').value = `–û—Ç–∑—ã–≤—ã - ${totalReviews}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - ${totalComments}`;
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      resultSheet.getCell('I3').value = '–û—Ç–∑—ã–≤';
      resultSheet.getCell('J3').value = '–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ';
      resultSheet.getCell('K3').value = '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ';
      resultSheet.getCell('L3').value = '–í—Å–µ–≥–æ';
      
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
      resultSheet.getCell('A4').value = '–ü–ª–æ—â–∞–¥–∫–∞';
      resultSheet.getCell('B4').value = '–¢–µ–º–∞';
      resultSheet.getCell('C4').value = '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è';
      resultSheet.getCell('D4').value = '–î–∞—Ç–∞';
      resultSheet.getCell('E4').value = '–ù–∏–∫';
      resultSheet.getCell('F4').value = '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã';
      resultSheet.getCell('G4').value = '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ';
      resultSheet.getCell('H4').value = '–¢–∏–ø –ø–æ—Å—Ç–∞';
      resultSheet.getCell('I4').value = totalReviews;
      resultSheet.getCell('J4').value = totalComments;
      resultSheet.getCell('K4').value = 0; // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ
      resultSheet.getCell('L4').value = totalReviews + totalComments;
      
      // –°–µ–∫—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤
      resultSheet.getCell('A5').value = '–û—Ç–∑—ã–≤—ã';
      let currentRow = 6;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã OTZ (—Å—Ç—Ä–æ–∫–∏ 6-15)
      for (let i = 5; i < 15; i++) {
        if (data[i] && (data[i][1] || data[i][3] || data[i][4])) {
          const row = resultSheet.getRow(currentRow);
          
          row.getCell(1).value = data[i][1] || ''; // –ü–ª–æ—â–∞–¥–∫–∞
          row.getCell(2).value = data[i][3] || ''; // –°—Å—ã–ª–∫–∞
          row.getCell(3).value = data[i][4] || ''; // –¢–µ–∫—Å—Ç
          
          // –î–∞—Ç–∞
          if (data[i][6] && typeof data[i][6] === 'number') {
            row.getCell(4).value = this.convertExcelDateToString(data[i][6]);
          }
          
          row.getCell(5).value = data[i][7] || ''; // –ù–∏–∫
          row.getCell(6).value = data[i][9] || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'; // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
          row.getCell(8).value = '–û–°'; // –¢–∏–ø –ø–æ—Å—Ç–∞
          
          currentRow++;
        }
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã APT (—Å—Ç—Ä–æ–∫–∏ 15-28)
      for (let i = 14; i < 28; i++) {
        if (data[i] && (data[i][1] || data[i][3] || data[i][4])) {
          const row = resultSheet.getRow(currentRow);
          
          row.getCell(1).value = data[i][1] || ''; // –ü–ª–æ—â–∞–¥–∫–∞
          row.getCell(2).value = data[i][3] || ''; // –°—Å—ã–ª–∫–∞
          row.getCell(3).value = data[i][4] || ''; // –¢–µ–∫—Å—Ç
          
          // –î–∞—Ç–∞
          if (data[i][6] && typeof data[i][6] === 'number') {
            row.getCell(4).value = this.convertExcelDateToString(data[i][6]);
          }
          
          row.getCell(5).value = data[i][7] || ''; // –ù–∏–∫
          row.getCell(6).value = data[i][9] || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'; // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
          row.getCell(8).value = '–û–°'; // –¢–∏–ø –ø–æ—Å—Ç–∞
          
          currentRow++;
        }
      }
      
      // –°–µ–∫—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      resultSheet.getCell(`A${currentRow}`).value = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏';
      currentRow++;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–û–ü-20 (—Å—Ç—Ä–æ–∫–∏ 31-51)
      for (let i = 30; i < 51; i++) {
        if (data[i] && (data[i][1] || data[i][3] || data[i][4])) {
          const row = resultSheet.getRow(currentRow);
          
          row.getCell(1).value = data[i][1] || ''; // –ü–ª–æ—â–∞–¥–∫–∞
          row.getCell(2).value = data[i][3] || ''; // –°—Å—ã–ª–∫–∞
          row.getCell(3).value = data[i][4] || ''; // –¢–µ–∫—Å—Ç
          
          // –î–∞—Ç–∞
          if (data[i][6] && typeof data[i][6] === 'number') {
            row.getCell(4).value = this.convertExcelDateToString(data[i][6]);
          }
          
          row.getCell(5).value = data[i][7] || ''; // –ù–∏–∫
          row.getCell(6).value = data[i][9] || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'; // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
          row.getCell(8).value = '–¶–°'; // –¢–∏–ø –ø–æ—Å—Ç–∞
          
          currentRow++;
        }
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      for (let i = 51; i < data.length; i++) {
        if (data[i] && (data[i][1] || data[i][3] || data[i][4])) {
          const row = resultSheet.getRow(currentRow);
          
          row.getCell(1).value = data[i][1] || ''; // –ü–ª–æ—â–∞–¥–∫–∞
          row.getCell(2).value = data[i][3] || ''; // –°—Å—ã–ª–∫–∞
          row.getCell(3).value = data[i][4] || ''; // –¢–µ–∫—Å—Ç
          
          // –î–∞—Ç–∞
          if (data[i][6] && typeof data[i][6] === 'number') {
            row.getCell(4).value = this.convertExcelDateToString(data[i][6]);
          }
          
          row.getCell(5).value = data[i][7] || ''; // –ù–∏–∫
          row.getCell(6).value = data[i][9] || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'; // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
          row.getCell(8).value = '–¶–°'; // –¢–∏–ø –ø–æ—Å—Ç–∞
          
          currentRow++;
        }
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      this.applyFormatting(resultSheet, totalViews, totalReviews, totalComments);
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      const originalFileName = path.basename(filePath, path.extname(filePath));
      const monthName = sourceSheet.name.includes('–ú–∞—Ä—Ç') ? '–ú–∞—Ä—Ç' : '–ú–∞—Ä—Ç';
      const dateStr = new Date().toISOString().slice(0, 10).replace(/-/g, '');
      const outputFileName = `${originalFileName}_${monthName}_2025_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_${dateStr}.xlsx`;
      const outputPath = path.join(path.dirname(filePath), outputFileName);
      
      await resultWorkbook.xlsx.writeFile(outputPath);
      
      console.log('‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ:', outputFileName);
      console.log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
      console.log(`   –û—Ç–∑—ã–≤—ã: ${totalReviews}`);
      console.log(`   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${totalComments}`);
      console.log(`   –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${totalViews.toLocaleString()}`);
      console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalReviews + totalComments}`);
      
      return outputPath;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  private applyFormatting(worksheet: ExcelJS.Worksheet, totalViews: number, reviews: number, comments: number) {
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ñ–æ–Ω
    const headerCells = ['A1', 'B1', 'A2', 'B2', 'A3', 'B3', 'C3', 'D3', 'E3', 'F3', 'G3', 'H3', 'I3', 'J3', 'K3', 'L3'];
    headerCells.forEach(cellAddress => {
      const cell = worksheet.getCell(cellAddress);
      cell.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FF2D1B69' }
      };
      cell.font = { color: { argb: 'FFFFFFFF' }, bold: true };
    });
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã - —Å–∏–Ω–∏–π —Ñ–æ–Ω
    const tableCells = ['A4', 'B4', 'C4', 'D4', 'E4', 'F4', 'G4', 'H4', 'I4', 'J4', 'K4', 'L4'];
    tableCells.forEach(cellAddress => {
      const cell = worksheet.getCell(cellAddress);
      cell.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFC5D9F1' }
      };
      cell.font = { bold: true };
    });
    
    // –°–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ - –∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
    const sectionHeaders = ['A5', 'A' + (reviews + 6)];
    sectionHeaders.forEach(cellAddress => {
      const cell = worksheet.getCell(cellAddress);
      cell.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFFFFF00' }
      };
      cell.font = { bold: true };
    });
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const statsRow = worksheet.getRow(4);
    statsRow.getCell(9).value = reviews;
    statsRow.getCell(10).value = comments;
    statsRow.getCell(11).value = 0;
    statsRow.getCell(12).value = reviews + comments;
    
    // –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    worksheet.columns.forEach(column => {
      column.width = 15;
    });
    
    // –û—Å–æ–±—ã–µ —à–∏—Ä–∏–Ω—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    worksheet.getColumn(3).width = 50; // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    worksheet.getColumn(2).width = 30; // –°—Å—ã–ª–∫–∞
    
    // –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫
    worksheet.eachRow((row, rowNumber) => {
      row.eachCell((cell, colNumber) => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        };
      });
    });
  }
}

export const correctFinalProcessor = new ExcelProcessorCorrectFinal(); 