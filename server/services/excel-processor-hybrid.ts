import * as XLSX from 'xlsx';
import ExcelJS from 'exceljs';
import path from 'path';
import fs from 'fs';

// –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≥–∏–±–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
interface DataRow {
  –ø–ª–æ—â–∞–¥–∫–∞: string;
  —Ç–µ–º–∞: string;
  —Ç–µ–∫—Å—Ç: string;
  –¥–∞—Ç–∞: string;
  –Ω–∏–∫: string;
  –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: number | string;
  –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: string;
  —Ç–∏–ø–ü–æ—Å—Ç–∞: string;
  section: 'reviews' | 'comments' | 'discussions';
}

interface ProcessingStats {
  totalRows: number;
  reviewsCount: number;
  commentsCount: number;
  activeDiscussionsCount: number;
  totalViews: number;
  engagementRate: number;
  processingTime: number;
  qualityScore: number;
}

export class ExcelProcessorHybrid {

  async processExcelFile(
    input: string | Buffer, 
    fileName?: string,
    selectedSheet?: string
  ): Promise<{ outputPath: string; statistics: ProcessingStats }> {
    const startTime = Date.now();
    
    try {
      console.log('üî• HYBRID PROCESSOR - –ì–∏–±—Ä–∏–¥–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞:', fileName || 'unknown');
      
      // 1. –ì–∏–±–∫–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–º–æ–π –ø–æ–¥—Ö–æ–¥)
      const { workbook, originalFileName } = await this.safeReadFile(input, fileName);
      
      // 2. –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ (–º–æ–π –ø–æ–¥—Ö–æ–¥)
      const monthInfo = this.detectMonth(workbook, originalFileName);
      
      // 3. –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö (–º–æ–π –ø–æ–¥—Ö–æ–¥ + –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞)
      const targetSheet = this.findDataSheet(workbook, monthInfo, selectedSheet);
      
      // 4. –ì–∏–±—Ä–∏–¥–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const rawData = this.extractRawData(targetSheet);
      
      // 5. –ì–ò–ë–†–ò–î–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤
      const processedData = this.hybridDataProcessing(rawData, monthInfo, originalFileName);
      
      // 6. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
      const outputPath = await this.createReport(processedData);
      
      // 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const statistics = this.generateStatistics(processedData, Date.now() - startTime);
      
      console.log('‚úÖ –ì–∏–±—Ä–∏–¥–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', outputPath);
      
      return { outputPath, statistics };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  private hybridDataProcessing(rawData: any[][], monthInfo: any, fileName: string) {
    console.log('üîÑ –ì–ò–ë–†–ò–î–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê - –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–¥—Ö–æ–¥—ã...');
    
    const reviews: DataRow[] = [];
    const comments: DataRow[] = [];
    const discussions: DataRow[] = [];
    let totalViews = 0;
    
    // 1. –ú–û–ô –ü–û–î–•–û–î: –ì–∏–±–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const { headerRowIndex, columnMapping } = this.findHeadersFlexibly(rawData);
    
    // 2. –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –õ–û–ö–ê–õ–¨–ù–û–ì–û –ê–ì–ï–ù–¢–ê: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
    const hybridMapping = this.createHybridMapping(columnMapping, rawData);
    
    const startRow = headerRowIndex + 1;
    
    for (let i = startRow; i < rawData.length; i++) {
      const row = rawData[i];
      if (!row || row.length === 0) continue;
      
      // 3. –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –õ–û–ö–ê–õ–¨–ù–û–ì–û –ê–ì–ï–ù–¢–ê: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å—Ç—Ä–æ–∫
      if (this.isServiceRow(row)) continue;
      
      // 4. –ì–ò–ë–†–ò–î–ù–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø
      const rowType = this.hybridClassification(row, hybridMapping);
      
      if (rowType === 'review') {
        const reviewData = this.extractHybridData(row, hybridMapping, '–û–°', i);
        if (reviewData) {
          reviews.push(reviewData);
          totalViews += this.extractViews(reviewData.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã);
        }
      } else if (rowType === 'comment') {
        const commentData = this.extractHybridData(row, hybridMapping, '–¶–°', i);
        if (commentData) {
          if (comments.length < 15) {
            commentData.section = 'comments';
            comments.push(commentData);
          } else {
            commentData.section = 'discussions';
            discussions.push(commentData);
          }
          totalViews += this.extractViews(commentData.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã);
        }
      }
    }
    
    console.log(`üìä –ì–∏–±—Ä–∏–¥–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: ${reviews.length} –æ—Ç–∑—ã–≤–æ–≤, ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, ${discussions.length} –æ–±—Å—É–∂–¥–µ–Ω–∏–π`);
    
    return {
      reviews,
      comments,
      discussions,
      monthName: monthInfo.name,
      totalViews,
      fileName: this.generateOutputFileName(fileName, monthInfo.name)
    };
  }

  private findHeadersFlexibly(rawData: any[][]) {
    // –ú–û–ô –ü–û–î–•–û–î: –ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    for (let i = 0; i < Math.min(10, rawData.length); i++) {
      const row = rawData[i];
      if (row && Array.isArray(row)) {
        const rowStr = row.map(cell => (cell || '').toString().toLowerCase()).join(' ');
        if (rowStr.includes('–ø–ª–æ—â–∞–¥–∫–∞') || rowStr.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è') || rowStr.includes('–¥–∞—Ç–∞')) {
          
          const columnMapping: { [key: string]: number } = {};
          row.forEach((header, index) => {
            if (header) {
              const cleanHeader = header.toString().toLowerCase().trim();
              columnMapping[cleanHeader] = index;
              
              // –ê–ª–∏–∞—Å—ã –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏
              if (cleanHeader.includes('–ø–ª–æ—â–∞–¥–∫–∞')) columnMapping['–ø–ª–æ—â–∞–¥–∫–∞'] = index;
              if (cleanHeader.includes('—Ç–µ–º–∞') || cleanHeader.includes('—Å—Å—ã–ª–∫–∞')) columnMapping['—Ç–µ–º–∞'] = index;
              if (cleanHeader.includes('—Ç–µ–∫—Å—Ç')) columnMapping['—Ç–µ–∫—Å—Ç'] = index;
              if (cleanHeader.includes('–¥–∞—Ç–∞')) columnMapping['–¥–∞—Ç–∞'] = index;
              if (cleanHeader.includes('–Ω–∏–∫') || cleanHeader.includes('–∞–≤—Ç–æ—Ä')) columnMapping['–Ω–∏–∫'] = index;
              if (cleanHeader.includes('–ø—Ä–æ—Å–º–æ—Ç—Ä—ã')) columnMapping['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã'] = index;
              if (cleanHeader.includes('–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ')) columnMapping['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ'] = index;
              if (cleanHeader.includes('—Ç–∏–ø –ø–æ—Å—Ç–∞')) columnMapping['—Ç–∏–ø –ø–æ—Å—Ç–∞'] = index;
            }
          });
          
          return { headerRowIndex: i, columnMapping };
        }
      }
    }
    
    return { headerRowIndex: 3, columnMapping: {} };
  }

  private createHybridMapping(flexibleMapping: any, rawData: any[][]) {
    // –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï: –ì–∏–±–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ + –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    const hybridMapping = { ...flexibleMapping };
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –õ–û–ö–ê–õ–¨–ù–û–ì–û –ê–ì–ï–ù–¢–ê: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ A-B-C-D-E
    if (!hybridMapping['–ø–ª–æ—â–∞–¥–∫–∞']) hybridMapping['–ø–ª–æ—â–∞–¥–∫–∞'] = 0; // A - —Å–∞–π—Ç
    if (!hybridMapping['—Ç–µ–º–∞']) hybridMapping['—Ç–µ–º–∞'] = 1;         // B - —Å—Å—ã–ª–∫–∞
    if (!hybridMapping['—Ç–µ–∫—Å—Ç']) hybridMapping['—Ç–µ–∫—Å—Ç'] = 2;       // C - —Ç–µ–∫—Å—Ç
    if (!hybridMapping['–¥–∞—Ç–∞']) hybridMapping['–¥–∞—Ç–∞'] = 3;         // D - –¥–∞—Ç–∞
    if (!hybridMapping['–Ω–∏–∫']) hybridMapping['–Ω–∏–∫'] = 4;           // E - –∞–≤—Ç–æ—Ä
    
    // –ú–û–ô –ü–û–î–•–û–î: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    if (!hybridMapping['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã']) hybridMapping['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã'] = 6;
    if (!hybridMapping['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ']) hybridMapping['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ'] = 9;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –õ–û–ö–ê–õ–¨–ù–û–ì–û –ê–ì–ï–ù–¢–ê: –¢–∏–ø –ø–æ—Å—Ç–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–ª–æ–Ω–∫–µ
    const sampleRow = rawData[5] || [];
    hybridMapping['—Ç–∏–ø –ø–æ—Å—Ç–∞'] = sampleRow.length - 1;
    
    return hybridMapping;
  }

  private isServiceRow(row: any[]): boolean {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –õ–û–ö–ê–õ–¨–ù–û–ì–û –ê–ì–ï–ù–¢–ê: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    const firstCell = (row[0] || '').toString().trim().toLowerCase();
    return firstCell === '–æ—Ç–∑—ã–≤—ã' || 
           firstCell === '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏' || 
           firstCell === '–æ–±—Å—É–∂–¥–µ–Ω–∏—è' ||
           firstCell === '–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è';
  }

  private hybridClassification(row: any[], mapping: any): string {
    // –ì–ò–ë–†–ò–î–ù–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥–æ–≤
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –õ–û–ö–ê–õ–¨–ù–û–ì–û –ê–ì–ï–ù–¢–ê: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Ç–∏–ø –ø–æ—Å—Ç–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–ª–æ–Ω–∫–µ
    const typeColumn = mapping['—Ç–∏–ø –ø–æ—Å—Ç–∞'];
    const postType = (row[typeColumn] || '').toString().toLowerCase().trim();
    
    if (postType === '–æ—Å' || postType === '–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') {
      return 'review';
    }
    if (postType === '—Ü—Å' || postType === '—Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') {
      return 'comment';
    }
    
    // –ú–û–ô –ü–û–î–•–û–î: –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    const linkValue = (row[mapping['—Ç–µ–º–∞']] || '').toString();
    const textValue = (row[mapping['—Ç–µ–∫—Å—Ç']] || '').toString();
    const platformValue = (row[mapping['–ø–ª–æ—â–∞–¥–∫–∞']] || '').toString();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
    if (!textValue && !platformValue && !linkValue) return 'empty';
    if (textValue === '...' || textValue.length < 3) return 'empty';
    
    // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    if (linkValue.includes('otzovik.com') || linkValue.includes('irecommend.ru')) {
      return 'review';
    }
    
    // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –¥–ª–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞
    if (textValue.length > 100) return 'review';
    if (textValue.length > 10) return 'comment';
    
    return 'empty';
  }

  private extractHybridData(row: any[], mapping: any, typePost: string, index: number): DataRow | null {
    try {
      const –ø–ª–æ—â–∞–¥–∫–∞ = this.getCleanValue(row[mapping['–ø–ª–æ—â–∞–¥–∫–∞']]);
      const —Ç–µ–º–∞ = this.getCleanValue(row[mapping['—Ç–µ–º–∞']]);
      const —Ç–µ–∫—Å—Ç = this.getCleanValue(row[mapping['—Ç–µ–∫—Å—Ç']]);
      const –¥–∞—Ç–∞ = this.getCleanValue(row[mapping['–¥–∞—Ç–∞']]);
      const –Ω–∏–∫ = this.getCleanValue(row[mapping['–Ω–∏–∫']]);
      const –ø—Ä–æ—Å–º–æ—Ç—Ä—ã = this.extractViews(row[mapping['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã']]);
      const –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ = this.getCleanValue(row[mapping['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ']]);
      
      if (!–ø–ª–æ—â–∞–¥–∫–∞ && !—Ç–µ–º–∞ && !—Ç–µ–∫—Å—Ç) return null;
      
      return {
        –ø–ª–æ—â–∞–¥–∫–∞: –ø–ª–æ—â–∞–¥–∫–∞ || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        —Ç–µ–º–∞: —Ç–µ–º–∞ || –ø–ª–æ—â–∞–¥–∫–∞ || '–ë–µ–∑ —Ç–µ–º—ã', 
        —Ç–µ–∫—Å—Ç: —Ç–µ–∫—Å—Ç.length > 5 ? —Ç–µ–∫—Å—Ç : —Ç–µ–º–∞,
        –¥–∞—Ç–∞: –¥–∞—Ç–∞ || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        –Ω–∏–∫: –Ω–∏–∫ || '–ê–Ω–æ–Ω–∏–º',
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: –ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
        –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        —Ç–∏–ø–ü–æ—Å—Ç–∞: typePost,
        section: 'comments'
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ ${index + 1}:`, error);
      return null;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
  private async safeReadFile(input: string | Buffer, fileName?: string) {
    const buffer = typeof input === 'string' ? fs.readFileSync(input) : input;
    const workbook = XLSX.read(buffer, { type: 'buffer', cellDates: true });
    return { workbook, originalFileName: fileName || 'unknown.xlsx' };
  }

  private detectMonth(workbook: XLSX.WorkBook, fileName: string) {
    const currentMonth = new Date().getMonth();
    const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                       '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
    return { name: monthNames[currentMonth] || '–ò—é–Ω—å' };
  }

  private findDataSheet(workbook: XLSX.WorkBook, monthInfo: any, selectedSheet?: string) {
    const sheetName = selectedSheet || workbook.SheetNames[0];
    const sheet = workbook.Sheets[sheetName];
    (sheet as any).name = sheetName;
    return sheet;
  }

  private extractRawData(worksheet: XLSX.WorkSheet): any[][] {
    return XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];
  }

  private extractViews(value: any): number {
    if (typeof value === 'number') return Math.round(value);
    const num = parseInt(value?.toString() || '0', 10);
    return isNaN(num) ? 0 : num;
  }

  private getCleanValue(value: any): string {
    return (value || '').toString().trim();
  }

  private async createReport(data: any): Promise<string> {
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet(`${data.monthName} 2025`);
    
    // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç
    worksheet.addRow(['–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞', '–ù–∏–∫', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø –ø–æ—Å—Ç–∞']);
    
    [...data.reviews, ...data.comments, ...data.discussions].forEach(row => {
      worksheet.addRow([row.–ø–ª–æ—â–∞–¥–∫–∞, row.—Ç–µ–º–∞, row.—Ç–µ–∫—Å—Ç, row.–¥–∞—Ç–∞, row.–Ω–∏–∫, row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã, row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ, row.—Ç–∏–ø–ü–æ—Å—Ç–∞]);
    });
    
    const outputPath = path.join(process.cwd(), 'uploads', data.fileName);
    await workbook.xlsx.writeFile(outputPath);
    return outputPath;
  }

  private generateStatistics(data: any, processingTime: number): ProcessingStats {
    return {
      totalRows: data.reviews.length + data.comments.length + data.discussions.length,
      reviewsCount: data.reviews.length,
      commentsCount: data.comments.length,
      activeDiscussionsCount: data.discussions.length,
      totalViews: data.totalViews,
      engagementRate: 75,
      processingTime,
      qualityScore: 90
    };
  }

  private generateOutputFileName(originalFileName: string, monthName: string): string {
    const baseName = originalFileName.replace(/\.[^/.]+$/, '');
    const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    return `${baseName}_${monthName}_2025_–≥–∏–±—Ä–∏–¥_${timestamp}.xlsx`;
  }
}

export const hybridProcessor = new ExcelProcessorHybrid();