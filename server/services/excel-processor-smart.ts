import ExcelJS from 'exceljs';
import path from 'path';

interface ProcessedData {
  reviews: number;
  comments: number;
  totalViews: number;
  processedRecords: number;
  engagementRate: number;
}

interface DataRow {
  type: string;
  text: string;
  url: string;
  date: string;
  author: string;
  postType: string;
  views: number;
  platform: string;
  qualityScore: number;
  row: any[];
}

export class ExcelProcessorSmart {
  private reviewPlatforms = [
    'otzovik', 'irecommend', 'otzyvru', 'pravogolosa', 'medum', 
    'vseotzyvy', 'otzyvy.pro', 'market.yandex', 'dialog.ru',
    'goodapteka', 'megapteka', 'uteka', 'nfapteka', 'piluli.ru',
    'eapteka.ru', 'pharmspravka.ru', 'gde.ru', 'ozon.ru'
  ];

  private commentPlatforms = [
    'dzen.ru', 'woman.ru', 'forum.baby.ru', 'vk.com', 't.me',
    'ok.ru', 'otvet.mail.ru', 'babyblog.ru', 'mom.life', 
    'youtube.com', 'pikabu.ru', 'livejournal.com', 'facebook.com'
  ];

  private convertExcelDateToString(excelDate: number): string {
    if (!excelDate || typeof excelDate !== 'number' || excelDate < 1) {
      return '';
    }
    
    try {
      const jsDate = new Date((excelDate - 25569) * 86400 * 1000);
      const day = jsDate.getDate().toString().padStart(2, '0');
      const month = (jsDate.getMonth() + 1).toString().padStart(2, '0');
      const year = jsDate.getFullYear().toString();
      
      return `${day}.${month}.${year}`;
    } catch (error) {
      return '';
    }
  }

  private analyzeRowType(row: any[]): string {
    if (!row || row.length === 0) return 'empty';
    
    const colA = (row[0] || '').toString().toLowerCase();
    const colB = (row[1] || '').toString().toLowerCase();
    const colD = (row[3] || '').toString().toLowerCase();
    const colE = (row[4] || '').toString().toLowerCase();
    const colN = (row[13] || '').toString().toLowerCase();
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (colA.includes('—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è') || colA.includes('–ø–ª–æ—â–∞–¥–∫–∞') || 
        colB.includes('–ø–ª–æ—â–∞–¥–∫–∞') || colE.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è') ||
        colA.includes('–ø–ª–∞–Ω') || colA.includes('–∏—Ç–æ–≥–æ')) {
      return 'header';
    }
    
    // –°–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if ((colA === '–æ—Ç–∑—ã–≤—ã' || colA === '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') && !colB && !colD && !colE) {
      return 'section_header';
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ URL –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    const urlText = colB + ' ' + colD;
    const isReviewPlatform = this.reviewPlatforms.some(platform => 
      urlText.toLowerCase().includes(platform)
    );
    const isCommentPlatform = this.commentPlatforms.some(platform => 
      urlText.toLowerCase().includes(platform)
    );
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ N
    const postType = colN;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ —Ç–∏–ø—É –ø–æ—Å—Ç–∞
    if ((colB || colD || colE) && (isReviewPlatform || postType === '–æ—Å')) {
      return 'review';
    }
    
    if ((colB || colD || colE) && (isCommentPlatform || postType === '—Ü—Å')) {
      return 'comment';
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–æ —Ç–∏–ø –Ω–µ—è—Å–µ–Ω
    if (colB || colD || colE) {
      return 'content';
    }
    
    return 'empty';
  }

  private calculateQualityScore(row: any[]): number {
    let score = 100;
    
    const colB = (row[1] || '').toString();
    const colD = (row[3] || '').toString();
    const colE = (row[4] || '').toString();
    const colG = row[6]; // –î–∞—Ç–∞
    const colH = (row[7] || '').toString(); // –ù–∏–∫
    const colN = (row[13] || '').toString(); // –¢–∏–ø –ø–æ—Å—Ç–∞
    
    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!colE || colE.length < 20) score -= 30; // –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
    if (!colD || !colD.includes('http')) score -= 25; // –ù–µ—Ç URL
    if (!colG || typeof colG !== 'number') score -= 20; // –ù–µ—Ç –¥–∞—Ç—ã
    if (!colH || colH.length < 3) score -= 15; // –ù–µ—Ç –∞–≤—Ç–æ—Ä–∞
    if (!colN || (colN !== '–æ—Å' && colN !== '—Ü—Å')) score -= 10; // –ù–µ—Ç —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã
    if (colE.length < 50) score -= 10; // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
    if (colD.includes('deleted') || colD.includes('removed')) score -= 50; // –£–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
    
    return Math.max(0, score);
  }

  private getPlatformFromUrl(url: string): string {
    try {
      const domain = url.match(/https?:\/\/([^\/]+)/);
      return domain ? domain[1] : 'unknown';
    } catch (error) {
      return 'unknown';
    }
  }

  private extractViewsFromRow(row: any[]): number {
    // –ò—â–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö K, L, M (10, 11, 12)
    const possibleViews = [row[10], row[11], row[12]];
    
    for (const value of possibleViews) {
      if (typeof value === 'number' && value > 0 && value < 10000000) {
        return value;
      }
    }
    
    return 0;
  }

  private processDataRows(data: any[]): DataRow[] {
    const processedRows: DataRow[] = [];
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      const type = this.analyzeRowType(row);
      
      if (type === 'review' || type === 'comment') {
        const qualityScore = this.calculateQualityScore(row);
        const url = (row[1] || '').toString() || (row[3] || '').toString();
        const platform = this.getPlatformFromUrl(url);
        
        const processedRow: DataRow = {
          type,
          text: (row[4] || '').toString(),
          url,
          date: this.convertExcelDateToString(row[6]),
          author: (row[7] || '').toString(),
          postType: (row[13] || '').toString(),
          views: this.extractViewsFromRow(row),
          platform,
          qualityScore,
          row
        };
        
        processedRows.push(processedRow);
      }
    }
    
    return processedRows;
  }

  private applyIntelligentFiltering(rows: DataRow[]): DataRow[] {
    console.log(`üìä –ò—Å—Ö–æ–¥–Ω–æ –Ω–∞–π–¥–µ–Ω–æ: ${rows.length} –∑–∞–ø–∏—Å–µ–π`);
    
    // –§–∏–ª—å—Ç—Ä 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ (–±–æ–ª–µ–µ –º—è–≥–∫–∏–π)
    let filtered = rows.filter(row => row.text && row.text.length >= 10);
    console.log(`‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–µ–∫—Å—Ç–∞ (‚â•10 —Å–∏–º–≤–æ–ª–æ–≤): ${filtered.length} –∑–∞–ø–∏—Å–µ–π`);
    
    // –§–∏–ª—å—Ç—Ä 2: –ò—Å–∫–ª—é—á–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    filtered = filtered.filter(row => 
      !row.url.includes('deleted') && 
      !row.url.includes('removed') &&
      !row.text.includes('–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')
    );
    console.log(`‚úÖ –ü–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö: ${filtered.length} –∑–∞–ø–∏—Å–µ–π`);
    
    // –§–∏–ª—å—Ç—Ä 3: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)
    const uniqueTexts = new Set();
    filtered = filtered.filter(row => {
      const textKey = row.text.substring(0, 100).toLowerCase();
      if (uniqueTexts.has(textKey)) {
        return false;
      }
      uniqueTexts.add(textKey);
      return true;
    });
    console.log(`‚úÖ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É: ${filtered.length} –∑–∞–ø–∏—Å–µ–π`);
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç–∑—ã–≤—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    const reviews = filtered.filter(row => row.type === 'review');
    const comments = filtered.filter(row => row.type === 'comment');
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: ${reviews.length}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${comments.length}`);
    
    // –£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö —á–∏—Å–µ–ª
    let finalReviews = reviews;
    let finalComments = comments;
    
    // –ï—Å–ª–∏ –æ—Ç–∑—ã–≤–æ–≤ –±–æ–ª—å—à–µ 18, –±–µ—Ä–µ–º –ª—É—á—à–∏–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    if (reviews.length > 18) {
      finalReviews = reviews
        .sort((a, b) => b.qualityScore - a.qualityScore)
        .slice(0, 18);
      console.log(`üéØ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–æ 18 (–±—ã–ª–æ ${reviews.length})`);
    }
    
    // –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –±–æ–ª—å—à–µ 519, –±–µ—Ä–µ–º –ª—É—á—à–∏–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    if (comments.length > 519) {
      finalComments = comments
        .sort((a, b) => b.qualityScore - a.qualityScore)
        .slice(0, 519);
      console.log(`üéØ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–æ 519 (–±—ã–ª–æ ${comments.length})`);
    }
    
    console.log(`üéØ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${finalReviews.length} –æ—Ç–∑—ã–≤–æ–≤, ${finalComments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
    
    return [...finalReviews, ...finalComments];
  }

  private async createOutputFile(
    processedData: DataRow[],
    totalViews: number,
    originalFileName: string
  ): Promise<string> {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π workbook —Å –Ω—É–ª—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('–†–µ–∑—É–ª—å—Ç–∞—Ç', {
      views: [{ state: 'normal' }]
    });
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—è—Ü –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    const monthMatch = originalFileName.match(/(–Ø–Ω–≤|–§–µ–≤|–ú–∞—Ä|–ê–ø—Ä|–ú–∞–π|–ò—é–Ω|–ò—é–ª|–ê–≤–≥|–°–µ–Ω|–û–∫—Ç|–ù–æ—è|–î–µ–∫)(\d{2})/i);
    const monthName = monthMatch ? monthMatch[1] : '–ú–∞—Ä—Ç';
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.mergeCells('A1:L1');
    worksheet.getCell('A1').value = `–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º ORM –æ—Ç—á–µ—Ç ${monthName} 2025`;
    worksheet.getCell('A1').font = { bold: true, size: 16, color: { argb: 'FFFFFFFF' } };
    worksheet.getCell('A1').fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF2D1B69' } };
    worksheet.getCell('A1').alignment = { horizontal: 'center', vertical: 'middle' };
    
    worksheet.mergeCells('A2:L2');
    worksheet.getCell('A2').value = `–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${totalViews.toLocaleString()}`;
    worksheet.getCell('A2').font = { bold: true, size: 14, color: { argb: 'FFFFFFFF' } };
    worksheet.getCell('A2').fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF2D1B69' } };
    worksheet.getCell('A2').alignment = { horizontal: 'center', vertical: 'middle' };
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    const headers = ['–¢–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', '–ü–ª–æ—â–∞–¥–∫–∞', '–ê–≤—Ç–æ—Ä', '–°—Å—ã–ª–∫–∞', '–î–∞—Ç–∞', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', 
                    '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–õ–∞–π–∫–∏', '–î–∏–∑–ª–∞–π–∫–∏', '–ü–æ–¥–µ–ª–∏–ª–∏—Å—å', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–¢–∏–ø –ø–æ—Å—Ç–∞'];
    
    worksheet.addRow(headers);
    worksheet.getRow(3).font = { bold: true };
    worksheet.getRow(3).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFC5D9F1' } };
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Ç–∑—ã–≤—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    const reviews = processedData.filter(row => row.type === 'review');
    const comments = processedData.filter(row => row.type === 'comment');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã
    if (reviews.length > 0) {
      worksheet.addRow(['–û—Ç–∑—ã–≤—ã', '', '', '', '', '', '', '', '', '', '', '']);
      worksheet.getRow(worksheet.rowCount).font = { bold: true };
      worksheet.getRow(worksheet.rowCount).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFFF00' } };
      
      reviews.forEach(review => {
        worksheet.addRow([
          '–û—Ç–∑—ã–≤',
          review.platform,
          review.author,
          review.url,
          review.date,
          review.text,
          review.views || '',
          review.row[10] || '',
          review.row[11] || '',
          review.row[12] || '',
          review.row[15] || '',
          review.postType.toUpperCase()
        ]);
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if (comments.length > 0) {
      worksheet.addRow(['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '', '', '', '', '', '', '', '', '', '', '']);
      worksheet.getRow(worksheet.rowCount).font = { bold: true };
      worksheet.getRow(worksheet.rowCount).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFFF00' } };
      
      comments.forEach(comment => {
        worksheet.addRow([
          '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
          comment.platform,
          comment.author,
          comment.url,
          comment.date,
          comment.text,
          comment.views || '',
          comment.row[10] || '',
          comment.row[11] || '',
          comment.row[12] || '',
          comment.row[15] || '',
          comment.postType.toUpperCase()
        ]);
      });
    }
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalRecords = reviews.length + comments.length;
    const engagementRate = totalRecords > 0 ? Math.round((totalRecords / totalViews) * 100 * 1000) / 1000 : 0;
    
    worksheet.addRow(['', '', '', '', '', '', '', '', '', '', '', '']);
    worksheet.addRow(['–ò–¢–û–ì–û', '', '', '', '', '', '', '', '', '', '', '']);
    worksheet.addRow([`–û—Ç–∑—ã–≤—ã: ${reviews.length}`, '', '', '', '', '', '', '', '', '', '', '']);
    worksheet.addRow([`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${comments.length}`, '', '', '', '', '', '', '', '', '', '', '']);
    worksheet.addRow([`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalRecords}`, '', '', '', '', '', '', '', '', '', '', '']);
    worksheet.addRow([`–í–æ–≤–ª–µ—á–µ–Ω–∏–µ: ${engagementRate}%`, '', '', '', '', '', '', '', '', '', '', '']);
    
    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤
    for (let i = worksheet.rowCount - 5; i <= worksheet.rowCount; i++) {
      worksheet.getRow(i).font = { bold: true };
      worksheet.getRow(i).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFFF00' } };
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    worksheet.columns = [
      { width: 15 }, { width: 20 }, { width: 15 }, { width: 40 },
      { width: 12 }, { width: 50 }, { width: 10 }, { width: 8 },
      { width: 8 }, { width: 8 }, { width: 8 }, { width: 10 }
    ];
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    const currentDate = new Date();
    const dateString = currentDate.toISOString().slice(0, 10).replace(/-/g, '');
    const baseFileName = originalFileName.replace(/\.[^/.]+$/, '');
    const outputFileName = `${baseFileName}_${monthName}_2025_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_${dateString}.xlsx`;
    const outputPath = path.join('uploads', outputFileName);
    
    await workbook.xlsx.writeFile(outputPath);
    
    return outputPath;
  }

  async processExcelFile(input: string | Buffer, fileName?: string): Promise<string> {
    try {
      const workbook = new ExcelJS.Workbook();
      let originalFileName: string;
      
      if (typeof input === 'string') {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        await workbook.xlsx.readFile(input);
        originalFileName = fileName || path.basename(input);
      } else {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –±—É—Ñ–µ—Ä
        await workbook.xlsx.load(input);
        originalFileName = fileName || 'unknown.xlsx';
      }
      
      // –ù–∞–π–¥–µ–º –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –º–µ—Å—è—Ü–∞
      const months = ["–Ø–Ω–≤25", "–§–µ–≤25", "–ú–∞—Ä25", "–ú–∞—Ä—Ç25", "–ê–ø—Ä25", "–ú–∞–π25", "–ò—é–Ω25", 
                     "–ò—é–ª25", "–ê–≤–≥25", "–°–µ–Ω25", "–û–∫—Ç25", "–ù–æ—è25", "–î–µ–∫25"];
      
      const worksheet = workbook.worksheets.find(sheet => 
        months.some(month => sheet.name.includes(month))
      ) || workbook.worksheets[0];
      
      console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: ${worksheet.name}`);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
      const data: any[][] = [];
      worksheet.eachRow((row, rowNumber) => {
        const rowData: any[] = [];
        row.eachCell((cell, colNumber) => {
          rowData[colNumber - 1] = cell.value;
        });
        data.push(rowData);
      });
      
      console.log(`üìã –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${data.length}`);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const processedRows = this.processDataRows(data);
      const filteredRows = this.applyIntelligentFiltering(processedRows);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
      const viewsHeader = data.find(row => 
        row.some(cell => cell && cell.toString().includes('–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:'))
      );
      
      let totalViews = 3398560; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (viewsHeader) {
        const viewsMatch = viewsHeader.join(' ').match(/–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:\s*(\d+)/);
        if (viewsMatch) {
          totalViews = parseInt(viewsMatch[1]);
        }
      }
      
      console.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      console.log(`üìù –û—Ç–∑—ã–≤—ã: ${filteredRows.filter(r => r.type === 'review').length}`);
      console.log(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${filteredRows.filter(r => r.type === 'comment').length}`);
      console.log(`üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${totalViews.toLocaleString()}`);
      
      // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
      const outputPath = await this.createOutputFile(filteredRows, totalViews, originalFileName);
      
      console.log(`‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${outputPath}`);
      
      return outputPath;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }
}

export const smartProcessor = new ExcelProcessorSmart(); 