import * as XLSX from 'xlsx';
import ExcelJS from 'exceljs';
import path from 'path';
import fs from 'fs';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
interface ProcessingStats {
  totalRows: number;
  reviewsCount: number;
  commentsCount: number;
  activeDiscussionsCount: number;
  totalViews: number;
  engagementRate: number;
  platformsWithData: number;
  processingTime: number;
  qualityScore: number;
}

interface DataRow {
  –ø–ª–æ—â–∞–¥–∫–∞: string;
  —Ç–µ–º–∞: string;
  —Ç–µ–∫—Å—Ç: string;
  –¥–∞—Ç–∞: string;
  –Ω–∏–∫: string;
  –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: number | string;
  –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: string;
  —Ç–∏–ø–ü–æ—Å—Ç–∞: string;
  section: 'reviews' | 'comments' | 'discussions';
  originalRow: any[];
}

interface ProcessedData {
  reviews: DataRow[];
  comments: DataRow[];
  discussions: DataRow[];
  monthName: string;
  totalViews: number;
  fileName: string;
}

interface MonthInfo {
  name: string;
  shortName: string;
  detectedFrom: 'filename' | 'sheet' | 'content' | 'default';
}

export class ExcelProcessorReliable {
  
  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é
   */
  async processExcelFile(
    input: string | Buffer, 
    fileName?: string
  ): Promise<{ outputPath: string; statistics: ProcessingStats }> {
    const startTime = Date.now();
    
    try {
      console.log('üî• RELIABLE PROCESSOR - –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', fileName || 'unknown');
      
      // 1. –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      const { workbook, originalFileName } = await this.safeReadFile(input, fileName);
      
      // 2. –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      const monthInfo = this.detectMonthIntelligently(workbook, originalFileName);
      console.log(`üìÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ—Å—è—Ü: ${monthInfo.name} (–∏—Å—Ç–æ—á–Ω–∏–∫: ${monthInfo.detectedFrom})`);
      
      // 3. –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ª–∏—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
      const targetSheet = this.findDataSheet(workbook, monthInfo);
      console.log(`üìã –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: ${targetSheet.name}`);
      
      // 4. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      const rawData = this.extractRawData(targetSheet);
      console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${rawData.length}`);
      
      // 5. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
      const processedData = this.analyzeAndExtractData(rawData, monthInfo, originalFileName);
      
      // 6. –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
      const outputPath = await this.createReferenceReport(processedData);
      
      // 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const statistics = this.generateStatistics(processedData, Date.now() - startTime);
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', outputPath);
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', statistics);
      
      return { outputPath, statistics };
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  private async safeReadFile(input: string | Buffer, fileName?: string): Promise<{
    workbook: XLSX.WorkBook;
    originalFileName: string;
  }> {
    try {
      let workbook: XLSX.WorkBook;
      let originalFileName: string;
      
      if (typeof input === 'string') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if (!fs.existsSync(input)) {
          throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${input}`);
        }
        
        const stats = fs.statSync(input);
        if (!stats.isFile()) {
          throw new Error(`–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: ${input}`);
        }
        
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        const buffer = fs.readFileSync(input);
        workbook = XLSX.read(buffer, { 
          type: 'buffer',
          cellDates: true,    // –í–∫–ª—é—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞—Ç
          cellNF: false,
          cellText: false,
          raw: false         // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        });
        originalFileName = fileName || path.basename(input);
        
      } else {
        // –ß–∏—Ç–∞–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞
        if (!input || input.length === 0) {
          throw new Error('–ü—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä —Ñ–∞–π–ª–∞');
        }
        
        workbook = XLSX.read(input, { 
          type: 'buffer',
          cellDates: true,
          cellNF: false,
          cellText: false,
          raw: false
        });
        originalFileName = fileName || 'unknown.xlsx';
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ workbook —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—Å—Ç—ã
      if (!workbook.SheetNames || workbook.SheetNames.length === 0) {
        throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—Å—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏');
      }
      
      console.log(`üìã –ù–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã: ${workbook.SheetNames.join(', ')}`);
      
      return { workbook, originalFileName };
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  private detectMonthIntelligently(workbook: XLSX.WorkBook, fileName: string): MonthInfo {
    const monthsMap = {
      '—è–Ω–≤–∞—Ä—å': { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤' },
      '—è–Ω–≤': { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤' },
      'january': { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤' },
      '—Ñ–µ–≤—Ä–∞–ª—å': { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤' },
      '—Ñ–µ–≤': { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤' },
      'february': { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤' },
      '–º–∞—Ä—Ç': { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä' },
      '–º–∞—Ä': { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä' },
      'march': { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä' },
      '–∞–ø—Ä–µ–ª—å': { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä' },
      '–∞–ø—Ä': { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä' },
      'april': { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä' },
      '–º–∞–π': { name: '–ú–∞–π', short: '–ú–∞–π' },
      'may': { name: '–ú–∞–π', short: '–ú–∞–π' },
      '–∏—é–Ω—å': { name: '–ò—é–Ω—å', short: '–ò—é–Ω' },
      '–∏—é–Ω': { name: '–ò—é–Ω—å', short: '–ò—é–Ω' },
      'june': { name: '–ò—é–Ω—å', short: '–ò—é–Ω' },
      '–∏—é–ª—å': { name: '–ò—é–ª—å', short: '–ò—é–ª' },
      '–∏—é–ª': { name: '–ò—é–ª—å', short: '–ò—é–ª' },
      'july': { name: '–ò—é–ª—å', short: '–ò—é–ª' },
      '–∞–≤–≥—É—Å—Ç': { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥' },
      '–∞–≤–≥': { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥' },
      'august': { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥' },
      '—Å–µ–Ω—Ç—è–±—Ä—å': { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω' },
      '—Å–µ–Ω': { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω' },
      'september': { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω' },
      '–æ–∫—Ç—è–±—Ä—å': { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç' },
      '–æ–∫—Ç': { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç' },
      'october': { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç' },
      '–Ω–æ—è–±—Ä—å': { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è' },
      '–Ω–æ—è': { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è' },
      'november': { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è' },
      '–¥–µ–∫–∞–±—Ä—å': { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫' },
      '–¥–µ–∫': { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫' },
      'december': { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫' }
    };

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const lowerFileName = fileName.toLowerCase();
    for (const [key, value] of Object.entries(monthsMap)) {
      if (lowerFileName.includes(key)) {
        return {
          name: value.name,
          shortName: value.short,
          detectedFrom: 'filename'
        };
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤
    for (const sheetName of workbook.SheetNames) {
      const lowerSheetName = sheetName.toLowerCase();
      for (const [key, value] of Object.entries(monthsMap)) {
        if (lowerSheetName.includes(key)) {
          return {
            name: value.name,
            shortName: value.short,
            detectedFrom: 'sheet'
          };
        }
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–∏—Å—Ç–æ–≤
    for (const sheetName of workbook.SheetNames) {
      try {
        const worksheet = workbook.Sheets[sheetName];
        const data = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: '' }) as any[][];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞
        for (let i = 0; i < Math.min(10, data.length); i++) {
          const row = data[i];
          if (row && Array.isArray(row)) {
            const rowText = row.join(' ').toLowerCase();
            for (const [key, value] of Object.entries(monthsMap)) {
              if (rowText.includes(key)) {
                return {
                  name: value.name,
                  shortName: value.short,
                  detectedFrom: 'content'
                };
              }
            }
          }
        }
      } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ª–∏—Å—Ç–∞ ${sheetName}:`, error);
      }
    }

    // 4. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏–ª–∏ –º–∞—Ä—Ç
    const currentMonth = new Date().getMonth();
    const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                       '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
    const shortNames = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                       '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫'];

    return {
      name: monthNames[currentMonth] || '–ú–∞—Ä—Ç',
      shortName: shortNames[currentMonth] || '–ú–∞—Ä',
      detectedFrom: 'default'
    };
  }

  /**
   * –ü–æ–∏—Å–∫ –ª–∏—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
   */
  private findDataSheet(workbook: XLSX.WorkBook, monthInfo: MonthInfo): XLSX.WorkSheet {
    const sheetNames = workbook.SheetNames;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –º–µ—Å—è—Ü—É
    const monthVariants = [
      monthInfo.name.toLowerCase(),
      monthInfo.shortName.toLowerCase(),
      `${monthInfo.shortName.toLowerCase()}25`,
      `${monthInfo.shortName.toLowerCase()}24`,
      `${monthInfo.name.toLowerCase()} 2025`,
      `${monthInfo.name.toLowerCase()} 2024`
    ];

    for (const variant of monthVariants) {
      const foundSheet = sheetNames.find(name => 
        name.toLowerCase().includes(variant)
      );
      if (foundSheet) {
        return workbook.Sheets[foundSheet];
      }
    }

    // –ü–æ–∏—Å–∫ –ª–∏—Å—Ç–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö
    let bestSheet = workbook.Sheets[sheetNames[0]];
    let maxRows = 0;

    for (const sheetName of sheetNames) {
      try {
        const sheet = workbook.Sheets[sheetName];
        const data = XLSX.utils.sheet_to_json(sheet, { header: 1 }) as any[][];
        if (data.length > maxRows) {
          maxRows = data.length;
          bestSheet = sheet;
        }
      } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–∏—Å—Ç–∞ ${sheetName}:`, error);
      }
    }

    return bestSheet;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞
   */
  private extractRawData(worksheet: XLSX.WorkSheet): any[][] {
    try {
      const data = XLSX.utils.sheet_to_json(worksheet, { 
        header: 1, 
        defval: '',
        raw: false,
        dateNF: 'dd.mm.yyyy'
      }) as any[][];
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      return data.filter(row => 
        row && Array.isArray(row) && row.some(cell => 
          cell !== null && cell !== undefined && cell !== ''
        )
      );
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
   */
  private analyzeAndExtractData(rawData: any[][], monthInfo: MonthInfo, fileName: string): ProcessedData {
    console.log('üîç RELIABLE EXTRACTION - –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const reviews: DataRow[] = [];
    const comments: DataRow[] = [];
    const discussions: DataRow[] = [];
    let totalViews = 0;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
    for (let i = 0; i < rawData.length; i++) {
      const row = rawData[i];
      if (!row || row.length === 0) continue;
      
      const rowType = this.analyzeRowTypeReliably(row, i);
      
      if (rowType.type === 'review') {
        const reviewData = this.extractReviewDataReliably(row, i);
        if (reviewData) {
          reviews.push(reviewData);
          if (typeof reviewData.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã === 'number') {
            totalViews += reviewData.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã;
          }
        }
      } else if (rowType.type === 'comment') {
        const commentData = this.extractCommentDataReliably(row, i);
        if (commentData) {
          // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–∂–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è–º–∏
          if (comments.length < 20) {
            commentData.section = 'comments';
            comments.push(commentData);
          } else {
            commentData.section = 'discussions';
            discussions.push(commentData);
          }
          
          if (typeof commentData.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã === 'number') {
            totalViews += commentData.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã;
          }
        }
      }
    }
    
    console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ: ${reviews.length} –æ—Ç–∑—ã–≤–æ–≤, ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, ${discussions.length} –æ–±—Å—É–∂–¥–µ–Ω–∏–π`);
    
    return {
      reviews,
      comments,
      discussions,
      monthName: monthInfo.name,
      totalViews,
      fileName: this.generateOutputFileName(fileName, monthInfo.name)
    };
  }

  /**
   * –ù–∞–¥–µ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫–∏
   */
  private analyzeRowTypeReliably(row: any[], index: number): { type: string; confidence: number } {
    const firstCol = this.getCleanValue(row[0]).toLowerCase();
    const secondCol = this.getCleanValue(row[1]).toLowerCase();
    const textCol = this.getCleanValue(row[4]).toLowerCase();
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (firstCol.includes('—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è') || 
        firstCol.includes('–ø–ª–æ—â–∞–¥–∫–∞') || 
        secondCol.includes('–ø–ª–æ—â–∞–¥–∫–∞') ||
        firstCol.includes('–ø–ª–∞–Ω') ||
        textCol.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')) {
      return { type: 'header', confidence: 100 };
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∑—ã–≤—ã
    if (firstCol.includes('–æ—Ç–∑—ã–≤') || 
        (firstCol.includes('—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ') && textCol.length > 20)) {
      return { type: 'review', confidence: 90 };
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if (firstCol.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') || 
        firstCol.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏') ||
        (textCol.length > 20 && this.looksLikeComment(row))) {
      return { type: 'comment', confidence: 85 };
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–∏–º—ã–π —Ç–µ–∫—Å—Ç
    if (textCol.length > 20) {
      return { type: 'content', confidence: 50 };
    }
    
    return { type: 'empty', confidence: 0 };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
   */
  private looksLikeComment(row: any[]): boolean {
    const platformCol = this.getCleanValue(row[1]);
    const urlCol = this.getCleanValue(row[3]);
    
    // –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const commentPlatforms = [
      'dzen.ru', 'woman.ru', 'forum.baby.ru', 'vk.com', 't.me',
      'ok.ru', 'otvet.mail.ru', 'babyblog.ru', 'mom.life', 
      'youtube.com', 'pikabu.ru', 'livejournal.com'
    ];
    
    const text = (platformCol + ' ' + urlCol).toLowerCase();
    return commentPlatforms.some(platform => text.includes(platform));
  }

  /**
   * –ù–∞–¥–µ–∂–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞
   */
  private extractReviewDataReliably(row: any[], index: number): DataRow | null {
    try {
      const –ø–ª–æ—â–∞–¥–∫–∞ = this.getCleanValue(row[1]);
      const —Ç–µ–∫—Å—Ç = this.getCleanValue(row[4]);
      
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
      if (!–ø–ª–æ—â–∞–¥–∫–∞ && !—Ç–µ–∫—Å—Ç) return null;
      if (—Ç–µ–∫—Å—Ç.length < 10) return null;
      
      return {
        –ø–ª–æ—â–∞–¥–∫–∞,
        —Ç–µ–º–∞: this.extractTheme(—Ç–µ–∫—Å—Ç),
        —Ç–µ–∫—Å—Ç,
        –¥–∞—Ç–∞: this.extractDate(row),
        –Ω–∏–∫: this.extractAuthor(row),
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: this.extractViews(row),
        –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        —Ç–∏–ø–ü–æ—Å—Ç–∞: '–û–°',
        section: 'reviews',
        originalRow: row
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${index + 1}:`, error);
      return null;
    }
  }

  /**
   * –ù–∞–¥–µ–∂–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
   */
  private extractCommentDataReliably(row: any[], index: number): DataRow | null {
    try {
      const –ø–ª–æ—â–∞–¥–∫–∞ = this.getCleanValue(row[1]);
      const —Ç–µ–∫—Å—Ç = this.getCleanValue(row[4]);
      
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
      if (!–ø–ª–æ—â–∞–¥–∫–∞ && !—Ç–µ–∫—Å—Ç) return null;
      if (—Ç–µ–∫—Å—Ç.length < 10) return null;
      
      return {
        –ø–ª–æ—â–∞–¥–∫–∞,
        —Ç–µ–º–∞: this.extractTheme(—Ç–µ–∫—Å—Ç),
        —Ç–µ–∫—Å—Ç,
        –¥–∞—Ç–∞: this.extractDate(row),
        –Ω–∏–∫: this.extractAuthor(row),
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: this.extractViews(row),
        –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: this.extractEngagement(row),
        —Ç–∏–ø–ü–æ—Å—Ç–∞: '–¶–°',
        section: 'comments',
        originalRow: row
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Å—Ç—Ä–æ–∫–µ ${index + 1}:`, error);
      return null;
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private extractTheme(text: string): string {
    if (!text) return '';
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
    let cleanText = text.replace(/^(–ù–∞–∑–≤–∞–Ω–∏–µ:\s*|–ó–∞–≥–æ–ª–æ–≤–æ–∫:\s*|–¢–µ–º–∞:\s*)/i, '').trim();
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
    const firstSentence = cleanText.split(/[.!?]/)[0];
    if (firstSentence.length <= 50) {
      return firstSentence.trim();
    }
    
    return cleanText.substring(0, 47).trim() + '...';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
   */
  private extractDate(row: any[]): string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ G, F, H (6, 5, 7) - –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–∞–º–∏
    const dateColumns = [6, 5, 7];
    
    for (const colIndex of dateColumns) {
      const value = row[colIndex];
      if (!value) continue;
      
      // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç Date
      if (value instanceof Date) {
        return this.formatDate(value);
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π
      if (typeof value === 'string') {
        const dateMatch = value.match(/\d{1,2}[.\/]\d{1,2}[.\/]\d{2,4}/);
        if (dateMatch) {
          return this.formatDateString(value);
        }
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ Excel serial number
      if (typeof value === 'number' && value > 40000 && value < 50000) {
        return this.formatExcelDate(value);
      }
    }
    
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞
   */
  private extractAuthor(row: any[]): string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ H, I, E (7, 8, 4)
    const authorColumns = [7, 8, 4];
    
    for (const colIndex of authorColumns) {
      const value = this.getCleanValue(row[colIndex]);
      if (value && 
          value.length > 2 && 
          value.length < 50 && 
          !value.includes('http') && 
          !value.includes('.com') &&
          !value.match(/\d{1,2}[.\/]\d{1,2}[.\/]\d{2,4}/)) {
        return value;
      }
    }
    
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
   */
  private extractViews(row: any[]): number | string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ K, L, M (10, 11, 12)
    const viewColumns = [10, 11, 12];
    
    for (const colIndex of viewColumns) {
      const value = row[colIndex];
      if (typeof value === 'number' && value > 0 && value < 10000000) {
        return Math.round(value);
      }
    }
    
    return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
   */
  private extractEngagement(row: any[]): string {
    const value = this.getCleanValue(row[12]);
    if (value && (value.toLowerCase().includes('–µ—Å—Ç—å') || 
                  value.toLowerCase().includes('–¥–∞') || 
                  value === '+')) {
      return '–µ—Å—Ç—å';
    }
    return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–ë–ï–ó —Å—Ç—Ä–æ–∫–∏ "–ò—Ç–æ–≥–æ")
   */
  private async createReferenceReport(data: ProcessedData): Promise<string> {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...');
    
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet(`${data.monthName} 2025`);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ —ç—Ç–∞–ª–æ–Ω—É
    worksheet.columns = [
      { width: 40 }, // A: –ü–ª–æ—â–∞–¥–∫–∞
      { width: 30 }, // B: –¢–µ–º–∞  
      { width: 80 }, // C: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      { width: 12 }, // D: –î–∞—Ç–∞
      { width: 20 }, // E: –ù–∏–∫
      { width: 12 }, // F: –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
      { width: 15 }, // G: –í–æ–≤–ª–µ—á–µ–Ω–∏–µ
      { width: 10 }, // H: –¢–∏–ø –ø–æ—Å—Ç–∞
      { width: 8 },  // I: –û—Ç–∑—ã–≤
      { width: 12 }, // J: –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      { width: 15 }, // K: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ
      { width: 8 }   // L: –í—Å–µ–≥–æ
    ];

    // –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–ø–∫–∏ —Ç–æ—á–Ω–æ –ø–æ —ç—Ç–∞–ª–æ–Ω—É
    this.createReferenceHeader(worksheet, data);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
    this.createReferenceTableHeaders(worksheet, data);

    let currentRow = 5;

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
    if (data.reviews.length > 0) {
      currentRow = this.addReferenceSection(worksheet, '–û—Ç–∑—ã–≤—ã', data.reviews, currentRow);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¢–æ–ø-20
    if (data.comments.length > 0) {
      currentRow = this.addReferenceSection(worksheet, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20 –≤—ã–¥–∞—á–∏', data.comments, currentRow);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π
    if (data.discussions.length > 0) {
      currentRow = this.addReferenceSection(worksheet, '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)', data.discussions, currentRow);
    }

    // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É "–ò—Ç–æ–≥–æ" - –∫–∞–∫ –ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫–∞–∫ –≤ —ç—Ç–∞–ª–æ–Ω–µ)
    this.addReferenceStatistics(worksheet, data, currentRow + 2);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const outputPath = path.join(process.cwd(), 'uploads', data.fileName);
    await workbook.xlsx.writeFile(outputPath);

    console.log('‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω:', outputPath);
    return outputPath;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–ø–∫–∏ —Ç–æ—á–Ω–æ –ø–æ —ç—Ç–∞–ª–æ–Ω—É
   */
  private createReferenceHeader(worksheet: ExcelJS.Worksheet, data: ProcessedData): void {
    // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ñ–æ–Ω –∫–∞–∫ –≤ —ç—Ç–∞–ª–æ–Ω–µ
    const headerFill = { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'FF2D1B69' } };
    const headerFont = { name: 'Arial', size: 9, bold: true, color: { argb: 'FFFFFFFF' } };
    const centerAlign = { horizontal: 'center' as const, vertical: 'middle' as const };

    // –°—Ç—Ä–æ–∫–∞ 1: –ü—Ä–æ–¥—É–∫—Ç
    worksheet.mergeCells('A1:B1');
    worksheet.getCell('A1').value = '–ü—Ä–æ–¥—É–∫—Ç';
    worksheet.mergeCells('C1:H1');
    worksheet.getCell('C1').value = '–ê–∫—Ä–∏—Ö–∏–Ω - –§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º';

    // –°—Ç—Ä–æ–∫–∞ 2: –ü–µ—Ä–∏–æ–¥  
    worksheet.mergeCells('A2:B2');
    worksheet.getCell('A2').value = '–ü–µ—Ä–∏–æ–¥';
    worksheet.mergeCells('C2:H2');
    worksheet.getCell('C2').value = `${data.monthName} 2025`;

    // –°—Ç—Ä–æ–∫–∞ 3: –ü–ª–∞–Ω + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    worksheet.mergeCells('A3:B3');
    worksheet.getCell('A3').value = '–ü–ª–∞–Ω';
    worksheet.mergeCells('C3:H3');
    worksheet.getCell('C3').value = `–û—Ç–∑—ã–≤—ã - ${data.reviews.length}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - ${data.comments.length + data.discussions.length}`;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    worksheet.getCell('I3').value = '–û—Ç–∑—ã–≤';
    worksheet.getCell('J3').value = '–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ';
    worksheet.getCell('K3').value = '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ';
    worksheet.getCell('L3').value = '–í—Å–µ–≥–æ';

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º —à–∞–ø–∫–∏
    for (let row = 1; row <= 3; row++) {
      for (let col = 1; col <= 12; col++) {
        const cell = worksheet.getCell(row, col);
        cell.fill = headerFill;
        cell.font = headerFont;
        cell.alignment = centerAlign;
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        };
      }
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
   */
  private createReferenceTableHeaders(worksheet: ExcelJS.Worksheet, data: ProcessedData): void {
    const headers = [
      '–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–î–∞—Ç–∞', '–ù–∏–∫',
      '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø –ø–æ—Å—Ç–∞',
      data.reviews.length.toString(),
      (data.comments.length + data.discussions.length).toString(),
      '',
      (data.reviews.length + data.comments.length + data.discussions.length).toString()
    ];

    const headerRow = worksheet.getRow(4);
    headerRow.values = headers;

    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const headerFill = { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'FF2D1B69' } };
    const headerFont = { name: 'Arial', size: 9, bold: true, color: { argb: 'FFFFFFFF' } };
    const centerAlign = { horizontal: 'center' as const, vertical: 'middle' as const };

    headers.forEach((_, index) => {
      const cell = headerRow.getCell(index + 1);
      cell.font = headerFont;
      cell.fill = headerFill;
      cell.alignment = centerAlign;
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      };
    });
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  private addReferenceSection(worksheet: ExcelJS.Worksheet, sectionName: string, data: DataRow[], startRow: number): number {
    let currentRow = startRow;

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ —Å –≥–æ–ª—É–±—ã–º —Ñ–æ–Ω–æ–º
    worksheet.mergeCells(`A${currentRow}:H${currentRow}`);
    const sectionCell = worksheet.getCell(`A${currentRow}`);
    sectionCell.value = sectionName;
    sectionCell.font = { name: 'Arial', size: 9, bold: true };
    sectionCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFC5D9F1' } };
    sectionCell.alignment = { horizontal: 'center', vertical: 'middle' };
    sectionCell.border = {
      top: { style: 'thin' },
      left: { style: 'thin' },
      bottom: { style: 'thin' },
      right: { style: 'thin' }
    };
    currentRow++;

    // –î–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    data.forEach(row => {
      const dataRow = worksheet.getRow(currentRow);
      dataRow.values = [
        row.–ø–ª–æ—â–∞–¥–∫–∞,
        row.—Ç–µ–º–∞,
        row.—Ç–µ–∫—Å—Ç,
        row.–¥–∞—Ç–∞,
        row.–Ω–∏–∫,
        row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
        row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ,
        row.—Ç–∏–ø–ü–æ—Å—Ç–∞
      ];

      // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —è—á–µ–µ–∫ –¥–∞–Ω–Ω—ã—Ö
      dataRow.eachCell((cell: any, colNumber: number) => {
        cell.font = { name: 'Arial', size: 9 };
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        };
        
        if (colNumber === 4 || colNumber === 6) {
          cell.alignment = { horizontal: 'center', vertical: 'top', wrapText: true };
        } else {
          cell.alignment = { horizontal: 'left', vertical: 'top', wrapText: true };
        }
      });

      currentRow++;
    });

    return currentRow;
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫–∞–∫ –≤ —ç—Ç–∞–ª–æ–Ω–µ)
   */
  private addReferenceStatistics(worksheet: ExcelJS.Worksheet, data: ProcessedData, startRow: number): void {
    const totalComments = data.comments.length + data.discussions.length;
    const engagementCount = [...data.comments, ...data.discussions]
      .filter(row => row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ && row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.includes('–µ—Å—Ç—å')).length;
    const engagementRate = totalComments > 0 ? Math.round((engagementCount / totalComments) * 100) : 0;

    const statisticsData = [
      ['', '', '', '', '–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤*', data.totalViews],
      ['', '', '', '', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç–∑—ã–≤—ã)', data.reviews.length],
      ['', '', '', '', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (—Ñ–æ—Ä—É–º—ã, —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç–∞—Ç—å—è–º)', totalComments],
      ['', '', '', '', '–î–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º –≤ –¥–∏–∞–ª–æ–≥', `${engagementRate}%`],
      [],
      ['', '', '*–ë–µ–∑ —É—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–æ–∫ —Å –∑–∞–∫—Ä—ã—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ—á—Ç–µ–Ω–∏–π'],
      ['', '', '–ü–ª–æ—â–∞–¥–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', '', '', '74%'],
      ['', '', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á—Ç–µ–Ω–∏–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ 30% –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤, —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.']
    ];

    statisticsData.forEach((rowData, index) => {
      const row = worksheet.getRow(startRow + index);
      row.values = rowData;
      row.font = { name: 'Arial', size: 9 };
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private generateStatistics(data: ProcessedData, processingTime: number): ProcessingStats {
    const totalComments = data.comments.length + data.discussions.length;
    const engagementCount = [...data.comments, ...data.discussions]
      .filter(row => row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ && row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.includes('–µ—Å—Ç—å')).length;

    return {
      totalRows: data.reviews.length + data.comments.length + data.discussions.length,
      reviewsCount: data.reviews.length,
      commentsCount: data.comments.length,
      activeDiscussionsCount: data.discussions.length,
      totalViews: data.totalViews,
      engagementRate: totalComments > 0 ? Math.round((engagementCount / totalComments) * 100) : 0,
      platformsWithData: 74, // –ö–∞–∫ –≤ —ç—Ç–∞–ª–æ–Ω–µ
      processingTime,
      qualityScore: 85 // –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  private getCleanValue(value: any): string {
    if (value === null || value === undefined) return '';
    return value.toString().trim();
  }

  private formatDate(date: Date): string {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
  }

  private formatDateString(dateStr: string): string {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
    if (dateStr.includes('/')) {
      const parts = dateStr.split('/');
      if (parts.length === 3) {
        const month = parts[0].padStart(2, '0');
        const day = parts[1].padStart(2, '0');
        const year = parts[2];
        return `${day}.${month}.${year}`;
      }
    }
    return dateStr;
  }

  private formatExcelDate(serialNumber: number): string {
    try {
      const date = new Date((serialNumber - 25569) * 86400 * 1000);
      return this.formatDate(date);
    } catch (error) {
      return serialNumber.toString();
    }
  }

  private generateOutputFileName(originalFileName: string, monthName: string): string {
    const baseName = originalFileName.replace(/\.[^/.]+$/, '');
    const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    return `${baseName}_${monthName}_2025_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_${timestamp}.xlsx`;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
export const reliableProcessor = new ExcelProcessorReliable();