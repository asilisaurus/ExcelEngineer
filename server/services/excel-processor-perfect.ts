import * as XLSX from 'xlsx';
import ExcelJS from 'exceljs';
import type { ProcessingStats } from '@shared/schema';

interface DataRow {
  –ø–ª–æ—â–∞–¥–∫–∞: string;
  —Ç–µ–º–∞: string;
  —Ç–µ–∫—Å—Ç: string;
  –¥–∞—Ç–∞: string;
  –Ω–∏–∫: string;
  –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: number | string;
  –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: string;
  —Ç–∏–ø–ü–æ—Å—Ç–∞: string;
}

interface ProcessedData {
  reviews: DataRow[];
  comments: DataRow[];
  activeDiscussions: DataRow[];
  statistics: ProcessingStats;
  monthName: string;
  fileName: string;
}

export class ExcelProcessorPerfect {
  
  async processExcelFile(buffer: Buffer, originalFileName: string): Promise<{ workbook: any; statistics: ProcessingStats }> {
    console.log('üîÑ PERFECT PROCESSOR - –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', originalFileName);
    
    try {
      // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
      const workbook = XLSX.read(buffer, { 
        type: 'buffer',
        cellDates: false, // –í–∞–∂–Ω–æ: —á–∏—Ç–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–∞, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞—Ç—ã
        cellNF: false,
        cellText: false
      });
      
      console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã:', workbook.SheetNames);
      
      // –ù–∞—Ö–æ–¥–∏–º –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
      const sheetName = workbook.SheetNames[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
      console.log('üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç:', sheetName);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { 
        header: 1, 
        defval: '',
        raw: true // –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      }) as any[][];
      
      console.log('üìà –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞:', jsonData.length);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
      const processedData = this.extractDataPerfectly(jsonData, sheetName);
      
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:', {
        reviews: processedData.reviews.length,
        comments: processedData.comments.length,
        active: processedData.activeDiscussions.length,
        totalViews: processedData.statistics.totalViews,
        fileName: processedData.fileName
      });
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
      const formattedWorkbook = await this.createPerfectWorkbook(processedData);
      
      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      
      return {
        workbook: formattedWorkbook,
        statistics: processedData.statistics
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  private extractDataPerfectly(jsonData: any[][], sheetName: string): ProcessedData {
    console.log('üîç PERFECT EXTRACTION - –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...');
    
    const reviews: DataRow[] = [];
    const comments: DataRow[] = [];
    const activeDiscussions: DataRow[] = [];
    
    let totalViews = 0;
    let engagementCount = 0;
    let commentsWithViews = 0;
    
    for (let i = 0; i < jsonData.length; i++) {
      const row = jsonData[i];
      if (!row || !Array.isArray(row) || row.length === 0) continue;
      
      const firstCell = this.getCleanValue(row[0]).toLowerCase();
      
      // –û—Ç–∑—ã–≤—ã - —Å—Ç—Ä–æ–∫–∏ —Å "–æ—Ç–∑—ã–≤" –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
      if (firstCell.includes('–æ—Ç–∑—ã–≤')) {
        const reviewData = this.extractReviewData(row, i + 1);
        if (reviewData) {
          reviews.push(reviewData);
        }
      }
      
      // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - —Å—Ç—Ä–æ–∫–∏ —Å "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏" –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ  
      else if (firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')) {
        const commentData = this.extractCommentData(row, i + 1);
        if (commentData) {
          // –ü–µ—Ä–≤—ã–µ 20 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–¥—É—Ç –≤ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20 –≤—ã–¥–∞—á–∏"
          if (comments.length < 20) {
            comments.push(commentData);
          } else {
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤ "–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è"
            activeDiscussions.push(commentData);
          }
          
          // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
          if (typeof commentData.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã === 'number') {
            totalViews += commentData.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã;
            commentsWithViews++;
          }
          
          if (commentData.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ && 
              (commentData.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.toLowerCase().includes('–µ—Å—Ç—å') || 
               commentData.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.toLowerCase().includes('–¥–∞') ||
               commentData.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ.toLowerCase().includes('+'))) {
            engagementCount++;
          }
        }
      }
    }
    
    console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ: ${reviews.length} –æ—Ç–∑—ã–≤–æ–≤, ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, ${activeDiscussions.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${totalViews} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, ${engagementCount} –≤–æ–≤–ª–µ—á–µ–Ω–∏–π`);
    
    const totalRows = reviews.length + comments.length + activeDiscussions.length;
    const discussionCount = comments.length + activeDiscussions.length;
    const engagementRate = discussionCount > 0 ? Math.round((engagementCount / discussionCount) * 100) : 0;
    const platformsWithData = commentsWithViews > 0 ? Math.round((commentsWithViews / discussionCount) * 100) : 0;
    
    const statistics: ProcessingStats = {
      totalRows,
      reviewsCount: reviews.length,
      commentsCount: discussionCount,
      activeDiscussionsCount: activeDiscussions.length,
      totalViews,
      engagementRate,
      platformsWithData
    };
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏ —Ñ–∞–π–ª–∞
    const monthName = this.extractMonthName(sheetName);
    const fileName = this.generateFileName('source_file', monthName);
    
    return {
      reviews,
      comments,
      activeDiscussions,
      statistics,
      monthName,
      fileName
    };
  }

  private extractReviewData(row: any[], rowIndex: number): DataRow | null {
    try {
      const –ø–ª–æ—â–∞–¥–∫–∞ = this.getCleanValue(row[1]);
      const —Ç–µ–º–∞ = this.getCleanValue(row[2]);
      const —Ç–µ–∫—Å—Ç = this.getCleanValue(row[4]);
      const –¥–∞—Ç–∞ = this.convertExcelDateToString(row[6]);
      const –Ω–∏–∫ = this.getCleanValue(row[7]);
      
      if (!–ø–ª–æ—â–∞–¥–∫–∞ && !—Ç–µ–∫—Å—Ç) return null;
      
      return {
        –ø–ª–æ—â–∞–¥–∫–∞,
        —Ç–µ–º–∞,
        —Ç–µ–∫—Å—Ç,
        –¥–∞—Ç–∞,
        –Ω–∏–∫,
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        —Ç–∏–ø–ü–æ—Å—Ç–∞: '–û–°'
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex}:`, error);
      return null;
    }
  }

  private extractCommentData(row: any[], rowIndex: number): DataRow | null {
    try {
      const –ø–ª–æ—â–∞–¥–∫–∞ = this.getCleanValue(row[1]);
      const —Ç–µ–º–∞ = this.getCleanValue(row[2]);
      const —Ç–µ–∫—Å—Ç = this.getCleanValue(row[4]);
      
      // –ö–æ–ª–æ–Ω–∫–∞ G (6) –í–°–ï–ì–î–ê —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—É –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      const –¥–∞—Ç–∞ = this.convertExcelDateToString(row[6]);
      const –Ω–∏–∫ = this.getCleanValue(row[7]);
      
      // –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ù–ï –≤ –∫–æ–ª–æ–Ω–∫–µ G (—Ç–∞–º –¥–∞—Ç–∞)!
      const –ø—Ä–æ—Å–º–æ—Ç—Ä—ã = this.extractViews(row);
      const –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ = this.getCleanValue(row[12]) || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
      
      if (!–ø–ª–æ—â–∞–¥–∫–∞ && !—Ç–µ–∫—Å—Ç) return null;
      
      return {
        –ø–ª–æ—â–∞–¥–∫–∞,
        —Ç–µ–º–∞,
        —Ç–µ–∫—Å—Ç,
        –¥–∞—Ç–∞,
        –Ω–∏–∫,
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
        –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ,
        —Ç–∏–ø–ü–æ—Å—Ç–∞: '–¶–°'
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex}:`, error);
      return null;
    }
  }

  private convertExcelDateToString(dateValue: any): string {
    if (!dateValue) return '';
    
    // –ï—Å–ª–∏ —ç—Ç–æ Excel serial number (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 40000)
    if (typeof dateValue === 'number' && dateValue > 40000) {
      try {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Excel serial number –≤ –¥–∞—Ç—É
        const date = new Date((dateValue - 25569) * 86400 * 1000);
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear();
        return `${day}.${month}.${year}`;
      } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –¥–∞—Ç—ã:', dateValue, error);
        return dateValue.toString();
      }
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π
    if (typeof dateValue === 'string' && dateValue.includes('/')) {
      const parts = dateValue.split('/');
      if (parts.length === 3) {
        const day = parts[1].padStart(2, '0');
        const month = parts[0].padStart(2, '0');
        const year = parts[2];
        return `${day}.${month}.${year}`;
      }
    }
    
    return dateValue.toString();
  }

  private extractViews(row: any[]): number | string {
    // –í–ê–ñ–ù–û: –ö–æ–ª–æ–Ω–∫–∞ G (6) —Å–æ–¥–µ—Ä–∂–∏—Ç –î–ê–¢–´ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel serial number, –ù–ï –ø—Ä–æ—Å–º–æ—Ç—Ä—ã!
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É K (10) - —Ç–∞–º —á–∞—â–µ –≤—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
    if (row[10] && typeof row[10] === 'number' && row[10] > 100 && row[10] < 1000000) {
      return Math.round(row[10]);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É L (11) 
    if (row[11] && typeof row[11] === 'number' && row[11] > 100 && row[11] < 1000000) {
      return Math.round(row[11]);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É M (12)
    if (row[12] && typeof row[12] === 'number' && row[12] > 100 && row[12] < 1000000) {
      return Math.round(row[12]);
    }
    
    // –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É G (6) - —Ç–∞–º –¥–∞—Ç—ã!
    
    return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
  }

  private getCleanValue(value: any): string {
    if (value === null || value === undefined) return '';
    return value.toString().trim();
  }

  private extractMonthName(sheetName: string): string {
    const monthsMap: { [key: string]: string } = {
      '–º–∞—Ä—Ç': '–ú–∞—Ä—Ç',
      '–º–∞—Ä': '–ú–∞—Ä—Ç',
      'march': '–ú–∞—Ä—Ç',
      'mar': '–ú–∞—Ä—Ç',
      '—è–Ω–≤': '–Ø–Ω–≤–∞—Ä—å',
      '—Ñ–µ–≤': '–§–µ–≤—Ä–∞–ª—å',
      '–∞–ø—Ä': '–ê–ø—Ä–µ–ª—å',
      '–º–∞–π': '–ú–∞–π',
      '–∏—é–Ω': '–ò—é–Ω—å',
      '–∏—é–ª': '–ò—é–ª—å',
      '–∞–≤–≥': '–ê–≤–≥—É—Å—Ç',
      '—Å–µ–Ω': '–°–µ–Ω—Ç—è–±—Ä—å',
      '–æ–∫—Ç': '–û–∫—Ç—è–±—Ä—å',
      '–Ω–æ—è': '–ù–æ—è–±—Ä—å',
      '–¥–µ–∫': '–î–µ–∫–∞–±—Ä—å'
    };
    
    const lowerSheetName = sheetName.toLowerCase();
    for (const [key, value] of Object.entries(monthsMap)) {
      if (lowerSheetName.includes(key)) {
        return value;
      }
    }
    
    return '–ú–∞—Ä—Ç'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  private generateFileName(originalFileName: string, monthName: string): string {
    const baseName = originalFileName.replace(/\.[^/.]+$/, ''); // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    return `${baseName}_${monthName}_2025_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_${timestamp}.xlsx`;
  }

  private async createPerfectWorkbook(data: ProcessedData): Promise<any> {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...');
    
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet(`${data.monthName} 2025`);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Ä–∞–∑—Ü—É
    worksheet.columns = [
      { width: 60 }, // –ü–ª–æ—â–∞–¥–∫–∞ - —à–∏—Ä–æ–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞
      { width: 30 }, // –¢–µ–º–∞
      { width: 80 }, // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è - —Å–∞–º–∞—è —à–∏—Ä–æ–∫–∞—è
      { width: 12 }, // –î–∞—Ç–∞
      { width: 20 }, // –ù–∏–∫
      { width: 12 }, // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
      { width: 15 }, // –í–æ–≤–ª–µ—á–µ–Ω–∏–µ
      { width: 10 }, // –¢–∏–ø –ø–æ—Å—Ç–∞
      { width: 8 },  // –û—Ç–∑—ã–≤
      { width: 12 }, // –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      { width: 15 }, // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ
      { width: 8 }   // –í—Å–µ–≥–æ
    ];

    // –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–ø–∫–∏ –æ—Ç—á–µ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    this.createPerfectHeader(worksheet, data);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
    this.createPerfectTableHeaders(worksheet, data);

    let currentRow = 5;

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
    currentRow = this.addPerfectSection(worksheet, '–û—Ç–∑—ã–≤—ã', data.reviews, currentRow);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ç–æ–ø-20
    currentRow = this.addPerfectSection(worksheet, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20 –≤—ã–¥–∞—á–∏', data.comments, currentRow);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (data.activeDiscussions.length > 0) {
      currentRow = this.addPerfectSection(worksheet, '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)', data.activeDiscussions, currentRow);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    this.addPerfectSummary(worksheet, data.statistics, currentRow + 2);

    console.log('‚úÖ –ò–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω');
    return workbook;
  }

  private createPerfectHeader(worksheet: ExcelJS.Worksheet, data: ProcessedData): void {
    // –°—Ç–∏–ª–∏ –¥–ª—è —à–∞–ø–∫–∏ - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ñ–æ–Ω –∫–∞–∫ –≤ –æ–±—Ä–∞–∑—Ü–µ
    const headerFill = { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'FF2D1B69' } };
    const headerFont = { name: 'Arial', size: 9, bold: true, color: { argb: 'FFFFFFFF' } };
    const centerAlign = { horizontal: 'center' as const, vertical: 'middle' as const, wrapText: true };
    
    // –°—Ç—Ä–æ–∫–∞ 1: –ü—Ä–æ–¥—É–∫—Ç
    worksheet.mergeCells('A1:B1');
    worksheet.getCell('A1').value = '–ü—Ä–æ–¥—É–∫—Ç';
    worksheet.mergeCells('C1:H1');
    worksheet.getCell('C1').value = '–ê–∫—Ä–∏—Ö–∏–Ω - –§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º';
    
    // –°—Ç—Ä–æ–∫–∞ 2: –ü–µ—Ä–∏–æ–¥
    worksheet.mergeCells('A2:B2');
    worksheet.getCell('A2').value = '–ü–µ—Ä–∏–æ–¥';
    worksheet.mergeCells('C2:H2');
    worksheet.getCell('C2').value = `${data.monthName} 2025`;
    
    // –°—Ç—Ä–æ–∫–∞ 3: –ü–ª–∞–Ω —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    worksheet.mergeCells('A3:B3');
    worksheet.getCell('A3').value = '–ü–ª–∞–Ω';
    worksheet.mergeCells('C3:H3');
    worksheet.getCell('C3').value = `–û—Ç–∑—ã–≤—ã - ${data.statistics.reviewsCount}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - ${data.statistics.commentsCount}`;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ 3
    worksheet.getCell('I3').value = '–û—Ç–∑—ã–≤';
    worksheet.getCell('J3').value = '–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ';
    worksheet.getCell('K3').value = '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ';
    worksheet.getCell('L3').value = '–í—Å–µ–≥–æ';

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫ —à–∞–ø–∫–µ
    for (let row = 1; row <= 3; row++) {
      for (let col = 1; col <= 12; col++) {
        const cell = worksheet.getCell(row, col);
        cell.fill = headerFill;
        cell.font = headerFont;
        cell.alignment = centerAlign;
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        };
      }
    }
  }

  private createPerfectTableHeaders(worksheet: ExcelJS.Worksheet, data: ProcessedData): void {
    const headers = [
      '–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–î–∞—Ç–∞', '–ù–∏–∫', 
      '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø –ø–æ—Å—Ç–∞', 
      data.statistics.reviewsCount.toString(),
      data.statistics.commentsCount.toString(),
      '', 
      data.statistics.totalRows.toString()
    ];
    
    const headerRow = worksheet.getRow(4);
    headerRow.values = headers;
    
    const headerFill = { type: 'pattern' as const, pattern: 'solid' as const, fgColor: { argb: 'FF2D1B69' } };
    const headerFont = { name: 'Arial', size: 9, bold: true, color: { argb: 'FFFFFFFF' } };
    const centerAlign = { horizontal: 'center' as const, vertical: 'middle' as const, wrapText: true };

    headers.forEach((_, index) => {
      const cell = headerRow.getCell(index + 1);
      cell.font = headerFont;
      cell.fill = headerFill;
      cell.alignment = centerAlign;
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      };
    });
  }

  private addPerfectSection(worksheet: ExcelJS.Worksheet, sectionName: string, data: DataRow[], startRow: number): number {
    let currentRow = startRow;

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ —Å –≥–æ–ª—É–±—ã–º —Ñ–æ–Ω–æ–º
    worksheet.mergeCells(`A${currentRow}:H${currentRow}`);
    const sectionCell = worksheet.getCell(`A${currentRow}`);
    sectionCell.value = sectionName;
    sectionCell.font = { name: 'Arial', size: 9, bold: true, color: { argb: 'FF000000' } };
    sectionCell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFC5D9F1' } };
    sectionCell.alignment = { horizontal: 'center', vertical: 'middle', wrapText: true };
    sectionCell.border = {
      top: { style: 'thin' },
      left: { style: 'thin' },
      bottom: { style: 'thin' },
      right: { style: 'thin' }
    };
    worksheet.getRow(currentRow).height = 12;
    currentRow++;

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    data.forEach(row => {
      const dataRow = worksheet.getRow(currentRow);
      dataRow.values = [
        row.–ø–ª–æ—â–∞–¥–∫–∞,
        row.—Ç–µ–º–∞, 
        row.—Ç–µ–∫—Å—Ç,
        row.–¥–∞—Ç–∞,
        row.–Ω–∏–∫,
        row.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
        row.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ,
        row.—Ç–∏–ø–ü–æ—Å—Ç–∞
      ];
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫ –¥–∞–Ω–Ω—ã—Ö
      dataRow.eachCell((cell: any, colNumber: number) => {
        cell.font = { name: 'Arial', size: 9 };
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        };
        
        if (colNumber === 4 && cell.value) { // –î–∞—Ç–∞
          cell.alignment = { horizontal: 'center', vertical: 'top', wrapText: true };
        } else if (colNumber === 6) { // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
          cell.alignment = { horizontal: 'center', vertical: 'top', wrapText: true };
        } else {
          cell.alignment = { horizontal: 'left', vertical: 'top', wrapText: true };
        }
      });
      
      dataRow.height = 12;
      currentRow++;
    });
    
    return currentRow + 1;
  }

  private addPerfectSummary(worksheet: ExcelJS.Worksheet, statistics: ProcessingStats, startRow: number): void {
    const summaryData = [
      ['', '', '', '', '', `–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤*`, statistics.totalViews.toString()],
      ['', '', '', '', '', `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç–∑—ã–≤—ã)`, statistics.reviewsCount.toString()],
      ['', '', '', '', '', `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (—Ñ–æ—Ä—É–º—ã, —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç–∞—Ç—å—è–º)`, statistics.commentsCount.toString()],
      ['', '', '', '', '', `–î–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º –≤ –¥–∏–∞–ª–æ–≥`, `${statistics.engagementRate}%`],
      ['', '', '', '', '', '', ''],
      ['', '', '*–ë–µ–∑ —É—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–æ–∫ —Å –∑–∞–∫—Ä—ã—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ—á—Ç–µ–Ω–∏–π', '', '', '', ''],
      ['', '', `–ü–ª–æ—â–∞–¥–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`, '', '', '', `${statistics.platformsWithData}%`],
      ['', '', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á—Ç–µ–Ω–∏–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ 30% –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤, —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.', '', '', '', '']
    ];

    summaryData.forEach((rowData, index) => {
      const row = worksheet.getRow(startRow + index);
      row.values = rowData;
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ (–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω)
      if (index === 6) {
        for (let col = 1; col <= 8; col++) {
          const cell = row.getCell(col);
          cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFFF00' } };
          cell.font = { name: 'Arial', size: 9, bold: true };
        }
      }
      
      row.eachCell((cell: any) => {
        if (index !== 6) {
          cell.font = { name: 'Arial', size: 9 };
        }
        cell.alignment = { horizontal: 'left', vertical: 'top', wrapText: true };
      });
    });
  }
}

export const perfectProcessor = new ExcelProcessorPerfect(); 