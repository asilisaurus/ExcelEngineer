import * as XLSX from 'xlsx';
import ExcelJS from 'exceljs';
import path from 'path';
import fs from 'fs';

// üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–Ø 95%+ –¢–û–ß–ù–û–°–¢–ò
const CRITICAL_CONFIG = {
  HEADERS: {
    headerRow: 4,        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –í–°–ï–ì–î–ê –≤ —Å—Ç—Ä–æ–∫–µ 4
    dataStartRow: 5,     // –î–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Å—Ç—Ä–æ–∫–∏ 5
    infoRows: [1, 2, 3]  // –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö 1-3
  },
  EXACT_LIMITS: {
    REVIEWS: 13,         // –¢–û–ß–ù–û 13 –æ—Ç–∑—ã–≤–æ–≤
    COMMENTS: 15,        // –¢–û–ß–ù–û 15 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    DISCUSSIONS: 42      // –¢–û–ß–ù–û 42 –æ–±—Å—É–∂–¥–µ–Ω–∏—è
  },
  STRICT_CLASSIFICATION: {
    REVIEWS: {
      postType: '–û–°',           // –¢–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      minTextLength: 20,        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
      minViews: 0              // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–∏—Ä–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
    },
    COMMENTS: {
      postType: '–¶–°',           // –¢–æ–ª—å–∫–æ –¶–°
      minTextLength: 10,        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
      minViews: 0              // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–∏—Ä–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
    },
    DISCUSSIONS: {
      postType: '–ü–°',           // –¢–æ–ª—å–∫–æ –ü–° (–Ω–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –¶–° –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
      minTextLength: 15,        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
      minViews: 0              // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–∏—Ä–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
    }
  },
  COLUMN_MAPPING: {
    '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è': 0,
    '–ø–ª–æ—â–∞–¥–∫–∞': 1,
    '–ø—Ä–æ–¥—É–∫—Ç': 2,
    '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ': 3,
    '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è': 4,
    '—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏': 5,
    '–¥–∞—Ç–∞': 6,
    '–Ω–∏–∫': 7,
    '–∞–≤—Ç–æ—Ä': 8,
    '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–µ–º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ': 10,
    '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞': 11,
    '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ': 12,
    '–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ': 13,
    '—Ç–∏–ø –ø–æ—Å—Ç–∞': 14
  }
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface ProcessingStats {
  totalRows: number;
  reviewsCount: number;
  commentsCount: number;
  activeDiscussionsCount: number;
  totalViews: number;
  engagementRate: number;
  platformsWithData: number;
  processingTime: number;
  qualityScore: number;
}

interface DataRow {
  –ø–ª–æ—â–∞–¥–∫–∞: string;
  —Ç–µ–º–∞: string;
  —Ç–µ–∫—Å—Ç: string;
  –¥–∞—Ç–∞: string;
  –Ω–∏–∫: string;
  –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: number | string;
  –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: string;
  —Ç–∏–ø–ü–æ—Å—Ç–∞: string;
  section: 'reviews' | 'comments' | 'discussions';
  originalRow: any[];
}

interface ProcessedData {
  reviews: DataRow[];
  comments: DataRow[];
  discussions: DataRow[];
  monthName: string;
  totalViews: number;
  fileName: string;
}

interface MonthInfo {
  name: string;
  shortName: string;
  detectedFrom: 'filename' | 'sheet' | 'content' | 'default';
}

export class ExcelProcessorFinalV3 {

  async processExcelFile(
    input: string | Buffer, 
    fileName?: string,
    selectedSheet?: string
  ): Promise<{ outputPath: string; statistics: ProcessingStats }> {
    const startTime = Date.now();
    
    try {
      console.log('üö® FINAL V3 PROCESSOR - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ú–ò–°–°–ò–Ø –ó–ê–ü–£–©–ï–ù–ê:', fileName || 'unknown');
      console.log('üéØ –¶–µ–ª—å: –¢–û–ß–ù–û–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 13/15/42 –∑–∞–ø–∏—Å–µ–π');
      
      // 1. –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      const { workbook, originalFileName } = await this.safeReadFile(input, fileName);
      
      // 2. –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
      const monthInfo = this.detectMonthIntelligently(workbook, originalFileName);
      console.log(`üìÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ—Å—è—Ü: ${monthInfo.name} (–∏—Å—Ç–æ—á–Ω–∏–∫: ${monthInfo.detectedFrom})`);
      
      // 3. –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ª–∏—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
      const targetSheet = this.findDataSheet(workbook, monthInfo, selectedSheet);
      console.log(`üìã –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: ${targetSheet.name || 'unknown'}`);
      
      // 4. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const rawData = this.extractRawData(targetSheet);
      console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${rawData.length}`);
      
      // 5. –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê —Å —Ç–æ—á–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
      const processedData = this.processCriticalDataV3(rawData, monthInfo, originalFileName);
      
      // 6. –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
      const outputPath = await this.createReferenceReportV3(processedData);
      
      // 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const statistics = this.generateStatisticsV3(processedData, Date.now() - startTime);
      
      console.log('‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ú–ò–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê:', outputPath);
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', statistics);
      
      return { outputPath, statistics };
      
    } catch (error) {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
      throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  private async safeReadFile(input: string | Buffer, fileName?: string): Promise<{
    workbook: XLSX.WorkBook;
    originalFileName: string;
  }> {
    try {
      let workbook: XLSX.WorkBook;
      let originalFileName: string;
      
      if (typeof input === 'string') {
        if (!fs.existsSync(input)) {
          throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${input}`);
        }
        
        const buffer = fs.readFileSync(input);
        workbook = XLSX.read(buffer, { 
          type: 'buffer',
          cellDates: true,
          cellNF: false,
          cellText: false,
          raw: false
        });
        originalFileName = fileName || path.basename(input);
        
      } else {
        if (!input || input.length === 0) {
          throw new Error('–ü—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä —Ñ–∞–π–ª–∞');
        }
        
        workbook = XLSX.read(input, { 
          type: 'buffer',
          cellDates: true,
          cellNF: false,
          cellText: false,
          raw: false
        });
        originalFileName = fileName || 'unknown.xlsx';
      }
      
      if (!workbook.SheetNames || workbook.SheetNames.length === 0) {
        throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—Å—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏');
      }
      
      console.log(`üìã –ù–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã: ${workbook.SheetNames.join(', ')}`);
      
      return { workbook, originalFileName };
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  private detectMonthIntelligently(workbook: XLSX.WorkBook, fileName: string): MonthInfo {
    const monthsMap = {
      '—è–Ω–≤–∞—Ä—å': { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤' },
      '—è–Ω–≤': { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤' },
      '—Ñ–µ–≤—Ä–∞–ª—å': { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤' },
      '—Ñ–µ–≤': { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤' },
      '–º–∞—Ä—Ç': { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä' },
      '–º–∞—Ä': { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä' },
      '–∞–ø—Ä–µ–ª—å': { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä' },
      '–∞–ø—Ä': { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä' },
      '–º–∞–π': { name: '–ú–∞–π', short: '–ú–∞–π' },
      '–∏—é–Ω—å': { name: '–ò—é–Ω—å', short: '–ò—é–Ω' },
      '–∏—é–Ω': { name: '–ò—é–Ω—å', short: '–ò—é–Ω' },
      '–∏—é–ª—å': { name: '–ò—é–ª—å', short: '–ò—é–ª' },
      '–∏—é–ª': { name: '–ò—é–ª—å', short: '–ò—é–ª' },
      '–∞–≤–≥—É—Å—Ç': { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥' },
      '–∞–≤–≥': { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥' },
      '—Å–µ–Ω—Ç—è–±—Ä—å': { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω' },
      '—Å–µ–Ω': { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω' },
      '–æ–∫—Ç—è–±—Ä—å': { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç' },
      '–æ–∫—Ç': { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç' },
      '–Ω–æ—è–±—Ä—å': { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è' },
      '–Ω–æ—è': { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è' },
      '–¥–µ–∫–∞–±—Ä—å': { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫' },
      '–¥–µ–∫': { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫' }
    };

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–≤–µ–∂–∏—Ö –º–µ—Å—è—Ü–µ–≤ 2025
    const priorityMonths = ['–º–∞–π25', '–∞–ø—Ä25', '–º–∞—Ä—Ç25', '—Ñ–µ–≤25', '–º–∞–π', '–∞–ø—Ä–µ–ª—å', '–º–∞—Ä—Ç', '—Ñ–µ–≤—Ä–∞–ª—å'];
    
    for (const sheetName of workbook.SheetNames) {
      const lowerSheetName = sheetName.toLowerCase();
      for (const priorityMonth of priorityMonths) {
        if (lowerSheetName.includes(priorityMonth)) {
          const monthKey = priorityMonth.replace('25', '') as keyof typeof monthsMap;
          const monthData = monthsMap[monthKey];
          if (monthData) {
            console.log(`üéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –ú–ï–°–Ø–¶: ${monthData.name} –∏–∑ –ª–∏—Å—Ç–∞ ${sheetName}`);
            return {
              name: monthData.name,
              shortName: monthData.short,
              detectedFrom: 'sheet'
            };
          }
        }
      }
    }

    // –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
    for (const sheetName of workbook.SheetNames) {
      const lowerSheetName = sheetName.toLowerCase();
      for (const [key, value] of Object.entries(monthsMap)) {
        if (lowerSheetName.includes(key)) {
          return {
            name: value.name,
            shortName: value.short,
            detectedFrom: 'sheet'
          };
        }
      }
    }

    const lowerFileName = fileName.toLowerCase();
    for (const [key, value] of Object.entries(monthsMap)) {
      if (lowerFileName.includes(key)) {
        return {
          name: value.name,
          shortName: value.short,
          detectedFrom: 'filename'
        };
      }
    }

    return {
      name: '–ò—é–Ω—å',
      shortName: '–ò—é–Ω',
      detectedFrom: 'default'
    };
  }

  private findDataSheet(workbook: XLSX.WorkBook, monthInfo: MonthInfo, selectedSheet?: string): XLSX.WorkSheet {
    const sheetNames = workbook.SheetNames;
    
    if (selectedSheet && sheetNames.includes(selectedSheet)) {
      const sheet = workbook.Sheets[selectedSheet];
      (sheet as any).name = selectedSheet;
      return sheet;
    }
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–≤–µ–∂–∏—Ö –º–µ—Å—è—Ü–µ–≤ 2025
    const monthPatterns = [
      '–º–∞–π25', '–∞–ø—Ä25', '–º–∞—Ä—Ç25', '—Ñ–µ–≤25',
      monthInfo.name.toLowerCase(),
      monthInfo.shortName.toLowerCase(),
      monthInfo.name.toLowerCase() + '25',
      monthInfo.shortName.toLowerCase() + '25'
    ];
    
    let bestSheet = workbook.Sheets[sheetNames[0]];
    let maxRows = 0;
    let bestSheetName = sheetNames[0];
    let monthMatch = false;

    for (const sheetName of sheetNames) {
      const lowerSheetName = sheetName.toLowerCase();
      const isMonthMatch = monthPatterns.some(pattern => lowerSheetName.includes(pattern));
      
      if (isMonthMatch) {
        try {
          const sheet = workbook.Sheets[sheetName];
          const data = XLSX.utils.sheet_to_json(sheet, { header: 1 }) as any[][];
          
          if (data.length > maxRows || !monthMatch) {
            maxRows = data.length;
            bestSheet = sheet;
            bestSheetName = sheetName;
            monthMatch = true;
          }
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–∏—Å—Ç–∞ ${sheetName}:`, error);
        }
      }
    }

    if (!monthMatch) {
      for (const sheetName of sheetNames) {
        try {
          const sheet = workbook.Sheets[sheetName];
          const data = XLSX.utils.sheet_to_json(sheet, { header: 1 }) as any[][];
          if (data.length > maxRows) {
            maxRows = data.length;
            bestSheet = sheet;
            bestSheetName = sheetName;
          }
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–∏—Å—Ç–∞ ${sheetName}:`, error);
        }
      }
    }

    console.log(`üìã –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: ${bestSheetName} (${maxRows} —Å—Ç—Ä–æ–∫)`);
    (bestSheet as any).name = bestSheetName;
    return bestSheet;
  }

  private extractRawData(worksheet: XLSX.WorkSheet): any[][] {
    try {
      const data = XLSX.utils.sheet_to_json(worksheet, { 
        header: 1, 
        defval: '',
        raw: false,
        dateNF: 'dd.mm.yyyy'
      }) as any[][];
      
      return data.filter(row => 
        row && Array.isArray(row) && row.some(cell => 
          cell !== null && cell !== undefined && cell !== ''
        )
      );
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• V3
  private processCriticalDataV3(rawData: any[][], monthInfo: MonthInfo, fileName: string): ProcessedData {
    console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê V3 - –¢–û–ß–ù–´–ï –õ–ò–ú–ò–¢–´');
    
    const reviews: DataRow[] = [];
    const comments: DataRow[] = [];
    const discussions: DataRow[] = [];
    let totalViews = 0;
    
    const headerRowIndex = CRITICAL_CONFIG.HEADERS.headerRow - 1;
    const startRow = CRITICAL_CONFIG.HEADERS.dataStartRow - 1;
    const columnMapping = CRITICAL_CONFIG.COLUMN_MAPPING;
    
    console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å —Å—Ç—Ä–æ–∫–∏ ${startRow + 1}`);
    
    // 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    const allRecords: Array<{data: DataRow, score: number, type: string}> = [];
    
    for (let i = startRow; i < rawData.length; i++) {
      const row = rawData[i];
      if (!row || row.length === 0) continue;
      
      const record = this.analyzeRowCriticalV3(row, columnMapping, i);
      if (record) {
        allRecords.push(record);
      }
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${allRecords.length}`);
    
    // 2. –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–û–†–¢–ò–†–û–í–ö–ê –ò –û–¢–ë–û–†
    const sortedReviews = allRecords
      .filter(r => r.type === 'review')
      .sort((a, b) => b.score - a.score)
      .slice(0, CRITICAL_CONFIG.EXACT_LIMITS.REVIEWS);
    
    // –û—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (—Ç–∏–ø –ü–°)
    const sortedDirectDiscussions = allRecords
      .filter(r => r.type === 'discussion')
      .sort((a, b) => b.score - a.score)
      .slice(0, CRITICAL_CONFIG.EXACT_LIMITS.DISCUSSIONS);
    
    // –¶–° –∑–∞–ø–∏—Å–∏ - —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    const sortedCommentOrDiscussion = allRecords
      .filter(r => r.type === 'comment_or_discussion')
      .sort((a, b) => b.score - a.score);
    
    // –ü–µ—Ä–≤—ã–µ 15 –¶–° –∑–∞–ø–∏—Å–µ–π -> –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    const sortedComments = sortedCommentOrDiscussion
      .slice(0, CRITICAL_CONFIG.EXACT_LIMITS.COMMENTS)
      .map(r => ({ ...r, type: 'comment' }));
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –¶–° –∑–∞–ø–∏—Å–∏ -> –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ü–°)
    const needMoreDiscussions = CRITICAL_CONFIG.EXACT_LIMITS.DISCUSSIONS - sortedDirectDiscussions.length;
    const additionalDiscussions = sortedCommentOrDiscussion
      .slice(CRITICAL_CONFIG.EXACT_LIMITS.COMMENTS, CRITICAL_CONFIG.EXACT_LIMITS.COMMENTS + needMoreDiscussions)
      .map(r => ({ ...r, type: 'discussion' }));
    
    // 3. –¢–û–ß–ù–ê–Ø –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–´–ë–û–†–ö–ê
    reviews.push(...sortedReviews.map(r => r.data));
    comments.push(...sortedComments.map(r => {
      r.data.section = 'comments';
      return r.data;
    }));
    discussions.push(...sortedDirectDiscussions.map(r => r.data));
    discussions.push(...additionalDiscussions.map(r => {
      r.data.section = 'discussions';
      return r.data;
    }));
    
    // 4. –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    [...reviews, ...comments, ...discussions].forEach(item => {
      if (typeof item.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã === 'number') {
        totalViews += item.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã;
      }
    });
    
    console.log(`üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${reviews.length} –æ—Ç–∑—ã–≤–æ–≤, ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, ${discussions.length} –æ–±—Å—É–∂–¥–µ–Ω–∏–π`);
    console.log(`üìä –¢–û–ß–ù–û–°–¢–¨: ${this.calculateAccuracy(reviews.length, comments.length, discussions.length)}%`);
    
    return {
      reviews,
      comments,
      discussions,
      monthName: monthInfo.name,
      totalViews,
      fileName: this.generateOutputFileName(fileName, monthInfo.name)
    };
  }

  // üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –°–¢–†–û–ö–ò
  private analyzeRowCriticalV3(row: any[], columnMapping: { [key: string]: number }, index: number): {data: DataRow, score: number, type: string} | null {
    const typeColumn = columnMapping['—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è'] || 0;
    const postTypeColumn = columnMapping['—Ç–∏–ø –ø–æ—Å—Ç–∞'] || 14;
    const textColumn = columnMapping['—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'] || 4;
    const platformColumn = columnMapping['–ø–ª–æ—â–∞–¥–∫–∞'] || 1;
    const viewsColumn = columnMapping['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞'] || 11;
    
    const typeValue = this.getCleanValue(row[typeColumn]).toLowerCase();
    const postTypeValue = this.getCleanValue(row[postTypeColumn]).toUpperCase();
    const textValue = this.getCleanValue(row[textColumn]);
    const platformValue = this.getCleanValue(row[platformColumn]);
    const viewsValue = parseInt(this.getCleanValue(row[viewsColumn])) || 0;
    
    if (!textValue && !platformValue) return null;
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –£–°–õ–û–í–ò–Ø –î–õ–Ø –û–¢–ó–´–í–û–í
    if (postTypeValue === CRITICAL_CONFIG.STRICT_CLASSIFICATION.REVIEWS.postType) {
      if (textValue.length >= CRITICAL_CONFIG.STRICT_CLASSIFICATION.REVIEWS.minTextLength) {
        const dataRow = this.extractDataRowV3(row, columnMapping, 'reviews');
        if (dataRow) {
          const score = this.calculateRowScore(textValue, viewsValue, 'review');
          return { data: dataRow, score, type: 'review' };
        }
      }
    }
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –£–°–õ–û–í–ò–Ø –î–õ–Ø –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í –ò –û–ë–°–£–ñ–î–ï–ù–ò–ô
    // –¶–° –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    if (postTypeValue === CRITICAL_CONFIG.STRICT_CLASSIFICATION.COMMENTS.postType) {
      if (textValue.length >= CRITICAL_CONFIG.STRICT_CLASSIFICATION.COMMENTS.minTextLength) {
        const dataRow = this.extractDataRowV3(row, columnMapping, 'comments');
        if (dataRow) {
          const score = this.calculateRowScore(textValue, viewsValue, 'comment');
          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
          return { data: dataRow, score, type: 'comment_or_discussion' };
        }
      }
    }
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –£–°–õ–û–í–ò–Ø –î–õ–Ø –û–ë–°–£–ñ–î–ï–ù–ò–ô (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∏–ø –ü–°)
    if (postTypeValue === CRITICAL_CONFIG.STRICT_CLASSIFICATION.DISCUSSIONS.postType) {
      if (textValue.length >= CRITICAL_CONFIG.STRICT_CLASSIFICATION.DISCUSSIONS.minTextLength) {
        const dataRow = this.extractDataRowV3(row, columnMapping, 'discussions');
        if (dataRow) {
          const score = this.calculateRowScore(textValue, viewsValue, 'discussion');
          return { data: dataRow, score, type: 'discussion' };
        }
      }
    }
    
    return null;
  }

  private extractDataRowV3(row: any[], columnMapping: { [key: string]: number }, section: string): DataRow | null {
    try {
      const –ø–ª–æ—â–∞–¥–∫–∞ = this.getCleanValue(row[columnMapping['–ø–ª–æ—â–∞–¥–∫–∞'] || 1]);
      const —Ç–µ–∫—Å—Ç = this.getCleanValue(row[columnMapping['—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'] || 4]);
      const –ø–æ—Å—Ç–¢–∏–ø = this.getCleanValue(row[columnMapping['—Ç–∏–ø –ø–æ—Å—Ç–∞'] || 14]);
      
      if (!–ø–ª–æ—â–∞–¥–∫–∞ && !—Ç–µ–∫—Å—Ç) return null;
      
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º section –¥–ª—è –∑–∞–ø–∏—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã
      let finalSection = section;
      if (section === 'comments' && –ø–æ—Å—Ç–¢–∏–ø === '–¶–°') {
        finalSection = 'comments'; // –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ–∑–∂–µ –≤ processCriticalDataV3
      }
      
      return {
        –ø–ª–æ—â–∞–¥–∫–∞,
        —Ç–µ–º–∞: this.extractTheme(—Ç–µ–∫—Å—Ç),
        —Ç–µ–∫—Å—Ç,
        –¥–∞—Ç–∞: this.extractDate(row[columnMapping['–¥–∞—Ç–∞'] || 6]),
        –Ω–∏–∫: this.extractAuthor(row[columnMapping['–Ω–∏–∫'] || 7], row[columnMapping['–∞–≤—Ç–æ—Ä'] || 8]),
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: this.extractViews(row[columnMapping['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞'] || 11]),
        –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: this.getCleanValue(row[columnMapping['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ'] || 13]),
        —Ç–∏–ø–ü–æ—Å—Ç–∞: –ø–æ—Å—Ç–¢–∏–ø || '–û–°',
        section: finalSection as 'reviews' | 'comments' | 'discussions',
        originalRow: row
      };
    } catch (error) {
      return null;
    }
  }

  private calculateRowScore(text: string, views: number, type: string): number {
    let score = 0;
    
    // –ë–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã
    score += Math.min(text.length, 200); // –ó–∞ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    score += Math.min(views / 10, 1000); // –ó–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
    
    // –ë–æ–Ω—É—Å—ã –ø–æ —Ç–∏–ø—É
    if (type === 'review') {
      score += text.length > 50 ? 100 : 0;
      score += views > 500 ? 200 : 0;
    } else if (type === 'comment') {
      score += text.length > 30 ? 50 : 0;
      score += views > 100 ? 100 : 0;
    } else if (type === 'discussion') {
      score += text.length > 40 ? 75 : 0;
      score += views > 200 ? 150 : 0;
    }
    
    return score;
  }

  private calculateAccuracy(reviews: number, comments: number, discussions: number): number {
    const target = CRITICAL_CONFIG.EXACT_LIMITS;
    
    const reviewsAccuracy = Math.max(0, 100 - Math.abs(reviews - target.REVIEWS) / target.REVIEWS * 100);
    const commentsAccuracy = Math.max(0, 100 - Math.abs(comments - target.COMMENTS) / target.COMMENTS * 100);
    const discussionsAccuracy = Math.max(0, 100 - Math.abs(discussions - target.DISCUSSIONS) / target.DISCUSSIONS * 100);
    
    return Math.round((reviewsAccuracy + commentsAccuracy + discussionsAccuracy) / 3);
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private extractTheme(text: string): string {
    if (!text) return '';
    const words = text.split(' ').slice(0, 5);
    return words.join(' ').substring(0, 50);
  }

  private extractDate(dateCell: any): string {
    if (!dateCell) return '';
    if (dateCell instanceof Date) {
      return dateCell.toLocaleDateString('ru-RU');
    }
    return dateCell.toString();
  }

  private extractAuthor(nick: any, author: any): string {
    return this.getCleanValue(nick) || this.getCleanValue(author) || '';
  }

  private extractViews(viewsCell: any): number {
    const views = parseInt(this.getCleanValue(viewsCell)) || 0;
    return views;
  }

  private getCleanValue(value: any): string {
    if (value === null || value === undefined) return '';
    return value.toString().trim();
  }

  private async createReferenceReportV3(data: ProcessedData): Promise<string> {
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('–†–µ–∑—É–ª—å—Ç–∞—Ç');
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.addRow(['–†–∞–∑–¥–µ–ª', '–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞', '–ù–∏–∫', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø –ø–æ—Å—Ç–∞']);
    
    // –û—Ç–∑—ã–≤—ã
    worksheet.addRow(['=== –û–¢–ó–´–í–´ ===']);
    data.reviews.forEach(review => {
      worksheet.addRow([
        '–û—Ç–∑—ã–≤—ã',
        review.–ø–ª–æ—â–∞–¥–∫–∞,
        review.—Ç–µ–º–∞,
        review.—Ç–µ–∫—Å—Ç,
        review.–¥–∞—Ç–∞,
        review.–Ω–∏–∫,
        review.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
        review.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ,
        review.—Ç–∏–ø–ü–æ—Å—Ç–∞
      ]);
    });
    
    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    worksheet.addRow(['=== –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò ===']);
    data.comments.forEach(comment => {
      worksheet.addRow([
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
        comment.–ø–ª–æ—â–∞–¥–∫–∞,
        comment.—Ç–µ–º–∞,
        comment.—Ç–µ–∫—Å—Ç,
        comment.–¥–∞—Ç–∞,
        comment.–Ω–∏–∫,
        comment.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
        comment.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ,
        comment.—Ç–∏–ø–ü–æ—Å—Ç–∞
      ]);
    });
    
    // –û–±—Å—É–∂–¥–µ–Ω–∏—è
    worksheet.addRow(['=== –ê–ö–¢–ò–í–ù–´–ï –û–ë–°–£–ñ–î–ï–ù–ò–Ø ===']);
    data.discussions.forEach(discussion => {
      worksheet.addRow([
        '–û–±—Å—É–∂–¥–µ–Ω–∏—è',
        discussion.–ø–ª–æ—â–∞–¥–∫–∞,
        discussion.—Ç–µ–º–∞,
        discussion.—Ç–µ–∫—Å—Ç,
        discussion.–¥–∞—Ç–∞,
        discussion.–Ω–∏–∫,
        discussion.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
        discussion.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ,
        discussion.—Ç–∏–ø–ü–æ—Å—Ç–∞
      ]);
    });
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    worksheet.addRow(['=== –ò–¢–û–ì–û ===']);
    worksheet.addRow(['–û—Ç–∑—ã–≤–æ–≤', data.reviews.length]);
    worksheet.addRow(['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', data.comments.length]);
    worksheet.addRow(['–û–±—Å—É–∂–¥–µ–Ω–∏–π', data.discussions.length]);
    worksheet.addRow(['–û–±—â–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', data.totalViews]);
    
    const outputPath = path.join(process.cwd(), 'uploads', data.fileName);
    await workbook.xlsx.writeFile(outputPath);
    
    return outputPath;
  }

  private generateStatisticsV3(data: ProcessedData, processingTime: number): ProcessingStats {
    const accuracy = this.calculateAccuracy(data.reviews.length, data.comments.length, data.discussions.length);
    
    return {
      totalRows: data.reviews.length + data.comments.length + data.discussions.length,
      reviewsCount: data.reviews.length,
      commentsCount: data.comments.length,
      activeDiscussionsCount: data.discussions.length,
      totalViews: data.totalViews,
      engagementRate: 0,
      platformsWithData: 100,
      processingTime,
      qualityScore: accuracy
    };
  }

  private generateOutputFileName(originalFileName: string, monthName: string): string {
    const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const baseName = originalFileName.replace(/\.[^/.]+$/, '');
    return `${baseName}_${monthName}_–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_${timestamp}.xlsx`;
  }
}