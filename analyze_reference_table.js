/**
 * ============================================================================
 * –ê–ù–ê–õ–ò–ó –≠–¢–ê–õ–û–ù–ù–û–ô –¢–ê–ë–õ–ò–¶–´ –° 4 –ú–ï–°–Ø–¶–ê–ú–ò
 * ============================================================================
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google Apps Script –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * ID —Ç–∞–±–ª–∏—Ü—ã: 1pxUF5HnII7hVnaw077mE0FHqGp-TN1Rk
 * ============================================================================
 */

// =============================================================================
// –ö–û–ù–°–¢–ê–ù–°–¢–´
// =============================================================================

const REFERENCE_SHEET_ID = '1pxUF5HnII7hVnaw077mE0FHqGp-TN1Rk';

// =============================================================================
// –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê
// =============================================================================

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
 */
function analyzeReferenceTable() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å 4 –º–µ—Å—è—Ü–∞–º–∏...');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    const spreadsheet = SpreadsheetApp.openById(REFERENCE_SHEET_ID);
    const sheets = spreadsheet.getSheets();
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: ${sheets.length}`);
    
    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
    const sheetsAnalysis = {};
    
    for (const sheet of sheets) {
      const sheetName = sheet.getName();
      console.log(`\nüìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏—Å—Ç: ${sheetName}`);
      
      const analysis = analyzeSheet(sheet);
      sheetsAnalysis[sheetName] = analysis;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
      console.log(`   üìä –°—Ç—Ä–æ–∫: ${analysis.totalRows}`);
      console.log(`   üìä –ö–æ–ª–æ–Ω–æ–∫: ${analysis.totalColumns}`);
      console.log(`   üìä –ó–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${analysis.headers.length}`);
      console.log(`   üìä –î–∞–Ω–Ω—ã—Ö: ${analysis.dataRows.length}`);
      
      if (analysis.contentTypes.length > 0) {
        console.log(`   üìä –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${analysis.contentTypes.join(', ')}`);
      }
    }
    
    // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π –ª–∏—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const bestSheet = findBestSheetForTesting(sheetsAnalysis);
    console.log(`\nüéØ –õ—É—á—à–∏–π –ª–∏—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${bestSheet}`);
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ª–∏—Å—Ç–µ
    const testResults = testProcessorOnSheet(spreadsheet, bestSheet);
    
    return {
      sheetsAnalysis,
      bestSheet,
      testResults
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
    return { error: error.message };
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
 */
function analyzeSheet(sheet) {
  const range = sheet.getDataRange();
  const values = range.getValues();
  
  const analysis = {
    name: sheet.getName(),
    totalRows: values.length,
    totalColumns: values[0] ? values[0].length : 0,
    headers: [],
    dataRows: [],
    contentTypes: [],
    sampleData: []
  };
  
  if (values.length === 0) {
    return analysis;
  }
  
  // –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const headerInfo = findHeadersInSheet(values);
  analysis.headers = headerInfo.headers;
  analysis.headerRow = headerInfo.row;
  
  // –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
  const dataRows = values.slice(headerInfo.row + 1);
  analysis.dataRows = dataRows.filter(row => !isEmptyRow(row));
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const contentTypes = new Set();
  let sampleCount = 0;
  
  for (const row of analysis.dataRows) {
    if (sampleCount >= 5) break;
    
    const contentType = determineContentType(row);
    if (contentType !== 'unknown') {
      contentTypes.add(contentType);
      analysis.sampleData.push({
        row: row.slice(0, 5), // –ü–µ—Ä–≤—ã–µ 5 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–±—Ä–∞–∑—Ü–∞
        type: contentType
      });
      sampleCount++;
    }
  }
  
  analysis.contentTypes = Array.from(contentTypes);
  
  return analysis;
}

/**
 * –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –ª–∏—Å—Ç–µ
 */
function findHeadersInSheet(values) {
  for (let i = 0; i < Math.min(10, values.length); i++) {
    const row = values[i];
    const rowStr = row.map(cell => (cell || '').toString().toLowerCase()).join(' ');
    
    if (rowStr.includes('—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è') || 
        rowStr.includes('–ø–ª–æ—â–∞–¥–∫–∞') || 
        rowStr.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è') ||
        rowStr.includes('—Ç–∏–ø –ø–æ—Å—Ç–∞')) {
      
      return {
        row: i,
        headers: row.map(cell => (cell || '').toString().trim())
      };
    }
  }
  
  return {
    row: 0,
    headers: values[0] ? values[0].map(cell => (cell || '').toString().trim()) : []
  };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
function determineContentType(row) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–ª–æ–Ω–∫—É (—Ç–∏–ø –ø–æ—Å—Ç–∞)
  const lastColIndex = row.length - 1;
  const lastColValue = (row[lastColIndex] || '').toString().toLowerCase().trim();
  
  if (lastColValue === '–æ—Å' || lastColValue === '–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') {
    return 'review';
  }
  
  if (lastColValue === '—Ü—Å' || lastColValue === '—Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') {
    return 'comment';
  }
  
  if (lastColValue === '–ø—Å' || lastColValue === '–ø–æ—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è') {
    return 'discussion';
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
  const firstColValue = (row[0] || '').toString().toLowerCase().trim();
  if (firstColValue.includes('–æ—Ç–∑—ã–≤') || firstColValue.includes('–æ—Å')) {
    return 'review';
  }
  
  if (firstColValue.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π') || firstColValue.includes('—Ü—Å')) {
    return 'comment';
  }
  
  if (firstColValue.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏–µ') || firstColValue.includes('–ø—Å')) {
    return 'discussion';
  }
  
  return 'unknown';
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–æ–π
 */
function isEmptyRow(row) {
  return !row || row.every(cell => !cell || cell.toString().trim() === '');
}

/**
 * –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ –ª–∏—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function findBestSheetForTesting(sheetsAnalysis) {
  let bestSheet = null;
  let bestScore = 0;
  
  for (const [sheetName, analysis] of Object.entries(sheetsAnalysis)) {
    let score = 0;
    
    // –ë–∞–ª–ª—ã –∑–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    score += analysis.dataRows.length * 0.1;
    
    // –ë–∞–ª–ª—ã –∑–∞ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    score += analysis.contentTypes.length * 10;
    
    // –ë–∞–ª–ª—ã –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const keyHeaders = ['–ø–ª–æ—â–∞–¥–∫–∞', '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '—Ç–∏–ø –ø–æ—Å—Ç–∞'];
    const hasKeyHeaders = keyHeaders.some(header => 
      analysis.headers.some(h => h.toLowerCase().includes(header))
    );
    
    if (hasKeyHeaders) {
      score += 50;
    }
    
    // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ª–∏—Å—Ç–∞–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞
    const monthNames = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', 
                       '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'];
    
    if (monthNames.some(month => sheetName.toLowerCase().includes(month))) {
      score += 20;
    }
    
    console.log(`üìä –õ–∏—Å—Ç "${sheetName}" –ø–æ–ª—É—á–∏–ª ${score} –±–∞–ª–ª–æ–≤`);
    
    if (score > bestScore) {
      bestScore = score;
      bestSheet = sheetName;
    }
  }
  
  return bestSheet;
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ª–∏—Å—Ç–µ
 */
function testProcessorOnSheet(spreadsheet, sheetName) {
  console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–∞ –ª–∏—Å—Ç–µ: ${sheetName}`);
  
  try {
    const sheet = spreadsheet.getSheetByName(sheetName);
    const range = sheet.getDataRange();
    const values = range.getValues();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    const processedData = processDataFromSheet(values);
    
    const reviews = processedData.filter(row => row.type === 'review');
    const comments = processedData.filter(row => row.type === 'comment');
    const discussions = processedData.filter(row => row.type === 'discussion');
    
    const results = {
      totalProcessed: processedData.length,
      reviews: reviews.length,
      comments: comments.length,
      discussions: discussions.length,
      success: true
    };
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
    console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${results.totalProcessed}`);
    console.log(`   üìù –û—Ç–∑—ã–≤—ã: ${results.reviews}`);
    console.log(`   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${results.comments}`);
    console.log(`   üó®Ô∏è –û–±—Å—É–∂–¥–µ–Ω–∏—è: ${results.discussions}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    console.log(`\nüìã –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:`);
    processedData.slice(0, 5).forEach((row, index) => {
      console.log(`   ${index + 1}. ${row.type}: ${row.site} - ${row.text ? row.text.substring(0, 30) : '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}...`);
    });
    
    return results;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ Google Apps Script)
 */
function processDataFromSheet(rawData) {
  if (!rawData || rawData.length === 0) {
    throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
  }
  
  // 1. –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const headerInfo = findHeadersInSheet(rawData);
  
  // 2. –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫
  const columnMapping = {};
  headerInfo.headers.forEach((header, index) => {
    const cleanHeader = header.toLowerCase().trim();
    if (cleanHeader) {
      columnMapping[cleanHeader] = index;
    }
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è fallback
  const defaultMapping = {
    '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è': 0,
    '–ø–ª–æ—â–∞–¥–∫–∞': 1,
    '–ø—Ä–æ–¥—É–∫—Ç': 2,
    '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ': 3,
    '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è': 4,
    '—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏': 5,
    '–¥–∞—Ç–∞': 6,
    '–Ω–∏–∫': 7,
    '–∞–≤—Ç–æ—Ä': 8,
    '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–µ–º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ': 9,
    '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞': 10,
    '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ': 11,
    '–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ': 12,
    '—Ç–∏–ø –ø–æ—Å—Ç–∞': 13
  };
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥–∏
  const finalMapping = { ...defaultMapping, ...columnMapping };
  
  // 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const dataRows = rawData.slice(headerInfo.row + 1);
  const processedRows = [];
  
  for (const row of dataRows) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (isEmptyRow(row)) continue;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏-–∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (isHeaderRow(row)) continue;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentType = determineContentType(row);
    
    if (contentType !== 'unknown') {
      const processedRow = extractRowDataFromSheet(row, contentType, finalMapping);
      if (processedRow) {
        processedRows.push(processedRow);
      }
    }
  }
  
  return processedRows;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
 */
function isHeaderRow(row) {
  const firstCell = (row[0] || '').toString().toLowerCase().trim();
  const headerPatterns = ['–æ—Ç–∑—ã–≤—ã', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–æ–±—Å—É–∂–¥–µ–Ω–∏—è'];
  
  return headerPatterns.includes(firstCell);
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏
 */
function extractRowDataFromSheet(row, type, mapping) {
  try {
    // –ò–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ (—Å fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
    const siteIndex = mapping['–ø–ª–æ—â–∞–¥–∫–∞'] || 1;
    const linkIndex = mapping['—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ'] || 3;
    const textIndex = mapping['—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'] || 4;
    const dateIndex = mapping['–¥–∞—Ç–∞'] || 6;
    const authorIndex = mapping['–∞–≤—Ç–æ—Ä'] || 8;
    const viewsIndex = mapping['–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ'] || 11;
    const engagementIndex = mapping['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ'] || 12;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const site = cleanValue(row[siteIndex]);
    const link = cleanValue(row[linkIndex]);
    const text = cleanValue(row[textIndex]);
    const date = cleanValue(row[dateIndex]);
    const author = cleanValue(row[authorIndex]);
    const views = extractViews(row[viewsIndex]);
    const engagement = extractEngagement(row[engagementIndex]);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!site || !text) {
      return null;
    }
    
    return {
      type: type,
      site: site,
      link: link,
      text: text,
      date: date,
      author: author,
      views: views,
      engagement: engagement
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏:', error);
    return null;
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏
 */
function cleanValue(value) {
  if (!value) return '';
  return value.toString().trim();
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
 */
function extractViews(value) {
  if (!value) return 0;
  
  const str = value.toString().replace(/\D/g, '');
  const num = parseInt(str);
  
  return isNaN(num) ? 0 : num;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
 */
function extractEngagement(value) {
  if (!value) return 0;
  
  const str = value.toString().replace(/[^\d.]/g, '');
  const num = parseFloat(str);
  
  return isNaN(num) ? 0 : num;
}

// =============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ü–£–°–ö–ê
// =============================================================================

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
 */
function main() {
  return analyzeReferenceTable();
}

/**
 * –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 */
function quickAnalysis() {
  console.log('‚ö° –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã...');
  
  const spreadsheet = SpreadsheetApp.openById(REFERENCE_SHEET_ID);
  const sheets = spreadsheet.getSheets();
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: ${sheets.length}`);
  
  sheets.forEach((sheet, index) => {
    const name = sheet.getName();
    const range = sheet.getDataRange();
    const rowCount = range.getNumRows();
    const colCount = range.getNumColumns();
    
    console.log(`${index + 1}. –õ–∏—Å—Ç "${name}": ${rowCount} —Å—Ç—Ä–æ–∫, ${colCount} –∫–æ–ª–æ–Ω–æ–∫`);
  });
  
  return { totalSheets: sheets.length };
}