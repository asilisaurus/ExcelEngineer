async function testImprovedV2Processor() {
  try {
    console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê V2');
    console.log('=========================================\n');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º
    console.log('üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª...');
    const FormData = require('form-data');
    const fs = require('fs');
    const fetch = require('node-fetch');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    try {
      const healthCheck = await fetch('http://localhost:5000/api/files');
      if (!healthCheck.ok) {
        throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
      }
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
    } catch (error) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: npm run dev');
      return;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testFile = 'source_file_analysis.xlsx';
    
    if (!fs.existsSync(testFile)) {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', testFile);
      return;
    }
    
    const formData = new FormData();
    formData.append('file', fs.createReadStream(testFile));
    formData.append('selectedSheet', '–ò—é–Ω—å25'); // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—Å—Ç
    
    console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...');
    
    const uploadResponse = await fetch('http://localhost:5000/api/upload', {
      method: 'POST',
      body: formData
    });
    
    if (!uploadResponse.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', await uploadResponse.text());
      return;
    }
    
    const result = await uploadResponse.json();
    console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ, ID:', result.fileId);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    let attempts = 0;
    const maxAttempts = 30; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    
    while (attempts < maxAttempts) {
      console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (${attempts + 1}/${maxAttempts})...`);
      
      const statusResponse = await fetch(`http://localhost:5000/api/files/${result.fileId}`);
      
      if (statusResponse.ok) {
        const fileInfo = await statusResponse.json();
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${fileInfo.status}`);
        
        if (fileInfo.statistics) {
          const stats = JSON.parse(fileInfo.statistics);
          if (stats.stage) {
            console.log(`   üîÑ –≠—Ç–∞–ø: ${stats.stage} - ${stats.message}`);
          }
        }
        
        if (fileInfo.status === 'completed') {
          console.log('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê V2:');
          console.log(`üìù –§–∞–π–ª: ${fileInfo.processedName}`);
          console.log(`üìä –°—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${fileInfo.rowsProcessed}`);
          
          if (fileInfo.statistics) {
            const statistics = JSON.parse(fileInfo.statistics);
            console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê V2:`);
            console.log(`   üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${statistics.totalRows || 'N/A'}`);
            console.log(`   üéØ –û—Ç–∑—ã–≤–æ–≤: ${statistics.reviewsCount || 'N/A'}`);
            console.log(`   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${statistics.commentsCount || 'N/A'}`);
            console.log(`   üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π: ${statistics.activeDiscussionsCount || 'N/A'}`);
            console.log(`   üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${statistics.totalViews?.toLocaleString() || 'N/A'}`);
            console.log(`   üìà –í–æ–≤–ª–µ—á–µ–Ω–∏–µ: ${statistics.engagementRate || 'N/A'}%`);
            console.log(`   üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º —Å –¥–∞–Ω–Ω—ã–º–∏: ${statistics.platformsWithData || 'N/A'}%`);
            console.log(`   ‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${statistics.processingTime || 'N/A'} —Å–µ–∫`);
            console.log(`   üèÜ –ö–∞—á–µ—Å—Ç–≤–æ: ${statistics.qualityScore || 'N/A'}/100`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∞–ª–æ–Ω—É
            console.log('\nüéØ –°–†–ê–í–ù–ï–ù–ò–ï –° –≠–¢–ê–õ–û–ù–û–ú:');
            const expectedReviews = 13;
            const expectedComments = 15;
            const expectedDiscussions = 42;
            const expectedTotal = expectedReviews + expectedComments + expectedDiscussions;
            
            const actualReviews = statistics.reviewsCount || 0;
            const actualComments = statistics.commentsCount || 0;
            const actualDiscussions = statistics.activeDiscussionsCount || 0;
            const actualTotal = actualReviews + actualComments + actualDiscussions;
            
            console.log(`   üìù –û—Ç–∑—ã–≤—ã: ${actualReviews} (—ç—Ç–∞–ª–æ–Ω: ${expectedReviews}) ${Math.abs(actualReviews - expectedReviews) <= 5 ? '‚úÖ' : '‚ùå'}`);
            console.log(`   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${actualComments} (—ç—Ç–∞–ª–æ–Ω: ${expectedComments}) ${Math.abs(actualComments - expectedComments) <= 5 ? '‚úÖ' : '‚ùå'}`);
            console.log(`   üî• –û–±—Å—É–∂–¥–µ–Ω–∏—è: ${actualDiscussions} (—ç—Ç–∞–ª–æ–Ω: ${expectedDiscussions}) ${Math.abs(actualDiscussions - expectedDiscussions) <= 15 ? '‚úÖ' : '‚ùå'}`);
            console.log(`   üìã –í—Å–µ–≥–æ: ${actualTotal} (—ç—Ç–∞–ª–æ–Ω: ${expectedTotal}) ${Math.abs(actualTotal - expectedTotal) <= 20 ? '‚úÖ' : '‚ùå'}`);
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:');
          const resultPath = `uploads/${fileInfo.processedName}`;
          
          if (fs.existsSync(resultPath)) {
            console.log('‚úÖ –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω');
            
            try {
              const ExcelJS = require('exceljs');
              const workbook = new ExcelJS.Workbook();
              await workbook.xlsx.readFile(resultPath);
              const worksheet = workbook.getWorksheet(1);
              
              console.log(`üìã –õ–∏—Å—Ç: ${worksheet.name}`);
              console.log(`üìè –†–∞–∑–º–µ—Ä—ã: ${worksheet.rowCount} —Å—Ç—Ä–æ–∫ x ${worksheet.columnCount} –∫–æ–ª–æ–Ω–æ–∫`);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
              const row1 = worksheet.getRow(1);
              const productCell = row1.getCell(1).value;
              
              const row2 = worksheet.getRow(2);
              const periodCell = row2.getCell(2).value;
              
              const row3 = worksheet.getRow(3);
              const planCell = row3.getCell(2).value;
              
              const row4 = worksheet.getRow(4);
              const tableHeaderCell = row4.getCell(1).value;
              
              console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞: ${productCell}`);
              console.log(`üìÖ –ü–µ—Ä–∏–æ–¥: ${periodCell}`);
              console.log(`üìù –ü–ª–∞–Ω: ${planCell}`);
              console.log(`üìä –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã: ${tableHeaderCell}`);
              
              // –ò—â–µ–º —Å–µ–∫—Ü–∏–∏ –∏ —Å—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
              let sectionsFound = 0;
              let dataRows = 0;
              let hasItogo = false;
              
              for (let r = 5; r <= Math.min(200, worksheet.rowCount); r++) {
                const row = worksheet.getRow(r);
                const cellA = row.getCell(1).value;
                
                if (cellA) {
                  const cellStr = cellA.toString().trim();
                  
                  if (cellStr === '–û—Ç–∑—ã–≤—ã') {
                    sectionsFound++;
                    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è "–û—Ç–∑—ã–≤—ã" –≤ —Å—Ç—Ä–æ–∫–µ ${r}`);
                  } else if (cellStr.includes('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')) {
                    sectionsFound++;
                    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏" –≤ —Å—Ç—Ä–æ–∫–µ ${r}`);
                  } else if (cellStr.includes('–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è')) {
                    sectionsFound++;
                    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è "–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è" –≤ —Å—Ç—Ä–æ–∫–µ ${r}`);
                  } else if (cellStr.includes('–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤')) {
                    hasItogo = true;
                    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ "–ò—Ç–æ–≥–æ" –≤ —Å—Ç—Ä–æ–∫–µ ${r}`);
                  } else if (cellStr !== '–ü–ª–æ—â–∞–¥–∫–∞' && !cellStr.includes('–ò—Ç–æ–≥–æ') && 
                           !cellStr.includes('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ') && cellStr.length > 3) {
                    dataRows++;
                  }
                }
              }
              
              console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü–∏–π: ${sectionsFound}/3`);
              console.log(`   üìù –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${dataRows}`);
              console.log(`   üìã –°—Ç—Ä–æ–∫–∞ "–ò—Ç–æ–≥–æ": ${hasItogo ? '–ï—Å—Ç—å' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
              
              // –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
              const isValid = productCell === '–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º' && 
                             sectionsFound >= 3 && 
                             dataRows > 0 &&
                             hasItogo;
              
              console.log(`\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ê–õ–ò–î–ê–¶–ò–ò V2: ${isValid ? '‚úÖ –û–¢–õ–ò–ß–ù–û' : '‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}`);
              
              if (isValid) {
                console.log('\nüéä –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–û–¶–ï–°–°–û–† V2 –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
                console.log('üöÄ –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:');
                console.log('   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ 4');
                console.log('   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫');
                console.log('   ‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ [object Object]');
                console.log('   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ "–ò—Ç–æ–≥–æ"');
                console.log('   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤');
                console.log('   ‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∞–ª–æ–Ω—É');
                return true;
              } else {
                console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤—Å–µ –µ—â–µ –æ—Å—Ç–∞—é—Ç—Å—è');
                return false;
              }
            } catch (excelError) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞:', excelError.message);
              return false;
            }
          } else {
            console.log('‚ùå –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ');
            return false;
          }
          
        } else if (fileInfo.status === 'error') {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', fileInfo.errorMessage);
          return false;
        }
      }
      
      attempts++;
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log('‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    return false;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    return false;
  }
}

testImprovedV2Processor();