/**
 * ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –ò –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è Google Apps Script
 * 
 * –ê–≤—Ç–æ—Ä: AI Assistant + Background Agent
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 2025
 */

// ==================== –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø ====================

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
class AutomatedProcessor {
  constructor() {
    this.triggers = [];
    this.settings = this.loadSettings();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  setupAutomation() {
    console.log('ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    this.removeAllTriggers();
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    this.createTriggers();
    
    console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
   */
  createTriggers() {
    // –¢—Ä–∏–≥–≥–µ—Ä –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
    ScriptApp.newTrigger('onOpen')
      .onOpen()
      .create();
    
    // –¢—Ä–∏–≥–≥–µ—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00)
    ScriptApp.newTrigger('dailyProcessing')
      .timeBased()
      .everyDays(1)
      .atHour(9)
      .create();
    
    // –¢—Ä–∏–≥–≥–µ—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    ScriptApp.newTrigger('onDataChange')
      .onEdit()
      .create();
    
    console.log('üìÖ –¢—Ä–∏–≥–≥–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã');
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
   */
  removeAllTriggers() {
    const triggers = ScriptApp.getProjectTriggers();
    triggers.forEach(trigger => {
      ScriptApp.deleteTrigger(trigger);
    });
    console.log('üóëÔ∏è –°—Ç–∞—Ä—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã');
  }

  /**
   * –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
   */
  dailyProcessing() {
    console.log('üìÖ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const hasNewData = this.checkForNewData();
      
      if (hasNewData) {
        console.log('üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...');
        processMonthlyReport();
      } else {
        console.log('‚ÑπÔ∏è –ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
      this.sendErrorNotification(error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  onDataChange(e) {
    console.log('üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    const range = e.range;
    const sheet = range.getSheet();
    
    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (sheet.getName().includes('–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ') || sheet.getName().includes('Source')) {
      console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...');
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      Utilities.sleep(2000);
      processMonthlyReport();
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  checkForNewData() {
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const sheets = spreadsheet.getSheets();
    
    for (const sheet of sheets) {
      const lastRow = sheet.getLastRow();
      const lastModified = sheet.getRange(lastRow, 1).getLastModified();
      const now = new Date();
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      if (now.getTime() - lastModified.getTime() < 24 * 60 * 60 * 1000) {
        return true;
      }
    }
    
    return false;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  sendErrorNotification(error) {
    try {
      const email = Session.getActiveUser().getEmail();
      const subject = '‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–æ–≤';
      const body = `
        –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á–µ—Ç–æ–≤:
        
        –û—à–∏–±–∫–∞: ${error.toString()}
        –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${Session.getActiveUser().getEmail()}
        
        –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ Google Apps Script –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.
      `;
      
      MailApp.sendEmail(email, subject, body);
      console.log('üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (emailError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', emailError);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  loadSettings() {
    try {
      const properties = PropertiesService.getScriptProperties();
      const settings = properties.getProperty('processor_settings');
      return settings ? JSON.parse(settings) : this.getDefaultSettings();
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error);
      return this.getDefaultSettings();
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  saveSettings(settings) {
    try {
      const properties = PropertiesService.getScriptProperties();
      properties.setProperty('processor_settings', JSON.stringify(settings));
      console.log('üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  getDefaultSettings() {
    return {
      autoProcessing: true,
      dailyCheck: true,
      emailNotifications: true,
      maxRows: 10000,
      qualityThreshold: 80,
      platforms: ['VK', 'Telegram', 'Instagram', 'YouTube']
    };
  }
}

// ==================== –†–ê–°–®–ò–†–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
 */
class DataAnalyzer {
  constructor() {
    this.cache = {};
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  analyzeDataQuality(data) {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö...');
    
    const quality = {
      totalRows: data.length,
      emptyRows: 0,
      incompleteRows: 0,
      duplicateRows: 0,
      qualityScore: 0,
      issues: []
    };

    const seenRows = new Set();
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
      if (this.isEmptyRow(row)) {
        quality.emptyRows++;
        quality.issues.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞`);
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø–æ–ª–Ω—ã—Ö —Å—Ç—Ä–æ–∫
      const requiredColumns = ['PLATFORM', 'TEXT', 'DATE'];
      const missingColumns = requiredColumns.filter(col => !this.hasValidData(row, col));
      
      if (missingColumns.length > 0) {
        quality.incompleteRows++;
        quality.issues.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ${missingColumns.join(', ')}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const rowHash = this.createRowHash(row);
      if (seenRows.has(rowHash)) {
        quality.duplicateRows++;
        quality.issues.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –¥—É–±–ª–∏–∫–∞—Ç`);
      } else {
        seenRows.add(rowHash);
      }
    }
    
    // –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
    const validRows = quality.totalRows - quality.emptyRows - quality.incompleteRows - quality.duplicateRows;
    quality.qualityScore = Math.round((validRows / quality.totalRows) * 100);
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞:', quality);
    return quality;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
   */
  isEmptyRow(row) {
    return !row.some(cell => cell && String(cell).trim().length > 0);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  hasValidData(row, columnType) {
    const columnIndex = this.getColumnIndex(columnType);
    if (columnIndex === undefined || columnIndex >= row.length) {
      return false;
    }
    const value = row[columnIndex];
    return value && String(value).trim().length > 0;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–∞ —Å—Ç—Ä–æ–∫–∏
   */
  createRowHash(row) {
    return row.map(cell => String(cell || '')).join('|');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∫–æ–ª–æ–Ω–∫–∏
   */
  getColumnIndex(columnType) {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –∫–æ–ª–æ–Ω–∫–∏
    // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const columnMap = {
      'PLATFORM': 1,
      'TEXT': 4,
      'DATE': 6,
      'AUTHOR': 7
    };
    return columnMap[columnType];
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
   */
  analyzeTrends(data) {
    console.log('üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤...');
    
    const trends = {
      platforms: {},
      engagement: {},
      views: {},
      timeDistribution: {}
    };
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–ª–æ—â–∞–¥–∫–∞–º
    data.forEach(row => {
      const platform = this.getColumnValue(row, 'PLATFORM');
      if (platform) {
        trends.platforms[platform] = (trends.platforms[platform] || 0) + 1;
      }
    });
    
    // –ê–Ω–∞–ª–∏–∑ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
    data.forEach(row => {
      const engagement = this.getColumnValue(row, 'ENGAGEMENT');
      if (engagement) {
        const engagementNum = this.parseEngagement(engagement);
        if (engagementNum > 0) {
          trends.engagement[engagementNum] = (trends.engagement[engagementNum] || 0) + 1;
        }
      }
    });
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤:', trends);
    return trends;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–ª–æ–Ω–∫–∏
   */
  getColumnValue(row, columnType) {
    const columnIndex = this.getColumnIndex(columnType);
    if (columnIndex === undefined || columnIndex >= row.length) {
      return '';
    }
    return String(row[columnIndex] || '').trim();
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
   */
  parseEngagement(engagement) {
    if (!engagement) return 0;
    
    const engagementStr = String(engagement).replace(/[^\d]/g, '');
    const engagementNum = parseInt(engagementStr);
    
    return isNaN(engagementNum) ? 0 : engagementNum;
  }
}

// ==================== –≠–ö–°–ü–û–†–¢ –ò –ò–ú–ü–û–†–¢ ====================

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
 */
class DataExporter {
  constructor() {
    this.formats = ['xlsx', 'csv', 'json'];
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
   */
  exportToExcel(data, filename) {
    console.log('üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel...');
    
    try {
      const spreadsheet = SpreadsheetApp.create(filename);
      const sheet = spreadsheet.getActiveSheet();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const headers = ['–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞', '–ê–≤—Ç–æ—Ä', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø'];
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      if (data.length > 0) {
        sheet.getRange(2, 1, data.length, data[0].length).setValues(data);
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      sheet.autoResizeColumns(1, headers.length);
      
      console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${spreadsheet.getUrl()}`);
      return spreadsheet.getUrl();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel:', error);
      throw error;
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
   */
  exportToCSV(data, filename) {
    console.log('üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV...');
    
    try {
      const headers = ['–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞', '–ê–≤—Ç–æ—Ä', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø'];
      let csvContent = headers.join(',') + '\n';
      
      data.forEach(row => {
        const csvRow = row.map(cell => `"${String(cell || '').replace(/"/g, '""')}"`).join(',');
        csvContent += csvRow + '\n';
      });
      
      const blob = Utilities.newBlob(csvContent, 'text/csv', filename);
      const file = DriveApp.createFile(blob);
      
      console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${file.getUrl()}`);
      return file.getUrl();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV:', error);
      throw error;
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
   */
  exportToJSON(data, filename) {
    console.log('üìã –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON...');
    
    try {
      const jsonData = {
        metadata: {
          exportDate: new Date().toISOString(),
          totalRecords: data.length,
          version: '1.0.0'
        },
        data: data
      };
      
      const jsonContent = JSON.stringify(jsonData, null, 2);
      const blob = Utilities.newBlob(jsonContent, 'application/json', filename);
      const file = DriveApp.createFile(blob);
      
      console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${file.getUrl()}`);
      return file.getUrl();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON:', error);
      throw error;
    }
  }
}

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
 */
function setupAutomation() {
  const automation = new AutomatedProcessor();
  automation.setupAutomation();
  
  SpreadsheetApp.getUi().alert(
    '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!',
    '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞:\n\n- –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ 9:00\n- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö\n- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö',
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
 */
function analyzeDataQuality() {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = spreadsheet.getActiveSheet();
  const data = sheet.getDataRange().getValues();
  
  const analyzer = new DataAnalyzer();
  const quality = analyzer.analyzeDataQuality(data);
  
  // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ
  const qualitySheet = spreadsheet.insertSheet('–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö');
  
  const qualityData = [
    ['–ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•'],
    [''],
    [`–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${quality.totalRows}`],
    [`–ü—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: ${quality.emptyRows}`],
    [`–ù–µ–ø–æ–ª–Ω—ã—Ö —Å—Ç—Ä–æ–∫: ${quality.incompleteRows}`],
    [`–î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${quality.duplicateRows}`],
    [`–ö–∞—á–µ—Å—Ç–≤–æ: ${quality.qualityScore}%`],
    [''],
    ['–ü–†–û–ë–õ–ï–ú–´:'],
    ...quality.issues.map(issue => [issue])
  ];
  
  qualitySheet.getRange(1, 1, qualityData.length, 1).setValues(qualityData);
  qualitySheet.autoResizeColumn(1);
  
  SpreadsheetApp.getUi().alert(
    '–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω',
    `–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: ${quality.qualityScore}%\n\n–ü—Ä–æ–±–ª–µ–º: ${quality.issues.length}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–∏—Å—Ç–µ "–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö"`,
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
 */
function exportData() {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = spreadsheet.getActiveSheet();
  const data = sheet.getDataRange().getValues();
  
  const exporter = new DataExporter();
  const filename = `–≠–∫—Å–ø–æ—Ä—Ç_${new Date().toISOString().split('T')[0]}`;
  
  try {
    const excelUrl = exporter.exportToExcel(data, `${filename}.xlsx`);
    const csvUrl = exporter.exportToCSV(data, `${filename}.csv`);
    const jsonUrl = exporter.exportToJSON(data, `${filename}.json`);
    
    SpreadsheetApp.getUi().alert(
      '–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!',
      `–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö:\n\nExcel: ${excelUrl}\nCSV: ${csvUrl}\nJSON: ${jsonUrl}`,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    
  } catch (error) {
    SpreadsheetApp.getUi().alert(
      '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞',
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:\n${error.toString()}`,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
 */
function updateMenu() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Ç–æ–≤')
    .addItem('–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç', 'processMonthlyReport')
    .addSeparator()
    .addItem('–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö', 'analyzeDataQuality')
    .addItem('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', 'exportData')
    .addSeparator()
    .addItem('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏', 'setupAutomation')
    .addItem('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'showSettings')
    .addToUi();
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */
function testAdvancedFeatures() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...');
  
  // –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
  const analyzer = new DataAnalyzer();
  console.log('‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  
  // –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
  const exporter = new DataExporter();
  console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  
  // –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
  const automation = new AutomatedProcessor();
  console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  
  console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
} 