const ExcelJS = require('exceljs');

async function debugFullProcessing() {
  console.log('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ü–û–õ–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–•');
  console.log('='.repeat(60));
  
  try {
    // –®–∞–≥ 1: –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüìÇ –®–ê–ì 1: –ß–¢–ï–ù–ò–ï –ò–°–•–û–î–ù–´–• –î–ê–ù–ù–´–•');
    const sourceFile = 'uploads/Fortedetrim ORM report source.xlsx';
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(sourceFile);
    
    const worksheet = workbook.getWorksheet(1);
    const data = [];
    
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
    worksheet.eachRow((row, rowNumber) => {
      if (rowNumber > 1) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        const rowData = [];
        for (let i = 1; i <= 15; i++) {
          const cell = row.getCell(i);
          rowData.push(cell.value);
        }
        data.push(rowData);
      }
    });
    
    console.log(`üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${data.length} —Å—Ç—Ä–æ–∫ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞`);
    
    // –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Å—Ç—Ä–æ–∫
    console.log('\nüîç –®–ê–ì 2: –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –°–¢–†–û–ö');
    const processedRows = [];
    
    for (let i = 0; i < Math.min(data.length, 20); i++) {
      const row = data[i];
      const type = analyzeRowType(row);
      
      console.log(`\n–°—Ç—Ä–æ–∫–∞ ${i + 2}: –¢–∏–ø = "${type}"`);
      console.log(`  –ö–æ–ª–æ–Ω–∫–∞ A: "${row[0]}"`);
      console.log(`  –ö–æ–ª–æ–Ω–∫–∞ B: "${row[1]}"`);
      console.log(`  –ö–æ–ª–æ–Ω–∫–∞ E: "${row[4]}"`);
      console.log(`  –ö–æ–ª–æ–Ω–∫–∞ G: "${row[6]}"`);
      console.log(`  –ö–æ–ª–æ–Ω–∫–∞ H: "${row[7]}"`);
      
      if (type === 'review_otzovik' || type === 'review_pharmacy' || type === 'comment') {
        console.log(`  ‚úÖ –°—Ç—Ä–æ–∫–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –¥–∞—Ç –∏ –∞–≤—Ç–æ—Ä–æ–≤
        let dateValue = '';
        let authorValue = '';
        
        // –ò—â–µ–º –¥–∞—Ç—É
        const potentialDateColumns = [6, 3, 5]; // G, D, F
        for (const colIndex of potentialDateColumns) {
          const cellValue = row[colIndex];
          if (cellValue) {
            const cellStr = cellValue.toString();
            console.log(`  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –≤ –∫–æ–ª–æ–Ω–∫–µ ${String.fromCharCode(65 + colIndex)}: "${cellStr}"`);
            
            if (typeof cellValue === 'number' && cellValue > 40000 && cellValue < 50000) {
              dateValue = convertExcelDateToString(cellValue);
              console.log(`  üìÖ –î–ê–¢–ê –ù–ê–ô–î–ï–ù–ê (Excel —á–∏—Å–ª–æ): ${dateValue}`);
              break;
            } else if (cellStr.match(/\d{1,2}[.\/]\d{1,2}[.\/]\d{2,4}/)) {
              dateValue = convertExcelDateToString(cellValue);
              console.log(`  üìÖ –î–ê–¢–ê –ù–ê–ô–î–ï–ù–ê (—Ñ–æ—Ä–º–∞—Ç —Å–ª–µ—à): ${dateValue}`);
              break;
            } else if (cellStr.match(/(Mon|Tue|Wed|Thu|Fri|Sat|Sun).+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec).+\d{4}/)) {
              dateValue = convertExcelDateToString(cellValue);
              console.log(`  üìÖ –î–ê–¢–ê –ù–ê–ô–î–ï–ù–ê (—Ñ–æ—Ä–º–∞—Ç –¥–µ–Ω—å): ${dateValue}`);
              break;
            } else if (cellValue instanceof Date || (typeof cellValue === 'object' && cellValue.toString().includes('GMT'))) {
              dateValue = convertExcelDateToString(cellValue);
              console.log(`  üìÖ –î–ê–¢–ê –ù–ê–ô–î–ï–ù–ê (Date –æ–±—ä–µ–∫—Ç): ${dateValue}`);
              break;
            }
          }
        }
        
        // –ò—â–µ–º –∞–≤—Ç–æ—Ä–∞
        const potentialAuthorColumns = [7, 4, 8]; // H, E, I
        for (const colIndex of potentialAuthorColumns) {
          const cellValue = row[colIndex];
          if (cellValue && typeof cellValue === 'string') {
            const cellStr = cellValue.toString().trim();
            const isValidAuthor = cellStr.length > 2 && cellStr.length < 50 && 
                                 !cellStr.includes('http') && 
                                 !cellStr.includes('.com') &&
                                 !cellStr.match(/\d{1,2}[.\/]\d{1,2}[.\/]\d{2,4}/) &&
                                 !cellStr.match(/^\d+$/);
            
            if (isValidAuthor) {
              authorValue = cellStr;
              console.log(`  üë§ –ê–í–¢–û–† –ù–ê–ô–î–ï–ù –≤ –∫–æ–ª–æ–Ω–∫–µ ${String.fromCharCode(65 + colIndex)}: "${authorValue}"`);
              break;
            }
          }
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        const processedRow = {
          type,
          text: (row[4] || '').toString(),
          url: (row[1] || '').toString() || (row[3] || '').toString(),
          date: dateValue,
          author: authorValue,
          postType: (row[13] || '').toString(),
          originalRow: row
        };
        
        processedRows.push(processedRow);
        
        console.log(`  ‚û°Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢: date="${dateValue}", author="${authorValue}"`);
        
        if (!dateValue) {
          console.log(`  ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏!`);
        }
      }
    }
    
    console.log(`\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedRows.length} —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏`);
    
    // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìã –®–ê–ì 3: –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê');
    const rowsWithDates = processedRows.filter(row => row.date);
    const rowsWithoutDates = processedRows.filter(row => !row.date);
    
    console.log(`‚úÖ –°—Ç—Ä–æ–∫ —Å –¥–∞—Ç–∞–º–∏: ${rowsWithDates.length}`);
    console.log(`‚ùå –°—Ç—Ä–æ–∫ –±–µ–∑ –¥–∞—Ç: ${rowsWithoutDates.length}`);
    
    if (rowsWithDates.length > 0) {
      console.log('\nüéØ –°–¢–†–û–ö–ò –° –î–ê–¢–ê–ú–ò:');
      rowsWithDates.forEach((row, index) => {
        console.log(`${index + 1}. –î–∞—Ç–∞: "${row.date}", –ê–≤—Ç–æ—Ä: "${row.author}", –¢–∏–ø: "${row.type}"`);
      });
    }
    
    if (rowsWithoutDates.length > 0) {
      console.log('\n‚ùå –°–¢–†–û–ö–ò –ë–ï–ó –î–ê–¢:');
      rowsWithoutDates.forEach((row, index) => {
        console.log(`${index + 1}. –ê–≤—Ç–æ—Ä: "${row.author}", –¢–∏–ø: "${row.type}"`);
        console.log(`    –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ G: "${row.originalRow[6]}"`);
        console.log(`    –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ D: "${row.originalRow[3]}"`);
        console.log(`    –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ F: "${row.originalRow[5]}"`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error.message);
    console.error(error.stack);
  }
}

// –ö–æ–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function analyzeRowType(row) {
  if (!row || row.length === 0) return 'empty';
  
  const colA = (row[0] || '').toString().toLowerCase();
  const colB = (row[1] || '').toString().toLowerCase();
  const colD = (row[3] || '').toString().toLowerCase();
  const colE = (row[4] || '').toString().toLowerCase();
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
  if (colA.includes('—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è') || colA.includes('–ø–ª–æ—â–∞–¥–∫–∞') || 
      colB.includes('–ø–ª–æ—â–∞–¥–∫–∞') || colE.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è') ||
      colA.includes('–ø–ª–∞–Ω') || colA.includes('–∏—Ç–æ–≥–æ')) {
    return 'header';
  }
  
  // Google Sheets —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
  if (colA.includes('–æ—Ç–∑—ã–≤—ã (–æ—Ç–∑–æ–≤–∏–∫–∏)')) {
    return 'review_otzovik';
  }
  
  if (colA.includes('–æ—Ç–∑—ã–≤—ã (–∞–ø—Ç–µ–∫–∏)')) {
    return 'review_pharmacy';
  }
  
  if (colA.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö')) {
    return 'comment';
  }
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ URL
  const urlText = colB + ' ' + colD;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const reviewPlatforms = ['otzovik', 'irecommend', 'otzyvru', 'pravogolosa', 'medum', 'vseotzyvy', 'otzyvy.pro'];
  const pharmacyPlatforms = ['megapteka', 'apteka', 'pharmacy', 'piluli', 'zdravcity'];
  
  const isReviewPlatform = reviewPlatforms.some(platform => urlText.toLowerCase().includes(platform));
  const isPharmacyPlatform = pharmacyPlatforms.some(platform => urlText.toLowerCase().includes(platform));
  
  if (isReviewPlatform && (colB || colD || colE)) {
    return 'review_otzovik';
  }
  
  if (isPharmacyPlatform && (colB || colD || colE)) {
    return 'review_pharmacy';
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–æ —Ç–∏–ø –Ω–µ—è—Å–µ–Ω
  if (colB || colD || colE) {
    return 'content';
  }
  
  return 'empty';
}

function convertExcelDateToString(dateValue) {
  if (!dateValue) return '';
  
  try {
    let jsDate;
    
    if (typeof dateValue === 'string') {
      if (dateValue.includes('/')) {
        const parts = dateValue.split('/');
        if (parts.length === 3) {
          const month = parseInt(parts[0]);
          const day = parseInt(parts[1]);
          const year = parseInt(parts[2]);
          jsDate = new Date(year, month - 1, day);
        } else {
          jsDate = new Date(dateValue);
        }
      } else if (dateValue.includes('.')) {
        const parts = dateValue.split('.');
        if (parts.length === 3) {
          const day = parseInt(parts[0]);
          const month = parseInt(parts[1]);
          const year = parseInt(parts[2]);
          jsDate = new Date(year, month - 1, day);
        } else {
          jsDate = new Date(dateValue);
        }
      } else if (dateValue.match(/(Mon|Tue|Wed|Thu|Fri|Sat|Sun).+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec).+\d{4}/)) {
        jsDate = new Date(dateValue);
      } else {
        jsDate = new Date(dateValue);
      }
    } else if (typeof dateValue === 'number' && dateValue > 1) {
      jsDate = new Date((dateValue - 25569) * 86400 * 1000);
    } else if (dateValue instanceof Date) {
      jsDate = dateValue;
    } else {
      return '';
    }
    
    if (isNaN(jsDate.getTime())) {
      return '';
    }
    
    const day = jsDate.getDate().toString().padStart(2, '0');
    const month = (jsDate.getMonth() + 1).toString().padStart(2, '0');
    const year = jsDate.getFullYear().toString();
    
    return `${day}.${month}.${year}`;
  } catch (error) {
    return '';
  }
}

debugFullProcessing(); 