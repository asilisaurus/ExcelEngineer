const fs = require('fs');
const path = require('path');

async function testFixedProcessor() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...');
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Sheets API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const response = await fetch('http://localhost:5000/api/import-google-sheets', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: 'https://docs.google.com/spreadsheets/d/1z4KJfXSNaV8Zw5Qi4hKdVsoKvt9GTSrweWv45URzB4I/edit?usp=sharing'
      })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', result.message);
    console.log('üìÅ ID —Ñ–∞–π–ª–∞:', result.fileId);
    
    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã)
    let attempts = 0;
    const maxAttempts = 30; // 1 –º–∏–Ω—É—Ç–∞
    
    while (attempts < maxAttempts) {
      console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞... (${attempts + 1}/${maxAttempts})`);
      
      const statusResponse = await fetch(`http://localhost:5000/api/files/${result.fileId}`);
      
      if (statusResponse.ok) {
        const fileInfo = await statusResponse.json();
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${fileInfo.status}`);
        
        if (fileInfo.status === 'completed') {
          console.log('üéâ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
          console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${fileInfo.processedName}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ —Ñ–∞–π–ª
          const uploadsDir = 'uploads';
          const files = fs.readdirSync(uploadsDir);
          const resultFiles = files.filter(file => 
            file.includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç') && 
            file.includes(new Date().toISOString().slice(0, 10).replace(/-/g, ''))
          );
          
          if (resultFiles.length > 0) {
            const latestFile = resultFiles[resultFiles.length - 1];
            const filePath = path.join(uploadsDir, latestFile);
            const stats = fs.statSync(filePath);
            
            console.log('‚úÖ –£–°–ü–ï–•! –§–∞–π–ª —Å–æ–∑–¥–∞–Ω:');
            console.log(`üìÅ –ò–º—è: ${latestFile}`);
            console.log(`üìä –†–∞–∑–º–µ—Ä: ${stats.size} –±–∞–π—Ç`);
            console.log(`üïí –°–æ–∑–¥–∞–Ω: ${stats.birthtime.toISOString()}`);
            
            console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:');
            console.log('‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç XLSX/ExcelJS —É—Å—Ç—Ä–∞–Ω–µ–Ω');
            console.log('‚úÖ –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Å—Ç—Ä–æ–∫–∏ 1-4)');
            console.log('‚úÖ –ì–æ–ª—É–±—ã–µ —Ä–∞–∑–¥–µ–ª—ã');
            console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
            
            return true;
          } else {
            console.log('‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return false;
          }
          
        } else if (fileInfo.status === 'error') {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', fileInfo.errorMessage);
          return false;
        }
      }
      
      // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 2000));
      attempts++;
    }
    
    console.log('‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
    return false;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFixedProcessor().then(success => {
  if (success) {
    console.log('\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!');
    console.log('–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
  } else {
    console.log('\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù');
    console.log('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
  }
}).catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
}); 