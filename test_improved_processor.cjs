const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê');
console.log('üìä –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–∏–±–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É "–≥—Ä—è–∑–Ω—ã—Ö" –¥–∞–Ω–Ω—ã—Ö\n');

async function testProcessor() {
  console.log('ÔøΩ –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º TypeScript...');
  
  const tscProcess = spawn('npx', ['tsc', '--build'], { 
    stdio: 'inherit',
    cwd: process.cwd()
  });
  
  await new Promise((resolve, reject) => {
    tscProcess.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        resolve();
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏');
        reject(new Error(`Compilation failed with code ${code}`));
      }
    });
  });
  
  console.log('\nÔøΩ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä...');
  
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å
  const { fixedProcessor } = require('./dist/server/services/excel-processor-fixed.js');
  
  console.log('\nüìã –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
  try {
    const result1 = await fixedProcessor.processExcelFile('source_file.xlsx');
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç 1:', {
      outputPath: result1.outputPath,
      statistics: result1.statistics
    });
    
    console.log('\nÔøΩ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`  –û—Ç–∑—ã–≤—ã: ${result1.statistics.reviewsCount}`);
    console.log(`  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${result1.statistics.commentsCount}`);
    console.log(`  –û–±—Å—É–∂–¥–µ–Ω–∏—è: ${result1.statistics.activeDiscussionsCount}`);
    console.log(`  –í—Å–µ–≥–æ: ${result1.statistics.totalRows}`);
    console.log(`  –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${result1.statistics.totalViews}`);
    console.log(`  –ö–∞—á–µ—Å—Ç–≤–æ: ${result1.statistics.qualityScore}%`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
  
  console.log('\nÔøΩ –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
  try {
    const result2 = await fixedProcessor.processExcelFile('reference_file.xlsx');
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç 2:', {
      outputPath: result2.outputPath,
      statistics: result2.statistics
    });
    
    console.log('\nÔøΩ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`  –û—Ç–∑—ã–≤—ã: ${result2.statistics.reviewsCount}`);
    console.log(`  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${result2.statistics.commentsCount}`);
    console.log(`  –û–±—Å—É–∂–¥–µ–Ω–∏—è: ${result2.statistics.activeDiscussionsCount}`);
    console.log(`  –í—Å–µ–≥–æ: ${result2.statistics.totalRows}`);
    console.log(`  –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${result2.statistics.totalViews}`);
    console.log(`  –ö–∞—á–µ—Å—Ç–≤–æ: ${result2.statistics.qualityScore}%`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
  
  console.log('\nÔøΩ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
  const uploadsDir = path.join(process.cwd(), 'uploads');
  if (fs.existsSync(uploadsDir)) {
    const files = fs.readdirSync(uploadsDir).filter(f => f.includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç'));
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
    files.forEach(file => {
      const filePath = path.join(uploadsDir, file);
      const stats = fs.statSync(filePath);
      console.log(`  ${file} (${Math.round(stats.size / 1024)}KB)`);
    });
  }
  
  console.log('\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
}

testProcessor().catch(console.error);