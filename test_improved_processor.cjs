const fs = require('fs');
const path = require('path');

async function testImprovedProcessor() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê');
  console.log('='.repeat(60));
  
  try {
    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (3 —Å–µ–∫)...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º Google Sheets –∏–º–ø–æ—Ä—Ç —Å –Ω–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
    console.log('üì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç Google Sheets —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º...');
    const response = await fetch('http://localhost:5000/api/import-google-sheets', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: 'https://docs.google.com/spreadsheets/d/1z4KJfXSNaV8Zw5Qi4hKdVsoKvt9GTSrweWv45URzB4I/edit?usp=sharing'
      })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÅ ID —Ñ–∞–π–ª–∞: ${result.fileId}`);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    let attempts = 0;
    const maxAttempts = 20;
    
    while (attempts < maxAttempts) {
      console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (${attempts + 1}/${maxAttempts})...`);
      
      const statusResponse = await fetch(`http://localhost:5000/api/files/${result.fileId}`);
      
      if (statusResponse.ok) {
        const fileInfo = await statusResponse.json();
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${fileInfo.status}`);
        
        if (fileInfo.statistics) {
          const stats = JSON.parse(fileInfo.statistics);
          if (stats.stage) {
            console.log(`   üîÑ –≠—Ç–∞–ø: ${stats.stage} - ${stats.message}`);
          }
        }
        
        if (fileInfo.status === 'completed') {
          console.log('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê:');
          console.log(`üìù –§–∞–π–ª: ${fileInfo.processedName}`);
          console.log(`üìä –°—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${fileInfo.rowsProcessed}`);
          
          if (fileInfo.statistics) {
            const statistics = JSON.parse(fileInfo.statistics);
            console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
            console.log(`   üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${statistics.totalRows || 'N/A'}`);
            console.log(`   üéØ –û—Ç–∑—ã–≤–æ–≤: ${statistics.reviewsCount || 'N/A'}`);
            console.log(`   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${statistics.commentsCount || 'N/A'}`);
            console.log(`   üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π: ${statistics.activeDiscussionsCount || 'N/A'}`);
            console.log(`   üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${statistics.totalViews?.toLocaleString() || 'N/A'}`);
            console.log(`   üìà –í–æ–≤–ª–µ—á–µ–Ω–∏–µ: ${statistics.engagementRate || 'N/A'}%`);
            console.log(`   üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º —Å –¥–∞–Ω–Ω—ã–º–∏: ${statistics.platformsWithData || 'N/A'}%`);
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
          const uploadsDir = 'uploads';
          const files = fs.readdirSync(uploadsDir);
          const resultFiles = files.filter(file => 
            file.includes('Fortedetrim_ORM_report') && 
            file.includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç')
          );
          
          if (resultFiles.length > 0) {
            const latestFile = resultFiles[resultFiles.length - 1];
            const filePath = path.join(uploadsDir, latestFile);
            const fileStats = fs.statSync(filePath);
            
            console.log('\n‚úÖ –§–ê–ô–õ –ù–ê –î–ò–°–ö–ï:');
            console.log(`üìÅ –ò–º—è: ${latestFile}`);
            console.log(`üìä –†–∞–∑–º–µ—Ä: ${(fileStats.size / 1024).toFixed(1)} KB`);
            console.log(`üïê –°–æ–∑–¥–∞–Ω: ${fileStats.birthtime.toLocaleString('ru-RU')}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ Excel
            try {
              const ExcelJS = require('exceljs');
              const workbook = new ExcelJS.Workbook();
              await workbook.xlsx.readFile(filePath);
              
              const worksheet = workbook.getWorksheet(1);
              if (worksheet) {
                console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û:');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                const productCell = worksheet.getCell('A1').value;
                const periodCell = worksheet.getCell('A2').value;
                const planCell = worksheet.getCell('A3').value;
                
                console.log(`   üìã –ü—Ä–æ–¥—É–∫—Ç: ${productCell}`);
                console.log(`   üìÖ –ü–µ—Ä–∏–æ–¥: ${periodCell}`);
                console.log(`   üìä –ü–ª–∞–Ω: ${planCell}`);
                
                // –°—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                let dataRows = 0;
                let sectionsFound = 0;
                
                worksheet.eachRow((row, rowNumber) => {
                  if (rowNumber > 5) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    const cellA = row.getCell(1).value;
                    if (cellA) {
                      const cellStr = cellA.toString();
                      if (cellStr.includes('–û—Ç–∑—ã–≤—ã') || cellStr.includes('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') || cellStr.includes('–ê–∫—Ç–∏–≤–Ω—ã–µ')) {
                        sectionsFound++;
                      } else if (cellStr !== '–ü–ª–æ—â–∞–¥–∫–∞' && cellStr !== '–ò—Ç–æ–≥–æ') {
                        dataRows++;
                      }
                    }
                  }
                });
                
                console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü–∏–π: ${sectionsFound}`);
                console.log(`   üìù –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${dataRows}`);
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                const isValid = productCell === '–ü—Ä–æ–¥—É–∫—Ç' && 
                               periodCell === '–ü–µ—Ä–∏–æ–¥' && 
                               sectionsFound >= 3 && 
                               dataRows > 0;
                
                console.log(`\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ê–õ–ò–î–ê–¶–ò–ò: ${isValid ? '‚úÖ –£–°–ü–ï–®–ù–û' : '‚ùå –û–®–ò–ë–ö–ê'}`);
                
                if (isValid) {
                  console.log('\nüéä –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–û–¶–ï–°–°–û–† –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
                  console.log('üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:');
                  console.log('   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã');
                  console.log('   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ –ø–∞–¥–µ–Ω–∏–π');
                  console.log('   ‚úÖ –ì–∏–±–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è');
                  console.log('   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥');
                  console.log('   ‚úÖ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ');
                  return true;
                } else {
                  console.log('\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –≤—ã—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ');
                  return false;
                }
              }
            } catch (excelError) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞:', excelError.message);
              return false;
            }
          } else {
            console.log('‚ùå –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ');
            return false;
          }
          
        } else if (fileInfo.status === 'error') {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', fileInfo.errorMessage);
          return false;
        }
      }
      
      await new Promise(resolve => setTimeout(resolve, 2000));
      attempts++;
    }
    
    console.log('‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
    return false;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    return false;
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
async function testFileUpload() {
  console.log('\nüìÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–ê');
  console.log('='.repeat(40));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
  const testFile = 'test_download.xlsx';
  if (!fs.existsSync(testFile)) {
    console.log('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏');
    return true;
  }
  
  try {
    const FormData = require('form-data');
    const form = new FormData();
    form.append('file', fs.createReadStream(testFile));
    
    const response = await fetch('http://localhost:5000/api/upload', {
      method: 'POST',
      body: form
    });
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–∞, ID:', result.fileId);
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', response.status);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
async function runAllTests() {
  console.log('üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê');
  console.log('=='.repeat(40));
  
  const googleSheetsTest = await testImprovedProcessor();
  const fileUploadTest = await testFileUpload();
  
  console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
  console.log(`   üìä Google Sheets –∏–º–ø–æ—Ä—Ç: ${googleSheetsTest ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}`);
  console.log(`   üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: ${fileUploadTest ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}`);
  
  const allPassed = googleSheetsTest && fileUploadTest;
  
  if (allPassed) {
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    console.log('üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–û–¶–ï–°–°–û–† –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!');
    console.log('\nüí° –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:');
    console.log('   üîß –ì–∏–±–∫–æ—Å—Ç—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤');
    console.log('   üõ°Ô∏è –ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
    console.log('   ‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è');
    console.log('   üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
    console.log('   üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫');
  } else {
    console.log('\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´');
    console.log('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞');
  }
  
  return allPassed;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
runAllTests().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
});