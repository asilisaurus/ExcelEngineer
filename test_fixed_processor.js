const axios = require('axios');

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
async function testFixedProcessor() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...');
    
    // URL Google Sheets –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const googleSheetsUrl = 'https://docs.google.com/spreadsheets/d/1RT8T5gnDPe0KMikTmVNdSvxqDal3aQUmelpEwItgxMI/edit?usp=sharing';
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–º–ø–æ—Ä—Ç
    const response = await axios.post('http://localhost:5000/api/import-google-sheets', {
      url: googleSheetsUrl
    });
    
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:', response.data);
    
    if (response.data.fileId) {
      console.log('üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
      let attempts = 0;
      const maxAttempts = 30; // 30 —Å–µ–∫—É–Ω–¥
      
      while (attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 1000)); // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
        
        try {
          const statusResponse = await axios.get(`http://localhost:5000/api/files/${response.data.fileId}`);
          const file = statusResponse.data;
          
          console.log(`üìà –°—Ç–∞—Ç—É—Å: ${file.status}, –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${file.rowsProcessed || 0}`);
          
          if (file.status === 'completed') {
            console.log('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', JSON.parse(file.statistics || '{}'));
            console.log('üìÅ –§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', file.processedName);
            
            // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
            try {
              const downloadResponse = await axios.get(
                `http://localhost:5000/api/files/${file.id}/download`,
                { responseType: 'arraybuffer' }
              );
              console.log('üíæ –§–∞–π–ª —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä:', downloadResponse.data.length, '–±–∞–π—Ç');
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              if (downloadResponse.data.length > 0) {
                console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
                console.log('üìÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ uploads/');
              } else {
                console.warn('‚ö†Ô∏è –§–∞–π–ª –ø—É—Å—Ç–æ–π');
              }
            } catch (downloadError) {
              console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', downloadError.message);
            }
            
            break;
          } else if (file.status === 'error') {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', file.errorMessage);
            break;
          }
          
          attempts++;
        } catch (statusError) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1}):`, statusError.message);
          attempts++;
        }
      }
      
      if (attempts >= maxAttempts) {
        console.warn('‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    if (error.response) {
      console.error('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFixedProcessor();