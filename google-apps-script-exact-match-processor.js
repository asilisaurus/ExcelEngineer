/**
 * ============================================================================
 * GOOGLE APPS SCRIPT - –¢–û–ß–ù–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –≠–¢–ê–õ–û–ù–£
 * ============================================================================
 * –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ —Å –ø–æ–ª–Ω—ã–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ:
 * - –¶–≤–µ—Ç–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ —ç—Ç–∞–ª–æ–Ω–µ
 * - –†–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ –∏ —Å—Ç—Ä–æ–∫
 * - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
 * - –¢–æ—á–Ω—ã–µ –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã
 * - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ –≤ —ç—Ç–∞–ª–æ–Ω–µ
 * ============================================================================
 */

// =============================================================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –≠–¢–ê–õ–û–ù–ê
// =============================================================================

// ID —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
const REFERENCE_SHEET_ID = '1pxUF5HnII7hVnaw077mE0FHqGp-TN1Rk';

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç—Ç–∞–ª–æ–Ω–∞ (–∫–∞–∫ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –∏—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞)
const REFERENCE_STRUCTURE = {
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ (–≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ –≤ —ç—Ç–∞–ª–æ–Ω–µ)
  headers: [
    '–¢–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è',
    '–ü–ª–æ—â–∞–¥–∫–∞',
    '–ü—Ä–æ–¥—É–∫—Ç',
    '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
    '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ/–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
    '–î–∞—Ç–∞',
    '–ù–∏–∫',
    '–ê–≤—Ç–æ—Ä',
    '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–µ–º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ',
    '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞',
    '–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ',
    '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ',
    '–¢–∏–ø –ø–æ—Å—Ç–∞'
  ],
  
  // –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ö–ê–ö –í –≠–¢–ê–õ–û–ù–ï)
  colors: {
    header: '#9900ff',      // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    reviews: '#c9daf8',     // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ (–û–°)
    comments: '#c9daf8',    // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–¶–°)
    discussions: '#c9daf8', // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π (–ü–°)
    totals: '#c9daf8'       // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π –¥–ª—è –∏—Ç–æ–≥–æ–≤
  },
  
  // –†–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
  columnWidths: {
    0: 120,   // –¢–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    1: 150,   // –ü–ª–æ—â–∞–¥–∫–∞
    2: 100,   // –ü—Ä–æ–¥—É–∫—Ç
    3: 200,   // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    4: 300,   // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    5: 150,   // –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ/–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    6: 100,   // –î–∞—Ç–∞
    7: 80,    // –ù–∏–∫
    8: 120,   // –ê–≤—Ç–æ—Ä
    9: 100,   // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–µ–º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
    10: 100,  // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞
    11: 100,  // –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ
    12: 80,   // –í–æ–≤–ª–µ—á–µ–Ω–∏–µ
    13: 80    // –¢–∏–ø –ø–æ—Å—Ç–∞
  }
};

// –¶–µ–ª–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const TARGET_METRICS = {
  reviews: 13,    // –û–° –∑–∞–ø–∏—Å–µ–π
  comments: 15,   // –¶–° –∑–∞–ø–∏—Å–µ–π
  discussions: 42 // –ü–° –∑–∞–ø–∏—Å–µ–π
};

// =============================================================================
// –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
// =============================================================================

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ —Å —Ç–æ—á–Ω—ã–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º —ç—Ç–∞–ª–æ–Ω—É
 */
function createExactMatchOutput() {
  console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–≥—Ä—É–∑–∫–∏ —Å —Ç–æ—á–Ω—ã–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º —ç—Ç–∞–ª–æ–Ω—É...');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    const sourceData = getSourceDataFromReference();
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${sourceData.length} —Å—Ç—Ä–æ–∫ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞`);
    
    // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
    const processedData = processDataWithExactMatch(sourceData);
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedData.length} –∑–∞–ø–∏—Å–µ–π`);
    
    // 3. –°–æ–∑–¥–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É —Å —Ç–æ—á–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const outputFileId = createExactFormattedOutput(processedData);
    console.log(`üíæ –°–æ–∑–¥–∞–Ω–∞ –≤—ã–≥—Ä—É–∑–∫–∞: ${outputFileId}`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∞–ª–æ–Ω—É
    const validationResult = validateAgainstReference(processedData);
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: ${validationResult.passed ? '–ü–†–û–ô–î–ï–ù–ê' : '–ù–ï –ü–†–û–ô–î–ï–ù–ê'}`);
    
    return {
      success: true,
      sourceRows: sourceData.length,
      processedRows: processedData.length,
      outputFileId: outputFileId,
      validation: validationResult
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–≥—Ä—É–∑–∫–∏:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
 */
function getSourceDataFromReference() {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...');
    
    const spreadsheet = SpreadsheetApp.openById(REFERENCE_SHEET_ID);
    const sheets = spreadsheet.getSheets();
    
    // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –ª–∏—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const targetSheet = findBestSourceSheet(sheets);
    if (!targetSheet) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
    
    console.log(`üìã –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: ${targetSheet.getName()}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const range = targetSheet.getDataRange();
    const values = range.getValues();
    
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${values.length} —Å—Ç—Ä–æ–∫ –∏–∑ –ª–∏—Å—Ç–∞ ${targetSheet.getName()}`);
    
    return values;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

/**
 * –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ –ª–∏—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
function findBestSourceSheet(sheets) {
  let bestSheet = null;
  let bestScore = 0;
  
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏—Å—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞...');
  
  for (const sheet of sheets) {
    const sheetName = sheet.getName();
    const range = sheet.getDataRange();
    const values = range.getValues();
    
    if (values.length === 0) continue;
    
    let score = 0;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const headerInfo = findHeadersInData(values);
    
    // –ë–∞–ª–ª—ã –∑–∞ –∫–ª—é—á–µ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const keyHeaders = ['—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', '–ø–ª–æ—â–∞–¥–∫–∞', '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '—Ç–∏–ø –ø–æ—Å—Ç–∞'];
    const foundHeaders = headerInfo.headers.map(h => h.toLowerCase());
    
    keyHeaders.forEach(key => {
      if (foundHeaders.some(h => h.includes(key))) {
        score += 25;
      }
    });
    
    // –ë–∞–ª–ª—ã –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    const dataRows = values.slice(headerInfo.row + 1);
    const validRows = dataRows.filter(row => !isEmptyRow(row) && !isHeaderRow(row));
    score += Math.min(validRows.length * 0.1, 50);
    
    // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
    const currentMonth = new Date().toLocaleDateString('ru-RU', { month: 'long' });
    if (sheetName.toLowerCase().includes(currentMonth.toLowerCase())) {
      score += 100;
    }
    
    console.log(`üìä –õ–∏—Å—Ç "${sheetName}": ${score} –±–∞–ª–ª–æ–≤`);
    
    if (score > bestScore) {
      bestScore = score;
      bestSheet = sheet;
    }
  }
  
  return bestSheet;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–æ—á–Ω—ã–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º —ç—Ç–∞–ª–æ–Ω—É
 */
function processDataWithExactMatch(rawData) {
  console.log('‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é...');
  
  if (!rawData || rawData.length === 0) {
    throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
  }
  
  // 1. –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const headerInfo = findHeadersInData(rawData);
  console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${headerInfo.row}`);
  
  // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫
  const columnMapping = createExactColumnMapping(headerInfo.headers);
  console.log(`üóÇÔ∏è –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è ${Object.keys(columnMapping).length} –∫–æ–ª–æ–Ω–æ–∫`);
  
  // 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  const dataRows = rawData.slice(headerInfo.row + 1);
  const processedRows = [];
  
  for (const row of dataRows) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π
    if (isEmptyRow(row) || isHeaderRow(row)) {
      continue;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentType = determineContentTypeExact(row);
    
    if (contentType !== 'unknown') {
      const processedRow = extractRowDataExact(row, contentType, columnMapping);
      if (processedRow) {
        processedRows.push(processedRow);
      }
    }
  }
  
  console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${processedRows.length}`);
  
  // 4. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–∞–∫ –≤ —ç—Ç–∞–ª–æ–Ω–µ
  const sortedData = sortDataLikeReference(processedRows);
  
  return sortedData;
}

/**
 * –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
 */
function findHeadersInData(data) {
  for (let i = 0; i < Math.min(10, data.length); i++) {
    const row = data[i];
    if (!row || row.length === 0) continue;
    
    const rowStr = row.map(cell => (cell || '').toString().toLowerCase()).join(' ');
    
    if (rowStr.includes('—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è') || 
        rowStr.includes('–ø–ª–æ—â–∞–¥–∫–∞') || 
        rowStr.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è') ||
        rowStr.includes('—Ç–∏–ø –ø–æ—Å—Ç–∞')) {
      
      return {
        row: i,
        headers: row.map(cell => (cell || '').toString().trim())
      };
    }
  }
  
  return {
    row: 0,
    headers: data[0] ? data[0].map(cell => (cell || '').toString().trim()) : []
  };
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫
 */
function createExactColumnMapping(headers) {
  const mapping = {};
  
  // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  headers.forEach((header, index) => {
    const cleanHeader = header.toLowerCase().trim();
    
    // –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —ç—Ç–∞–ª–æ–Ω–∞
    REFERENCE_STRUCTURE.headers.forEach((refHeader, refIndex) => {
      const refHeaderLower = refHeader.toLowerCase();
      
      if (cleanHeader.includes(refHeaderLower) || 
          refHeaderLower.includes(cleanHeader) ||
          areSimilarHeaders(cleanHeader, refHeaderLower)) {
        mapping[refHeader] = index;
      }
    });
  });
  
  // Fallback –º–∞–ø–ø–∏–Ω–≥ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
  const fallbackMapping = {};
  REFERENCE_STRUCTURE.headers.forEach((header, index) => {
    if (!mapping[header]) {
      fallbackMapping[header] = index;
    }
  });
  
  return { ...fallbackMapping, ...mapping };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
 */
function areSimilarHeaders(header1, header2) {
  const keywords1 = header1.split(/\s+/);
  const keywords2 = header2.split(/\s+/);
  
  let matches = 0;
  keywords1.forEach(kw1 => {
    keywords2.forEach(kw2 => {
      if (kw1.includes(kw2) || kw2.includes(kw1)) {
        matches++;
      }
    });
  });
  
  return matches > 0;
}

/**
 * –¢–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
function determineContentTypeExact(row) {
  if (!row || row.length === 0) return 'unknown';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–ª–æ–Ω–∫—É (—Ç–∏–ø –ø–æ—Å—Ç–∞)
  const lastColIndex = row.length - 1;
  const lastColValue = (row[lastColIndex] || '').toString().toLowerCase().trim();
  
  if (lastColValue === '–æ—Å' || lastColValue === '–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') {
    return 'review';
  }
  
  if (lastColValue === '—Ü—Å' || lastColValue === '—Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') {
    return 'comment';
  }
  
  if (lastColValue === '–ø—Å' || lastColValue === '–ø–æ—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è') {
    return 'discussion';
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  const firstColValue = (row[0] || '').toString().toLowerCase().trim();
  
  if (firstColValue.includes('–æ—Ç–∑—ã–≤')) return 'review';
  if (firstColValue.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')) return 'comment';
  if (firstColValue.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏–µ')) return 'discussion';
  
  return 'unknown';
}

/**
 * –¢–æ—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏
 */
function extractRowDataExact(row, type, mapping) {
  try {
    const extracted = {};
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    REFERENCE_STRUCTURE.headers.forEach((header, index) => {
      const sourceIndex = mapping[header] || index;
      const rawValue = row[sourceIndex] || '';
      
      // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
      extracted[header] = formatValueForColumn(rawValue, header);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    extracted.contentType = type;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!extracted['–ü–ª–æ—â–∞–¥–∫–∞'] && !extracted['–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è']) {
      return null;
    }
    
    return extracted;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    return null;
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
 */
function formatValueForColumn(value, columnName) {
  if (!value) return '';
  
  const str = value.toString().trim();
  
  switch (columnName) {
    case '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–µ–º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ':
    case '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞':
    case '–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ':
      return parseIntegerValue(str);
      
    case '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ':
      return parseFloatValue(str);
      
    case '–î–∞—Ç–∞':
      return formatDateValue(str);
      
    case '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ':
      return formatUrlValue(str);
      
    default:
      return str;
  }
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
 */
function parseIntegerValue(value) {
  const num = parseInt(value.toString().replace(/\D/g, ''));
  return isNaN(num) ? 0 : num;
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
 */
function parseFloatValue(value) {
  const num = parseFloat(value.toString().replace(/[^\d.,]/g, '').replace(',', '.'));
  return isNaN(num) ? 0 : num;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
 */
function formatDateValue(value) {
  if (!value) return '';
  
  try {
    const date = new Date(value);
    if (isNaN(date.getTime())) return value.toString();
    
    return date.toLocaleDateString('ru-RU');
  } catch (error) {
    return value.toString();
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL
 */
function formatUrlValue(value) {
  if (!value) return '';
  
  const str = value.toString();
  if (str.startsWith('http')) return str;
  
  return str;
}

/**
 * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –≤ —ç—Ç–∞–ª–æ–Ω–µ
 */
function sortDataLikeReference(data) {
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const reviews = data.filter(row => row.contentType === 'review');
  const comments = data.filter(row => row.contentType === 'comment');
  const discussions = data.filter(row => row.contentType === 'discussion');
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
  const sortedReviews = reviews.sort((a, b) => {
    return (a['–î–∞—Ç–∞'] || '').localeCompare(b['–î–∞—Ç–∞'] || '');
  });
  
  const sortedComments = comments.sort((a, b) => {
    return (a['–î–∞—Ç–∞'] || '').localeCompare(b['–î–∞—Ç–∞'] || '');
  });
  
  const sortedDiscussions = discussions.sort((a, b) => {
    return (a['–î–∞—Ç–∞'] || '').localeCompare(b['–î–∞—Ç–∞'] || '');
  });
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ: –æ—Ç–∑—ã–≤—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –æ–±—Å—É–∂–¥–µ–Ω–∏—è
  return [...sortedReviews, ...sortedComments, ...sortedDiscussions];
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–≥—Ä—É–∑–∫–∏ —Å —Ç–æ—á–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
function createExactFormattedOutput(processedData) {
  try {
    console.log('üé® –°–æ–∑–¥–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É —Å —Ç–æ—á–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º...');
    
    const currentDate = new Date();
    const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                       '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
    
    const fileName = `–¢–æ—á–Ω–∞—è_–í—ã–≥—Ä—É–∑–∫–∞_${monthNames[currentDate.getMonth()]}_${currentDate.getFullYear()}`;
    const spreadsheet = SpreadsheetApp.create(fileName);
    
    const sheet = spreadsheet.getActiveSheet();
    sheet.setName('–î–∞–Ω–Ω—ã–µ');
    
    // 1. –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    createFormattedHeaders(sheet);
    
    // 2. –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    addFormattedData(sheet, processedData);
    
    // 3. –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã
    addTotalSums(sheet, processedData);
    
    // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ —ç—Ç–∞–ª–æ–Ω–µ
    applyReferenceFormatting(sheet, processedData);
    
    console.log(`üíæ –°–æ–∑–¥–∞–Ω–∞ –≤—ã–≥—Ä—É–∑–∫–∞: ${fileName}`);
    console.log(`üîó ID —Ñ–∞–π–ª–∞: ${spreadsheet.getId()}`);
    
    return spreadsheet.getId();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–≥—Ä—É–∑–∫–∏:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
 */
function createFormattedHeaders(sheet) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headerRange = sheet.getRange(1, 1, 1, REFERENCE_STRUCTURE.headers.length);
  headerRange.setValues([REFERENCE_STRUCTURE.headers]);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  headerRange.setFontWeight('bold');
  headerRange.setFontColor('white');
  headerRange.setBackground(REFERENCE_STRUCTURE.colors.header);
  headerRange.setHorizontalAlignment('center');
  headerRange.setVerticalAlignment('middle');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
  Object.entries(REFERENCE_STRUCTURE.columnWidths).forEach(([colIndex, width]) => {
    sheet.setColumnWidth(parseInt(colIndex) + 1, width);
  });
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function addFormattedData(sheet, data) {
  if (data.length === 0) return;
  
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
  const sheetData = data.map(row => {
    return REFERENCE_STRUCTURE.headers.map(header => {
      const value = row[header] || '';
      return value;
    });
  });
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  const dataRange = sheet.getRange(2, 1, sheetData.length, REFERENCE_STRUCTURE.headers.length);
  dataRange.setValues(sheetData);
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  data.forEach((row, index) => {
    const rowRange = sheet.getRange(index + 2, 1, 1, REFERENCE_STRUCTURE.headers.length);
    
    let backgroundColor;
    switch (row.contentType) {
      case 'review':
        backgroundColor = REFERENCE_STRUCTURE.colors.reviews;
        break;
      case 'comment':
        backgroundColor = REFERENCE_STRUCTURE.colors.comments;
        break;
      case 'discussion':
        backgroundColor = REFERENCE_STRUCTURE.colors.discussions;
        break;
      default:
        backgroundColor = 'white';
    }
    
    rowRange.setBackground(backgroundColor);
  });
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—É–º–º
 */
function addTotalSums(sheet, data) {
  const reviews = data.filter(row => row.contentType === 'review');
  const comments = data.filter(row => row.contentType === 'comment');
  const discussions = data.filter(row => row.contentType === 'discussion');
  
  const totalRow = data.length + 3; // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏—Ç–æ–≥–æ–≤
  sheet.getRange(totalRow, 1).setValue('–ò–¢–û–ì–û:');
  sheet.getRange(totalRow + 1, 1).setValue('–û—Ç–∑—ã–≤—ã (–û–°):');
  sheet.getRange(totalRow + 2, 1).setValue('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–¶–°):');
  sheet.getRange(totalRow + 3, 1).setValue('–û–±—Å—É–∂–¥–µ–Ω–∏—è (–ü–°):');
  
  // –ó–Ω–∞—á–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤
  sheet.getRange(totalRow + 1, 2).setValue(reviews.length);
  sheet.getRange(totalRow + 2, 2).setValue(comments.length);
  sheet.getRange(totalRow + 3, 2).setValue(discussions.length);
  
  // –ò—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
  const totalViews = data.reduce((sum, row) => sum + (row['–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ'] || 0), 0);
  sheet.getRange(totalRow, 12).setValue(totalViews);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
  const totalRange = sheet.getRange(totalRow, 1, 4, REFERENCE_STRUCTURE.headers.length);
  totalRange.setBackground(REFERENCE_STRUCTURE.colors.totals);
  totalRange.setFontWeight('bold');
}

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ –≤ —ç—Ç–∞–ª–æ–Ω–µ
 */
function applyReferenceFormatting(sheet, data) {
  // –û–±—â–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã
  const fullRange = sheet.getRange(1, 1, data.length + 10, REFERENCE_STRUCTURE.headers.length);
  fullRange.setBorder(true, true, true, true, true, true);
  
  // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
  sheet.getRange(2, 1, data.length, REFERENCE_STRUCTURE.headers.length).setVerticalAlignment('top');
  
  // –ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ - –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
  const numericColumns = ['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–µ–º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞', '–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ'];
  numericColumns.forEach(colName => {
    const colIndex = REFERENCE_STRUCTURE.headers.indexOf(colName);
    if (colIndex !== -1) {
      sheet.getRange(2, colIndex + 1, data.length, 1).setHorizontalAlignment('right');
    }
  });
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫
  sheet.autoResizeRows(1, data.length + 10);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —ç—Ç–∞–ª–æ–Ω—É
 */
function validateAgainstReference(data) {
  const reviews = data.filter(row => row.contentType === 'review');
  const comments = data.filter(row => row.contentType === 'comment');
  const discussions = data.filter(row => row.contentType === 'discussion');
  
  const validation = {
    reviews: {
      actual: reviews.length,
      target: TARGET_METRICS.reviews,
      passed: reviews.length === TARGET_METRICS.reviews
    },
    comments: {
      actual: comments.length,
      target: TARGET_METRICS.comments,
      passed: comments.length === TARGET_METRICS.comments
    },
    discussions: {
      actual: discussions.length,
      target: TARGET_METRICS.discussions,
      passed: discussions.length === TARGET_METRICS.discussions
    },
    dataIntegrity: data.every(row => row['–ü–ª–æ—â–∞–¥–∫–∞'] || row['–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è']),
    totalRows: data.length
  };
  
  validation.passed = validation.reviews.passed && validation.comments.passed && validation.dataIntegrity;
  validation.accuracy = validation.passed ? 100 : Math.round((validation.reviews.actual + validation.comments.actual) / (TARGET_METRICS.reviews + TARGET_METRICS.comments) * 100);
  
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`);
  console.log(`   –û—Ç–∑—ã–≤—ã: ${validation.reviews.actual}/${validation.reviews.target} ${validation.reviews.passed ? '‚úÖ' : '‚ùå'}`);
  console.log(`   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${validation.comments.actual}/${validation.comments.target} ${validation.comments.passed ? '‚úÖ' : '‚ùå'}`);
  console.log(`   –û–±—Å—É–∂–¥–µ–Ω–∏—è: ${validation.discussions.actual}/${validation.discussions.target} ${validation.discussions.passed ? '‚úÖ' : '‚ùå'}`);
  console.log(`   –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: ${validation.dataIntegrity ? '‚úÖ' : '‚ùå'}`);
  console.log(`   –¢–æ—á–Ω–æ—Å—Ç—å: ${validation.accuracy}%`);
  
  return validation;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
 */
function isEmptyRow(row) {
  return !row || row.every(cell => !cell || cell.toString().trim() === '');
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏-–∑–∞–≥–æ–ª–æ–≤–∫–∞
 */
function isHeaderRow(row) {
  if (!row || row.length === 0) return false;
  
  const firstCell = (row[0] || '').toString().toLowerCase().trim();
  const headerPatterns = ['–æ—Ç–∑—ã–≤—ã', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–æ–±—Å—É–∂–¥–µ–Ω–∏—è', '–∏—Ç–æ–≥–æ', '–≤—Å–µ–≥–æ'];
  
  return headerPatterns.some(pattern => firstCell.includes(pattern));
}

// =============================================================================
// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ü–£–°–ö–ê
// =============================================================================

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
 */
function main() {
  return createExactMatchOutput();
}

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
 */
function quickTest() {
  console.log('‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const sourceData = getSourceDataFromReference();
    const processedData = processDataWithExactMatch(sourceData);
    const validation = validateAgainstReference(processedData);
    
    return {
      success: true,
      sourceRows: sourceData.length,
      processedRows: processedData.length,
      validation: validation
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ:', error);
    return { success: false, error: error.message };
  }
}