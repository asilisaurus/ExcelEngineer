/**
 * üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ GOOGLE SHEETS
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
 * URL: https://docs.google.com/spreadsheets/d/1RT8T5gnDPe0KMikTmVNdSvxqDal3aQUmelpEwItgxMI/edit?usp=sharing
 */

// –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ URL
const SHEET_ID = '1RT8T5gnDPe0KMikTmVNdSvxqDal3aQUmelpEwItgxMI';
const SHEET_URL = 'https://docs.google.com/spreadsheets/d/1RT8T5gnDPe0KMikTmVNdSvxqDal3aQUmelpEwItgxMI/edit?usp=sharing';

console.log('üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ GOOGLE SHEETS');
console.log('================================');
console.log(`üìä ID —Ç–∞–±–ª–∏—Ü—ã: ${SHEET_ID}`);
console.log(`üîó URL: ${SHEET_URL}`);

try {
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
  const spreadsheet = SpreadsheetApp.openById(SHEET_ID);
  
  console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞: ${spreadsheet.getName()}`);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
  const sheets = spreadsheet.getSheets();
  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: ${sheets.length}`);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
  sheets.forEach((sheet, index) => {
    const sheetName = sheet.getName();
    const maxRows = sheet.getMaxRows();
    const maxColumns = sheet.getMaxColumns();
    const lastRow = sheet.getLastRow();
    const lastColumn = sheet.getLastColumn();
    
    console.log(`\nüìÑ –õ–ò–°–¢ ${index + 1}: "${sheetName}"`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${maxRows}x${maxColumns}`);
    console.log(`   –î–∞–Ω–Ω—ã–µ: ${lastRow}x${lastColumn}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞
    if (lastRow > 0 && lastColumn > 0) {
      const data = sheet.getRange(1, 1, Math.min(lastRow, 20), lastColumn).getValues();
      
      console.log(`   –ü–µ—Ä–≤—ã–µ ${Math.min(data.length, 20)} —Å—Ç—Ä–æ–∫:`);
      
      data.forEach((row, rowIndex) => {
        const rowData = row.map(cell => {
          if (cell === null || cell === undefined) return '';
          const str = cell.toString();
          return str.length > 30 ? str.substring(0, 30) + '...' : str;
        });
        console.log(`     ${rowIndex + 1}: [${rowData.join(', ')}]`);
      });
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      console.log(`\n   üîç –ê–ù–ê–õ–ò–ó –ó–ê–ì–û–õ–û–í–ö–û–í –¥–ª—è –ª–∏—Å—Ç–∞ "${sheetName}"`);
      for (let i = 0; i < Math.min(10, data.length); i++) {
        const row = data[i];
        const rowText = row.join(' ').toLowerCase();
        
        // –ü–æ–∏—Å–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        const patterns = [
          '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è',
          '–ø–ª–æ—â–∞–¥–∫–∞',
          '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
          '–¥–∞—Ç–∞',
          '–∞–≤—Ç–æ—Ä',
          '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã',
          '–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ',
          '—Ç–∏–ø –ø–æ—Å—Ç–∞'
        ];
        
        const foundPatterns = patterns.filter(pattern => rowText.includes(pattern));
        
        if (foundPatterns.length > 0) {
          console.log(`     –°—Ç—Ä–æ–∫–∞ ${i + 1}: –í–û–ó–ú–û–ñ–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò`);
          console.log(`     –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: ${foundPatterns.join(', ')}`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫
          row.forEach((cell, colIndex) => {
            if (cell && cell.toString().trim()) {
              console.log(`       –ö–æ–ª–æ–Ω–∫–∞ ${colIndex + 1}: "${cell}"`);
            }
          });
        }
      }
      
      // –ü–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
      console.log(`\n   üìä –ê–ù–ê–õ–ò–ó –†–ê–ó–î–ï–õ–û–í –¥–ª—è –ª–∏—Å—Ç–∞ "${sheetName}"`);
      const sections = [];
      
      for (let i = 0; i < data.length; i++) {
        const row = data[i];
        if (row.length > 0) {
          const firstCell = (row[0] || '').toString().toLowerCase().trim();
          
          if (firstCell.includes('–æ—Ç–∑—ã–≤') || firstCell.includes('–æ—Å') ||
              firstCell.includes('—Ü–µ–ª–µ–≤—ã–µ') || firstCell.includes('—Ü—Å') ||
              firstCell.includes('–ø–ª–æ—â–∞–¥–∫–∏') || firstCell.includes('–ø—Å') ||
              firstCell.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è') || firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')) {
            
            sections.push({
              row: i + 1,
              name: firstCell,
              type: firstCell.includes('–æ—Ç–∑—ã–≤') || firstCell.includes('–æ—Å') ? 'reviews' :
                    firstCell.includes('—Ü–µ–ª–µ–≤—ã–µ') || firstCell.includes('—Ü—Å') ? 'targeted' :
                    firstCell.includes('–ø–ª–æ—â–∞–¥–∫–∏') || firstCell.includes('–ø—Å') ? 'social' : 'other'
            });
          }
        }
      }
      
      console.log(`     –ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤: ${sections.length}`);
      sections.forEach(section => {
        console.log(`       –°—Ç—Ä–æ–∫–∞ ${section.row}: "${section.name}" (${section.type})`);
      });
    }
  });
  
  console.log('\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù');
  console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞!');
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
  console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ!');
}