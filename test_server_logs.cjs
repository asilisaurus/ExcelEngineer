async function testServerLogs() {
  console.log('üìã –¢–ï–°–¢ –õ–û–ì–û–í –°–ï–†–í–ï–†–ê –í–û –í–†–ï–ú–Ø –û–ë–†–ê–ë–û–¢–ö–ò');
  console.log('='.repeat(50));
  
  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
    console.log('‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –¥—Ä—É–≥–æ–º –æ–∫–Ω–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞!');
    console.log('');
    
    const response = await fetch('http://localhost:5000/api/import-google-sheets', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url: 'https://docs.google.com/spreadsheets/d/1z4KJfXSNaV8Zw5Qi4hKdVsoKvt9GTSrweWv45URzB4I/edit?usp=sharing'
      })
    });
    
    const result = await response.json();
    const fileId = result.fileId;
    console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, ID —Ñ–∞–π–ª–∞: ${fileId}`);
    console.log('');
    console.log('üîç –í –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è:');
    console.log('  - "üî•üî•üî• –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –ù–û–í–´–ô –ü–†–û–¶–ï–°–°–û–† ExcelProcessorSimple!"');
    console.log('  - "üîç DEBUG DATE: Checking column..."');
    console.log('  - "üìÖ Found DATE (...)"');
    console.log('  - "üë§ Found AUTHOR (...)"');
    console.log('');
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    let attempts = 0;
    const maxAttempts = 15;
    
    while (attempts < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const statusResponse = await fetch(`http://localhost:5000/api/files/${fileId}`);
      const fileInfo = await statusResponse.json();
      
      console.log(`[${attempts + 1}/${maxAttempts}] üìä –°—Ç–∞—Ç—É—Å: ${fileInfo.status}, –°—Ç—Ä–æ–∫: ${fileInfo.rowsProcessed || 0}`);
      
      if (fileInfo.status === 'completed') {
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log(`üìÅ –§–∞–π–ª: ${fileInfo.processedName}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\nüîç –ê–ù–ê–õ–ò–ó –°–û–ó–î–ê–ù–ù–û–ì–û –§–ê–ô–õ–ê:');
        const ExcelJS = require('exceljs');
        const workbook = new ExcelJS.Workbook();
        
        try {
          await workbook.xlsx.readFile(`uploads/${fileInfo.processedName}`);
          const sheet = workbook.getWorksheet(1);
          
          console.log('üìã –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
          for (let i = 5; i <= 10; i++) {
            const row = sheet.getRow(i);
            const platform = row.getCell(1).text || row.getCell(1).value || '';
            const text = (row.getCell(3).text || row.getCell(3).value || '').substring(0, 30);
            const date = row.getCell(4).text || row.getCell(4).value || '';
            const author = row.getCell(5).text || row.getCell(5).value || '';
            
            console.log(`–°—Ç—Ä–æ–∫–∞ ${i}: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞="${platform}" | –î–∞—Ç–∞="${date}" | –ê–≤—Ç–æ—Ä="${author}" | –¢–µ–∫—Å—Ç="${text}..."`);
          }
          
          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          let datesCount = 0;
          let authorsCount = 0;
          
          for (let i = 5; i <= 25; i++) {
            const row = sheet.getRow(i);
            const date = row.getCell(4).text || row.getCell(4).value;
            const author = row.getCell(5).text || row.getCell(5).value;
            
            if (date && date !== '' && date !== '–û—Ç–∑—ã–≤—ã' && date !== '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') {
              datesCount++;
            }
            if (author && author !== '' && author !== '–û—Ç–∑—ã–≤—ã' && author !== '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') {
              authorsCount++;
            }
          }
          
          console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö):`);
          console.log(`  üìÖ –î–∞—Ç –Ω–∞–π–¥–µ–Ω–æ: ${datesCount}`);
          console.log(`  üë§ –ê–≤—Ç–æ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${authorsCount}`);
          
          if (datesCount === 0) {
            console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –î–∞—Ç—ã –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª!');
            console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π "üìÖ Found DATE"');
          } else {
            console.log('\n‚úÖ –£–°–ü–ï–•: –î–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!');
          }
          
        } catch (fileError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞:', fileError.message);
        }
        
        break;
      }
      
      if (fileInfo.status === 'error') {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', fileInfo.errorMessage);
        break;
      }
      
      attempts++;
    }
    
    if (attempts >= maxAttempts) {
      console.log('‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

testServerLogs(); 