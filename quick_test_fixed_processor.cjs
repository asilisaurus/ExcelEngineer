const fs = require('fs');
const path = require('path');

/**
 * üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –±–∞–∑–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
 */

async function quickTest() {
  console.log('üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê');
  console.log('=' .repeat(50));

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  console.log('\nüìã 1. –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
  const processorPath = path.join(__dirname, 'google-apps-script-processor-fixed-boundaries.js');
  
  if (!fs.existsSync(processorPath)) {
    console.log('‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const processorContent = fs.readFileSync(processorPath, 'utf8');
  const hasFix = processorContent.includes('sectionStart = i + 1');
  
  console.log(`${hasFix ? '‚úÖ' : '‚ùå'} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${hasFix ? '–ü–†–ò–ú–ï–ù–ï–ù–û' : '–ù–ï –ü–†–ò–ú–ï–ù–ï–ù–û'}`);
  console.log(`üîç –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: sectionStart = i + 1 (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–µ–∫—Ü–∏–π)`);

  // 2. –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏
  console.log('\nüß™ 2. –°–ò–ú–£–õ–Ø–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò:');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testData = [
    ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º'],
    ['–ü–µ—Ä–∏–æ–¥', '–ú–∞—Ä—Ç 2025'],
    ['–î–∞—Ç–∞', '2025-03-31'],
    ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ü–æ—Å—Ç', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'], // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    ['–æ—Ç–∑—ã–≤—ã', '', '', ''],                          // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
    ['–û—Ç–∑—ã–≤ 1', '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π', '100', '5'],       // –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ 1
    ['–û—Ç–∑—ã–≤ 2', '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π', '150', '8'],          // –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ 2
    ['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20', '', '', ''],              // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    ['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 1', '–¢–µ–∫—Å—Ç', '200', '10'],        // –î–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è 1
    ['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 2', '–¢–µ–∫—Å—Ç', '180', '7'],         // –î–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è 2
    ['–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è', '', '', ''],             // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
    ['–û–±—Å—É–∂–¥–µ–Ω–∏–µ 1', '–¢–µ–∫—Å—Ç', '300', '15'],         // –î–∞–Ω–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è 1
    ['–û–±—Å—É–∂–¥–µ–Ω–∏–µ 2', '–¢–µ–∫—Å—Ç', '250', '12'],         // –î–∞–Ω–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è 2
    ['–û–±—Å—É–∂–¥–µ–Ω–∏–µ 3', '–¢–µ–∫—Å—Ç', '220', '9']           // –î–∞–Ω–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è 3
  ];

  console.log(`üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: ${testData.length} —Å—Ç—Ä–æ–∫`);
  console.log(`   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: 3 –∏–Ω—Ñ–æ —Å—Ç—Ä–æ–∫–∏ + 1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ + 3 —Å–µ–∫—Ü–∏–∏`);

  // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏ (—Å –æ—à–∏–±–∫–æ–π)
  console.log('\n‚ùå 3. –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê (—Å –æ—à–∏–±–∫–æ–π):');
  const oldResults = simulateOldLogic(testData);
  console.log(`   –û—Ç–∑—ã–≤—ã: ${oldResults.reviews} (–≤–∫–ª—é—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫)`);
  console.log(`   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${oldResults.comments} (–≤–∫–ª—é—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫)`);
  console.log(`   –û–±—Å—É–∂–¥–µ–Ω–∏—è: ${oldResults.discussions} (–≤–∫–ª—é—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫)`);
  console.log(`   –í—Å–µ–≥–æ: ${oldResults.total}`);

  // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π)
  console.log('\n‚úÖ 4. –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è):');
  const newResults = simulateNewLogic(testData);
  console.log(`   –û—Ç–∑—ã–≤—ã: ${newResults.reviews} (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)`);
  console.log(`   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${newResults.comments} (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)`);
  console.log(`   –û–±—Å—É–∂–¥–µ–Ω–∏—è: ${newResults.discussions} (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)`);
  console.log(`   –í—Å–µ–≥–æ: ${newResults.total}`);

  // 5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('\nüìä 5. –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
  const improvement = newResults.total - oldResults.total;
  console.log(`   –£–ª—É—á—à–µ–Ω–∏–µ: ${improvement > 0 ? '+' : ''}${improvement} –∑–∞–ø–∏—Å–µ–π`);
  
  const expectedResults = { reviews: 2, comments: 2, discussions: 3, total: 7 };
  const accuracy = calculateAccuracy(newResults, expectedResults);
  
  console.log(`   –û–∂–∏–¥–∞–µ–º–æ: ${expectedResults.reviews}+${expectedResults.comments}+${expectedResults.discussions} = ${expectedResults.total}`);
  console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${newResults.reviews}+${newResults.comments}+${newResults.discussions} = ${newResults.total}`);
  console.log(`   –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy.toFixed(2)}%`);

  // 6. –í–µ—Ä–¥–∏–∫—Ç
  console.log('\nüéØ 6. –í–ï–†–î–ò–ö–¢:');
  if (hasFix && accuracy >= 95) {
    console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!');
    console.log('   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ');
    console.log('   ‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('   ‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å 95%+');
    console.log('   üéâ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
  } else {
    console.log('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù');
    if (!hasFix) console.log('   ‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ');
    if (accuracy < 95) console.log('   ‚ùå –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å');
    console.log('   üîß –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
  }

  return { hasFix, accuracy, oldResults, newResults };
}

// –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏ (—Å –æ—à–∏–±–∫–æ–π)
function simulateOldLogic(data) {
  const sections = findSectionsOld(data);
  return calculateStats(sections);
}

// –°–∏–º—É–ª—è—Ü–∏—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π)
function simulateNewLogic(data) {
  const sections = findSectionsNew(data);
  return calculateStats(sections);
}

// –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ü–∏–π (—Å –æ—à–∏–±–∫–æ–π)
function findSectionsOld(data) {
  const sections = {};
  const sectionKeywords = ['–æ—Ç–∑—ã–≤—ã', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20', '–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è'];
  
  for (let i = 0; i < data.length; i++) {
    const rowText = data[i].join(' ').toLowerCase();
    
    for (const keyword of sectionKeywords) {
      if (rowText.includes(keyword)) {
        const sectionStart = i; // –û–®–ò–ë–ö–ê: –≤–∫–ª—é—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
        let sectionEnd = data.length;
        
        for (let j = i + 1; j < data.length; j++) {
          const nextRowText = data[j].join(' ').toLowerCase();
          if (sectionKeywords.some(k => nextRowText.includes(k))) {
            sectionEnd = j;
            break;
          }
        }
        
        sections[keyword] = { start: sectionStart, end: sectionEnd };
        break;
      }
    }
  }
  
  return sections;
}

// –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ü–∏–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
function findSectionsNew(data) {
  const sections = {};
  const sectionKeywords = ['–æ—Ç–∑—ã–≤—ã', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20', '–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è'];
  
  for (let i = 0; i < data.length; i++) {
    const rowText = data[i].join(' ').toLowerCase();
    
    for (const keyword of sectionKeywords) {
      if (rowText.includes(keyword)) {
        const sectionStart = i + 1; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
        let sectionEnd = data.length;
        
        for (let j = i + 1; j < data.length; j++) {
          const nextRowText = data[j].join(' ').toLowerCase();
          if (sectionKeywords.some(k => nextRowText.includes(k))) {
            sectionEnd = j;
            break;
          }
        }
        
        sections[keyword] = { start: sectionStart, end: sectionEnd };
        break;
      }
    }
  }
  
  return sections;
}

// –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function calculateStats(sections) {
  const stats = { reviews: 0, comments: 0, discussions: 0, total: 0 };
  
  if (sections['–æ—Ç–∑—ã–≤—ã']) {
    stats.reviews = sections['–æ—Ç–∑—ã–≤—ã'].end - sections['–æ—Ç–∑—ã–≤—ã'].start;
  }
  
  if (sections['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20']) {
    stats.comments = sections['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20'].end - sections['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20'].start;
  }
  
  if (sections['–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è']) {
    stats.discussions = sections['–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è'].end - sections['–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è'].start;
  }
  
  stats.total = stats.reviews + stats.comments + stats.discussions;
  return stats;
}

// –†–∞—Å—á–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏
function calculateAccuracy(actual, expected) {
  const totalExpected = expected.total;
  const totalActual = actual.total;
  
  if (totalExpected === 0) return totalActual === 0 ? 100 : 0;
  
  const accuracy = Math.max(0, 100 - Math.abs(totalActual - totalExpected) / totalExpected * 100);
  return accuracy;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
quickTest().catch(console.error); 