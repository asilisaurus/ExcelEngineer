const fs = require('fs');

async function testWebInterface() {
  console.log('üåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ê');
  console.log('='.repeat(50));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...');
    const response = await fetch('http://localhost:5000');
    
    if (response.ok) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status}`);
      console.log(`üìù Content-Type: ${response.headers.get('content-type')}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º API
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º API...');
      const apiResponse = await fetch('http://localhost:5000/api/files');
      
      if (apiResponse.ok) {
        const files = await apiResponse.json();
        console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
      } else {
        console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏
      console.log('\nüåê –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –î–û–°–¢–£–ü–ê:');
      console.log('üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø: http://localhost:5000');
      console.log('üìç –°–µ—Ç—å (–Ω–∞–π–¥–∏—Ç–µ –≤–∞—à IP): http://[IP_ADDRESS]:5000');
      
      console.log('\nüí° –ö–ê–ö –ù–ê–ô–¢–ò IP:');
      console.log('Windows: ipconfig');
      console.log('Mac/Linux: ifconfig | grep "inet "');
      
      console.log('\nüéØ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ê:');
      console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–æ–≤ (Drag & Drop)');
      console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∏–∑ Google Sheets');
      console.log('‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
      console.log('‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      console.log('‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–æ–∫');
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏');
      
      console.log('\nüöÄ –ò–ù–¢–ï–†–§–ï–ô–° –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!');
      return true;
      
    } else {
      console.log(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: ${response.status}`);
      console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∑–∞–ø—É—â–µ–Ω: npm run dev');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    console.log('\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
    console.log('‚Ä¢ –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω (npm run dev)');
    console.log('‚Ä¢ –ü–æ—Ä—Ç 5000 –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º');
    console.log('‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
    
    console.log('\nüîß –†–ï–®–ï–ù–ò–ï:');
    console.log('1. cd ExcelEngineer');
    console.log('2. npm run dev');
    console.log('3. –ñ–¥–∏—Ç–µ "serving on port 5000"');
    console.log('4. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000');
    
    return false;
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async function performanceTest() {
  console.log('\n‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò');
  console.log('='.repeat(30));
  
  try {
    const start = Date.now();
    const response = await fetch('http://localhost:5000/api/files');
    const duration = Date.now() - start;
    
    if (response.ok) {
      console.log(`‚úÖ API –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ ${duration}–º—Å`);
      if (duration < 100) {
        console.log('üöÄ –û—Ç–ª–∏—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å!');
      } else if (duration < 500) {
        console.log('‚úÖ –•–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å');
      } else {
        console.log('‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫');
      }
    }
  } catch (error) {
    console.log('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ —É–¥–∞–ª—Å—è');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testWebInterface()
  .then(success => {
    if (success) {
      return performanceTest();
    }
  })
  .catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  });