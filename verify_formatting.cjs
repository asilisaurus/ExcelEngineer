const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');

function verifyFormatting() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
    const latestFile = 'uploads/file-1751801349824-177095888_–ú–∞—Ä—Ç_2025_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_20250706.xlsx';
    
    if (!fs.existsSync(latestFile)) {
      console.log('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', latestFile);
      return;
    }
    
    const workbook = XLSX.readFile(latestFile);
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
    
    console.log(`üìä –õ–∏—Å—Ç: ${sheetName}`);
    console.log(`üìã –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${data.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:');
    
    if (data[0]) {
      console.log('‚úÖ –°—Ç—Ä–æ–∫–∞ 1:', data[0].slice(0, 8));
    }
    if (data[1]) {
      console.log('‚úÖ –°—Ç—Ä–æ–∫–∞ 2:', data[1].slice(0, 8));
    }
    if (data[2]) {
      console.log('‚úÖ –°—Ç—Ä–æ–∫–∞ 3:', data[2].slice(0, 8));
    }
    if (data[3]) {
      console.log('‚úÖ –°—Ç—Ä–æ–∫–∞ 4:', data[3].slice(0, 8));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª—ã
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤:');
    let sectionCount = 0;
    
    for (let i = 4; i < Math.min(data.length, 50); i++) {
      if (data[i] && data[i][0] && (
        data[i][0].includes('–û—Ç–∑—ã–≤—ã') || 
        data[i][0].includes('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') ||
        data[i][0].includes('–ê–∫—Ç–∏–≤–Ω—ã–µ')
      )) {
        console.log(`‚úÖ –†–∞–∑–¥–µ–ª ${++sectionCount}: ${data[i][0]}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:');
    const lastRows = data.slice(-10);
    lastRows.forEach((row, index) => {
      if (row && row[0] && (
        row[0].includes('–°—É–º–º–∞—Ä–Ω–æ–µ') || 
        row[0].includes('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ') ||
        row[0].includes('–î–æ–ª—è')
      )) {
        console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${row[0]} = ${row[5] || 'N/A'}`);
      }
    });
    
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`üìÅ –§–∞–π–ª: ${latestFile}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  }
}

verifyFormatting(); 