/**
 * FORTEDETRIM ORM PROCESSOR –¥–ª—è Google Sheets
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 */

const CONFIG = {
  MONTHS: {
    '—è–Ω–≤–∞—Ä—å': '–Ø–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å': '–§–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç': '–ú–∞—Ä—Ç',
    '–∞–ø—Ä–µ–ª—å': '–ê–ø—Ä–µ–ª—å', '–º–∞–π': '–ú–∞–π', '–∏—é–Ω—å': '–ò—é–Ω—å',
    '–∏—é–ª—å': '–ò—é–ª—å', '–∞–≤–≥—É—Å—Ç': '–ê–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å': '–°–µ–Ω—Ç—è–±—Ä—å',
    '–æ–∫—Ç—è–±—Ä—å': '–û–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å': '–ù–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å': '–î–µ–∫–∞–±—Ä—å'
  },
  QUALITY: {
    MIN_TEXT_LENGTH: 20,
    MIN_PLATFORM_LENGTH: 3,
    HIGH_QUALITY_THRESHOLD: 85
  }
};

function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üöÄ Fortedetrim ORM')
    .addItem('üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç', 'createReport')
    .addItem('üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞', 'analyzeQuality')
    .addItem('‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞', 'showHelp')
    .addToUi();
}

function createReport() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    const monthResponse = ui.prompt(
      '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞',
      '–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∏—é–Ω—å):',
      ui.ButtonSet.OK_CANCEL
    );
    
    if (monthResponse.getSelectedButton() !== ui.Button.OK) return;
    
    const targetMonth = monthResponse.getResponseText().toLowerCase().trim();
    
    const sheetResponse = ui.prompt(
      '–í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö',
      '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:',
      ui.ButtonSet.OK_CANCEL
    );
    
    if (sheetResponse.getSelectedButton() !== ui.Button.OK) return;
    
    const sourceSheetName = sheetResponse.getResponseText().trim();
    const sourceSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sourceSheetName);
    
    if (!sourceSheet) {
      ui.alert('–û—à–∏–±–∫–∞', `–õ–∏—Å—Ç "${sourceSheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`, ui.ButtonSet.OK);
      return;
    }
    
    const processedData = processData(sourceSheet, targetMonth);
    const reportSheet = createReportSheet(processedData, targetMonth);
    const quality = analyzeDataQuality(processedData);
    
    showResults(reportSheet, quality, processedData);
    
  } catch (error) {
    ui.alert('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç: ${error.message}`, ui.ButtonSet.OK);
  }
}

function processData(sourceSheet, targetMonth) {
  const data = sourceSheet.getDataRange().getValues();
  const headers = findHeaders(data);
  
  if (headers.rowIndex === -1) {
    throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏');
  }
  
  const columnMapping = mapColumns(headers.columns);
  const extractedData = extractData(data, headers.rowIndex, columnMapping);
  const categorizedData = categorizeData(extractedData);
  
  return {
    month: CONFIG.MONTHS[targetMonth] || targetMonth,
    reviews: categorizedData.reviews,
    comments: categorizedData.comments,
    discussions: categorizedData.discussions,
    total: extractedData.length
  };
}

function findHeaders(data) {
  for (let i = 0; i < Math.min(15, data.length); i++) {
    const rowText = data[i].join(' ').toLowerCase();
    if (rowText.includes('–ø–ª–æ—â–∞–¥–∫–∞') || rowText.includes('—Ç–µ–∫—Å—Ç') || rowText.includes('—Å—Å—ã–ª–∫–∞')) {
      return { rowIndex: i, columns: data[i] };
    }
  }
  return { rowIndex: -1, columns: [] };
}

function mapColumns(headers) {
  const mapping = {};
  headers.forEach((header, index) => {
    const h = header.toString().toLowerCase();
    if (h.includes('–ø–ª–æ—â–∞–¥–∫–∞')) mapping.platform = index;
    if (h.includes('—Å—Å—ã–ª–∫–∞')) mapping.link = index;
    if (h.includes('—Ç–µ–∫—Å—Ç')) mapping.text = index;
    if (h.includes('–¥–∞—Ç–∞')) mapping.date = index;
    if (h.includes('–Ω–∏–∫') || h.includes('–∞–≤—Ç–æ—Ä')) mapping.author = index;
    if (h.includes('–ø—Ä–æ—Å–º–æ—Ç—Ä')) mapping.views = index;
    if (h.includes('–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ')) mapping.engagement = index;
  });
  return mapping;
}

function extractData(data, startRow, mapping) {
  const results = [];
  
  for (let i = startRow + 1; i < data.length; i++) {
    const row = data[i];
    if (row.every(cell => !cell || cell.toString().trim() === '')) continue;
    
    const item = {
      platform: getValue(row[mapping.platform]),
      link: getValue(row[mapping.link]),
      text: getValue(row[mapping.text]),
      date: getValue(row[mapping.date]),
      author: getValue(row[mapping.author]),
      views: getValue(row[mapping.views]),
      engagement: getValue(row[mapping.engagement])
    };
    
    if (item.platform && item.text && item.text.length > 10) {
      results.push(item);
    }
  }
  
  return results;
}

function getValue(cell) {
  if (cell === null || cell === undefined) return '';
  return cell.toString().trim();
}

function categorizeData(data) {
  const reviews = [];
  const comments = [];
  const discussions = [];
  
  data.forEach(item => {
    const text = item.text.toLowerCase();
    
    if (text.includes('–æ—Ç–∑—ã–≤') || text.includes('—Ä–µ–∫–æ–º–µ–Ω–¥—É—é') || text.includes('–ø–æ–∫—É–ø–∞–ª')) {
      reviews.push(item);
    } else if (text.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π') || text.includes('–≤–æ–ø—Ä–æ—Å') || text.includes('—Å–ø—Ä–∞—à–∏–≤–∞')) {
      comments.push(item);
    } else {
      discussions.push(item);
    }
  });
  
  return { reviews, comments, discussions };
}

function createReportSheet(data, month) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetName = `Fortedetrim ORM report ${month} 2025 result`;
  
  const existing = ss.getSheetByName(sheetName);
  if (existing) ss.deleteSheet(existing);
  
  const sheet = ss.insertSheet(sheetName);
  fillSheet(sheet, data);
  
  return sheet;
}

function fillSheet(sheet, data) {
  let row = 1;
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = ['–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞', '–ù–∏–∫', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ'];
  sheet.getRange(row, 1, 1, headers.length).setValues([headers]);
  sheet.getRange(row, 1, 1, headers.length).setFontWeight('bold').setBackground('#4285F4').setFontColor('white');
  row++;
  
  // –û—Ç–∑—ã–≤—ã
  if (data.reviews.length > 0) {
    sheet.getRange(row, 1).setValue('–û—Ç–∑—ã–≤—ã').setFontWeight('bold').setBackground('#E8F4FD');
    row++;
    
    data.reviews.forEach(item => {
      const rowData = [item.platform, item.link, item.text, item.date, item.author, item.views || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', item.engagement || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'];
      sheet.getRange(row, 1, 1, rowData.length).setValues([rowData]);
      row++;
    });
    row++;
  }
  
  // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
  if (data.comments.length > 0) {
    sheet.getRange(row, 1).setValue('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏').setFontWeight('bold').setBackground('#FFF2CC');
    row++;
    
    data.comments.forEach(item => {
      const rowData = [item.platform, item.link, item.text, item.date, item.author, item.views || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', item.engagement || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'];
      sheet.getRange(row, 1, 1, rowData.length).setValues([rowData]);
      row++;
    });
    row++;
  }
  
  // –û–±—Å—É–∂–¥–µ–Ω–∏—è
  if (data.discussions.length > 0) {
    sheet.getRange(row, 1).setValue('–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è').setFontWeight('bold').setBackground('#FCE5CD');
    row++;
    
    data.discussions.forEach(item => {
      const rowData = [item.platform, item.link, item.text, item.date, item.author, item.views || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', item.engagement || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'];
      sheet.getRange(row, 1, 1, rowData.length).setValues([rowData]);
      row++;
    });
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  sheet.autoResizeColumns(1, 7);
  sheet.setFrozenRows(1);
  sheet.getRange(1, 3, sheet.getLastRow(), 1).setWrap(true);
}

function analyzeDataQuality(data) {
  const allItems = [...data.reviews, ...data.comments, ...data.discussions];
  let totalScore = 0;
  let issues = 0;
  
  allItems.forEach(item => {
    let score = 100;
    
    if (!item.platform || item.platform.length < CONFIG.QUALITY.MIN_PLATFORM_LENGTH) {
      score -= 25;
      issues++;
    }
    
    if (!item.text || item.text.length < CONFIG.QUALITY.MIN_TEXT_LENGTH) {
      score -= 30;
      issues++;
    }
    
    if (!item.link || !item.link.includes('http')) {
      score -= 20;
      issues++;
    }
    
    if (!item.date) {
      score -= 15;
      issues++;
    }
    
    totalScore += Math.max(score, 0);
  });
  
  const avgScore = allItems.length > 0 ? totalScore / allItems.length : 0;
  
  return {
    score: Math.round(avgScore),
    issues: issues,
    total: allItems.length,
    grade: getGrade(avgScore)
  };
}

function getGrade(score) {
  if (score >= 95) return '–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ';
  if (score >= 85) return '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ';
  if (score >= 70) return '–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ';
  if (score >= 50) return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ';
  return '–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è';
}

function showResults(sheet, quality, data) {
  const ui = SpreadsheetApp.getUi();
  
  const message = `
üìä –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${sheet.getName()}
üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${data.total}
üìù –û—Ç–∑—ã–≤—ã: ${data.reviews.length}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${data.comments.length}
üó£Ô∏è –û–±—Å—É–∂–¥–µ–Ω–∏—è: ${data.discussions.length}
üéØ –ö–∞—á–µ—Å—Ç–≤–æ: ${quality.grade} (${quality.score}%)
‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: ${quality.issues}
  `;
  
  ui.alert('–†–µ–∑—É–ª—å—Ç–∞—Ç', message, ui.ButtonSet.OK);
  SpreadsheetApp.getActiveSpreadsheet().setActiveSheet(sheet);
}

function analyzeQuality() {
  const ui = SpreadsheetApp.getUi();
  const sheet = SpreadsheetApp.getActiveSheet();
  const data = sheet.getDataRange().getValues();
  
  const stats = {
    totalRows: data.length,
    emptyRows: 0,
    incompleteRows: 0
  };
  
  data.forEach((row, index) => {
    if (index === 0) return;
    
    const isEmpty = row.every(cell => !cell || cell.toString().trim() === '');
    const isIncomplete = row.some(cell => !cell || cell.toString().trim() === '');
    
    if (isEmpty) stats.emptyRows++;
    if (isIncomplete && !isEmpty) stats.incompleteRows++;
  });
  
  const completeness = Math.round(((stats.totalRows - stats.emptyRows - stats.incompleteRows) / stats.totalRows) * 100);
  
  ui.alert(
    '–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞',
    `–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${stats.totalRows}\n–ü—É—Å—Ç—ã–µ: ${stats.emptyRows}\n–ù–µ–ø–æ–ª–Ω—ã–µ: ${stats.incompleteRows}\n–ü–æ–ª–Ω–æ—Ç–∞: ${completeness}%`,
    ui.ButtonSet.OK
  );
}

function showHelp() {
  const ui = SpreadsheetApp.getUi();
  
  ui.alert(
    '–°–ø—Ä–∞–≤–∫–∞ - Fortedetrim ORM Processor',
    `
üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤

üìä –§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞

üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç"
3. –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—è—Ü –∏ –ª–∏—Å—Ç
4. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç

üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚Ä¢ –ü–ª–æ—â–∞–¥–∫–∞ (–º–∏–Ω. 3 —Å–∏–º–≤–æ–ª–∞)
‚Ä¢ –¢–µ–∫—Å—Ç (–º–∏–Ω. 20 —Å–∏–º–≤–æ–ª–æ–≤)
‚Ä¢ –°—Å—ã–ª–∫–∞ (—Å http)
‚Ä¢ –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥
    `,
    ui.ButtonSet.OK
  );
}
