/**
 * ============================================================================
 * GOOGLE APPS SCRIPT PROCESSOR - REAL DATA VERSION
 * ============================================================================
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
 * ID —Ç–∞–±–ª–∏—Ü—ã: 1pxUF5HnII7hVnaw077mE0FHqGp-TN1Rk
 * ============================================================================
 */

// =============================================================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// =============================================================================

// ID —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å 4 –º–µ—Å—è—Ü–∞–º–∏
const REFERENCE_SHEET_ID = '1pxUF5HnII7hVnaw077mE0FHqGp-TN1Rk';

// –¶–µ–ª–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const TARGET_METRICS = {
  reviews: 13,    // –û–° –∑–∞–ø–∏—Å–µ–π
  comments: 15,   // –¶–° –∑–∞–ø–∏—Å–µ–π
  discussions: 42 // –ü–° –∑–∞–ø–∏—Å–µ–π (–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è)
};

// =============================================================================
// –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
// =============================================================================

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function processRealGoogleSheets() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã...');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    const sourceData = getRealSourceData();
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${sourceData.length} —Å—Ç—Ä–æ–∫ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞`);
    
    // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const processedData = processRealData(sourceData);
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedData.length} –∑–∞–ø–∏—Å–µ–π`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
    const metricsCheck = checkTargetMetrics(processedData);
    console.log(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫: ${metricsCheck.passed ? '–ü–†–û–ô–î–ï–ù–ê' : '–ù–ï –ü–†–û–ô–î–ï–ù–ê'}`);
    
    // 4. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª
    const resultFileId = createRealResultFile(processedData, metricsCheck);
    console.log(`üíæ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${resultFileId}`);
    
    return {
      success: true,
      sourceRows: sourceData.length,
      processedRows: processedData.length,
      metricsCheck: metricsCheck,
      resultFileId: resultFileId
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
 */
function getRealSourceData() {
  try {
    const spreadsheet = SpreadsheetApp.openById(REFERENCE_SHEET_ID);
    const sheets = spreadsheet.getSheets();
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${sheets.length} –ª–∏—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ`);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ª–∏—Å—Ç–∞
    const targetSheet = findBestSheetInRealData(sheets);
    
    if (!targetSheet) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
    
    console.log(`üìã –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: ${targetSheet.getName()}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞
    const range = targetSheet.getDataRange();
    const values = range.getValues();
    
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${values.length} —Å—Ç—Ä–æ–∫ –∏–∑ –ª–∏—Å—Ç–∞ ${targetSheet.getName()}`);
    
    return values;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

/**
 * –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ –ª–∏—Å—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function findBestSheetInRealData(sheets) {
  let bestSheet = null;
  let bestScore = 0;
  
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏—Å—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ...');
  
  for (const sheet of sheets) {
    const sheetName = sheet.getName();
    const range = sheet.getDataRange();
    const values = range.getValues();
    
    if (values.length === 0) continue;
    
    let score = 0;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–∏—Å—Ç–∞
    const headerInfo = findRealHeaders(values);
    
    // –ë–∞–ª–ª—ã –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const keyHeaders = ['—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', '–ø–ª–æ—â–∞–¥–∫–∞', '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '—Ç–∏–ø –ø–æ—Å—Ç–∞'];
    const foundHeaders = headerInfo.headers.map(h => h.toLowerCase());
    
    keyHeaders.forEach(key => {
      if (foundHeaders.some(h => h.includes(key))) {
        score += 20;
      }
    });
    
    // –ë–∞–ª–ª—ã –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    const dataRows = values.slice(headerInfo.row + 1);
    score += Math.min(dataRows.length * 0.1, 50);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentTypes = new Set();
    let sampleCount = 0;
    
    for (const row of dataRows) {
      if (sampleCount >= 50) break;
      
      const contentType = determineRealContentType(row);
      if (contentType !== 'unknown') {
        contentTypes.add(contentType);
        sampleCount++;
      }
    }
    
    score += contentTypes.size * 15;
    
    // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ª–∏—Å—Ç–∞–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞
    const monthNames = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', 
                       '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'];
    
    if (monthNames.some(month => sheetName.toLowerCase().includes(month))) {
      score += 10;
    }
    
    console.log(`üìä –õ–∏—Å—Ç "${sheetName}": ${score} –±–∞–ª–ª–æ–≤ (${sampleCount} –∑–∞–ø–∏—Å–µ–π, ${contentTypes.size} —Ç–∏–ø–æ–≤)`);
    
    if (score > bestScore) {
      bestScore = score;
      bestSheet = sheet;
    }
  }
  
  return bestSheet;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function processRealData(rawData) {
  if (!rawData || rawData.length === 0) {
    throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
  }
  
  // 1. –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const headerInfo = findRealHeaders(rawData);
  console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${headerInfo.row}`);
  
  // 2. –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫
  const columnMapping = createRealColumnMapping(headerInfo.headers);
  console.log(`üóÇÔ∏è –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è ${Object.keys(columnMapping).length} –∫–æ–ª–æ–Ω–æ–∫`);
  
  // 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const dataRows = rawData.slice(headerInfo.row + 1);
  
  // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫
  const processedRows = [];
  let skippedRows = 0;
  
  for (let i = 0; i < dataRows.length; i++) {
    const row = dataRows[i];
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (isEmptyRow(row)) {
      skippedRows++;
      continue;
    }
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏-–∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (isRealHeaderRow(row)) {
      console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞-–∑–∞–≥–æ–ª–æ–≤–æ–∫: ${row[0]}`);
      skippedRows++;
      continue;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentType = determineRealContentType(row);
    
    if (contentType !== 'unknown') {
      const processedRow = extractRealRowData(row, contentType, columnMapping);
      if (processedRow) {
        processedRows.push(processedRow);
      }
    } else {
      skippedRows++;
    }
  }
  
  console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${processedRows.length}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedRows}`);
  
  // 5. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
  const reviews = processedRows.filter(row => row.type === 'review');
  const comments = processedRows.filter(row => row.type === 'comment');
  const discussions = processedRows.filter(row => row.type === 'discussion');
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ: –æ—Ç–∑—ã–≤–æ–≤=${reviews.length}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤=${comments.length}, –æ–±—Å—É–∂–¥–µ–Ω–∏–π=${discussions.length}`);
  
  return processedRows;
}

/**
 * –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function findRealHeaders(data) {
  for (let i = 0; i < Math.min(10, data.length); i++) {
    const row = data[i];
    if (!row || row.length === 0) continue;
    
    const rowStr = row.map(cell => (cell || '').toString().toLowerCase()).join(' ');
    
    if (rowStr.includes('—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è') || 
        rowStr.includes('–ø–ª–æ—â–∞–¥–∫–∞') || 
        rowStr.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è') ||
        rowStr.includes('—Ç–∏–ø –ø–æ—Å—Ç–∞')) {
      
      return {
        row: i,
        headers: row.map(cell => (cell || '').toString().trim())
      };
    }
  }
  
  // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
  return {
    row: 0,
    headers: data[0] ? data[0].map(cell => (cell || '').toString().trim()) : []
  };
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function createRealColumnMapping(headers) {
  const columnMapping = {};
  
  headers.forEach((header, index) => {
    const cleanHeader = header.toLowerCase().trim();
    if (cleanHeader) {
      columnMapping[cleanHeader] = index;
    }
  });
  
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è fallback
  const defaultMapping = {
    '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è': 0,
    '–ø–ª–æ—â–∞–¥–∫–∞': 1,
    '–ø—Ä–æ–¥—É–∫—Ç': 2,
    '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ': 3,
    '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è': 4,
    '—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏': 5,
    '–¥–∞—Ç–∞': 6,
    '–Ω–∏–∫': 7,
    '–∞–≤—Ç–æ—Ä': 8,
    '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–µ–º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ': 9,
    '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞': 10,
    '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ': 11,
    '–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ': 12,
    '—Ç–∏–ø –ø–æ—Å—Ç–∞': 13
  };
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥–∏
  return { ...defaultMapping, ...columnMapping };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function determineRealContentType(row) {
  if (!row || row.length === 0) return 'unknown';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–ª–æ–Ω–∫—É (—Ç–∏–ø –ø–æ—Å—Ç–∞)
  const lastColIndex = row.length - 1;
  const lastColValue = (row[lastColIndex] || '').toString().toLowerCase().trim();
  
  if (lastColValue === '–æ—Å' || lastColValue === '–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') {
    return 'review';
  }
  
  if (lastColValue === '—Ü—Å' || lastColValue === '—Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ') {
    return 'comment';
  }
  
  if (lastColValue === '–ø—Å' || lastColValue === '–ø–æ—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è') {
    return 'discussion';
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
  const firstColValue = (row[0] || '').toString().toLowerCase().trim();
  
  if (firstColValue.includes('–æ—Ç–∑—ã–≤') || firstColValue.includes('–æ—Å–Ω–æ–≤–Ω–æ–µ')) {
    return 'review';
  }
  
  if (firstColValue.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π') || firstColValue.includes('—Ü–µ–ª–µ–≤–æ–µ')) {
    return 'comment';
  }
  
  if (firstColValue.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏–µ') || firstColValue.includes('–ø–æ—Å—Ç')) {
    return 'discussion';
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç)
  if (row.length > 4) {
    const textValue = (row[4] || '').toString().trim();
    if (textValue.length > 10) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ review
      return 'review';
    }
  }
  
  return 'unknown';
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Å–µ–∫—Ü–∏–∏
 */
function isRealHeaderRow(row) {
  if (!row || row.length === 0) return false;
  
  const firstCell = (row[0] || '').toString().toLowerCase().trim();
  const headerPatterns = ['–æ—Ç–∑—ã–≤—ã', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '–æ–±—Å—É–∂–¥–µ–Ω–∏—è', '–∏—Ç–æ–≥–æ', '–≤—Å–µ–≥–æ'];
  
  return headerPatterns.some(pattern => firstCell.includes(pattern));
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–æ–π
 */
function isEmptyRow(row) {
  return !row || row.every(cell => !cell || cell.toString().trim() === '');
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
function extractRealRowData(row, type, mapping) {
  try {
    // –ò–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ (—Å fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
    const siteIndex = mapping['–ø–ª–æ—â–∞–¥–∫–∞'] || 1;
    const linkIndex = mapping['—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ'] || 3;
    const textIndex = mapping['—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'] || 4;
    const dateIndex = mapping['–¥–∞—Ç–∞'] || 6;
    const authorIndex = mapping['–∞–≤—Ç–æ—Ä'] || 8;
    const viewsIndex = mapping['–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ'] || 11;
    const engagementIndex = mapping['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ'] || 12;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const site = cleanValue(row[siteIndex]);
    const link = cleanValue(row[linkIndex]);
    const text = cleanValue(row[textIndex]);
    const date = cleanValue(row[dateIndex]);
    const author = cleanValue(row[authorIndex]);
    const views = extractViews(row[viewsIndex]);
    const engagement = extractEngagement(row[engagementIndex]);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω—É–∂–Ω–∞ –ª–∏–±–æ –ø–ª–æ—â–∞–¥–∫–∞, –ª–∏–±–æ —Ç–µ–∫—Å—Ç
    if (!site && !text) {
      return null;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–ª–æ—â–∞–¥–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —Å—Å—ã–ª–∫–∏
    let finalSite = site;
    if (!finalSite && link) {
      finalSite = extractSiteFromLink(link);
    }
    
    return {
      type: type,
      site: finalSite || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
      link: link,
      text: text || '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞',
      date: date,
      author: author,
      views: views,
      engagement: engagement
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏:', error);
    return null;
  }
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–∞–π—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
 */
function extractSiteFromLink(link) {
  try {
    if (!link) return '';
    
    const linkStr = link.toString().toLowerCase();
    
    if (linkStr.includes('market.yandex') || linkStr.includes('yandex.ru')) {
      return '–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç';
    }
    
    if (linkStr.includes('ozon.ru') || linkStr.includes('ozon.com')) {
      return 'Ozon';
    }
    
    if (linkStr.includes('wildberries.ru') || linkStr.includes('wb.ru')) {
      return 'Wildberries';
    }
    
    if (linkStr.includes('avito.ru')) {
      return 'Avito';
    }
    
    if (linkStr.includes('aliexpress')) {
      return 'AliExpress';
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–æ–º–µ–Ω
    const match = linkStr.match(/https?:\/\/([^\/]+)/);
    if (match && match[1]) {
      return match[1];
    }
    
    return '';
    
  } catch (error) {
    return '';
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏
 */
function cleanValue(value) {
  if (!value) return '';
  return value.toString().trim();
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
 */
function extractViews(value) {
  if (!value) return 0;
  
  const str = value.toString().replace(/\D/g, '');
  const num = parseInt(str);
  
  return isNaN(num) ? 0 : num;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
 */
function extractEngagement(value) {
  if (!value) return 0;
  
  const str = value.toString().replace(/[^\d.,]/g, '').replace(',', '.');
  const num = parseFloat(str);
  
  return isNaN(num) ? 0 : num;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–ª–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
 */
function checkTargetMetrics(processedData) {
  const reviews = processedData.filter(row => row.type === 'review');
  const comments = processedData.filter(row => row.type === 'comment');
  const discussions = processedData.filter(row => row.type === 'discussion');
  
  const results = {
    reviews: {
      actual: reviews.length,
      target: TARGET_METRICS.reviews,
      passed: reviews.length === TARGET_METRICS.reviews
    },
    comments: {
      actual: comments.length,
      target: TARGET_METRICS.comments,
      passed: comments.length === TARGET_METRICS.comments
    },
    discussions: {
      actual: discussions.length,
      target: TARGET_METRICS.discussions,
      passed: discussions.length === TARGET_METRICS.discussions
    }
  };
  
  const totalPassed = results.reviews.passed && results.comments.passed;
  
  console.log(`üìä –ú–µ—Ç—Ä–∏–∫–∏:`);
  console.log(`   –û—Ç–∑—ã–≤—ã: ${results.reviews.actual}/${results.reviews.target} ${results.reviews.passed ? '‚úÖ' : '‚ùå'}`);
  console.log(`   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${results.comments.actual}/${results.comments.target} ${results.comments.passed ? '‚úÖ' : '‚ùå'}`);
  console.log(`   –û–±—Å—É–∂–¥–µ–Ω–∏—è: ${results.discussions.actual}/${results.discussions.target} ${results.discussions.passed ? '‚úÖ' : '‚ùå'}`);
  
  return {
    ...results,
    passed: totalPassed,
    accuracy: totalPassed ? 100 : Math.round((results.reviews.actual + results.comments.actual) / (TARGET_METRICS.reviews + TARGET_METRICS.comments) * 100)
  };
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
 */
function createRealResultFile(processedData, metricsCheck) {
  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø—Ä–µ–¥—à–∏—Ç
    const currentDate = new Date();
    const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                       '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
    
    const fileName = `–†–µ–∑—É–ª—å—Ç–∞—Ç_–†–µ–∞–ª—å–Ω—ã—Ö_–î–∞–Ω–Ω—ã—Ö_${monthNames[currentDate.getMonth()]}_${currentDate.getFullYear()}`;
    const spreadsheet = SpreadsheetApp.create(fileName);
    
    // –õ–∏—Å—Ç 1: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const sheet = spreadsheet.getActiveSheet();
    sheet.setName('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã');
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = ['–¢–∏–ø', '–ü–ª–æ—â–∞–¥–∫–∞', '–°—Å—ã–ª–∫–∞', '–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞', '–ê–≤—Ç–æ—Ä', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ'];
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    
    // –î–∞–Ω–Ω—ã–µ
    const dataForSheet = processedData.map(row => [
      row.type === 'review' ? '–û—Ç–∑—ã–≤' : row.type === 'comment' ? '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' : '–û–±—Å—É–∂–¥–µ–Ω–∏–µ',
      row.site,
      row.link,
      row.text,
      row.date,
      row.author,
      row.views,
      row.engagement
    ]);
    
    if (dataForSheet.length > 0) {
      sheet.getRange(2, 1, dataForSheet.length, headers.length).setValues(dataForSheet);
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
    sheet.autoResizeColumns(1, headers.length);
    
    // –õ–∏—Å—Ç 2: –ú–µ—Ç—Ä–∏–∫–∏
    const metricsSheet = spreadsheet.insertSheet('–ú–µ—Ç—Ä–∏–∫–∏');
    
    const metricsHeaders = ['–¢–∏–ø', '–¶–µ–ª—å', '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏', '–°—Ç–∞—Ç—É—Å', '–¢–æ—á–Ω–æ—Å—Ç—å %'];
    metricsSheet.getRange(1, 1, 1, metricsHeaders.length).setValues([metricsHeaders]);
    
    const metricsData = [
      ['–û—Ç–∑—ã–≤—ã', metricsCheck.reviews.target, metricsCheck.reviews.actual, 
       metricsCheck.reviews.passed ? '–ü–†–û–ô–î–ï–ù–û' : '–ù–ï –ü–†–û–ô–î–ï–ù–û',
       Math.round(metricsCheck.reviews.actual / metricsCheck.reviews.target * 100)],
      ['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', metricsCheck.comments.target, metricsCheck.comments.actual, 
       metricsCheck.comments.passed ? '–ü–†–û–ô–î–ï–ù–û' : '–ù–ï –ü–†–û–ô–î–ï–ù–û',
       Math.round(metricsCheck.comments.actual / metricsCheck.comments.target * 100)],
      ['–û–±—Å—É–∂–¥–µ–Ω–∏—è', metricsCheck.discussions.target, metricsCheck.discussions.actual, 
       metricsCheck.discussions.passed ? '–ü–†–û–ô–î–ï–ù–û' : '–ù–ï –ü–†–û–ô–î–ï–ù–û',
       Math.round(metricsCheck.discussions.actual / metricsCheck.discussions.target * 100)]
    ];
    
    metricsSheet.getRange(2, 1, metricsData.length, metricsHeaders.length).setValues(metricsData);
    metricsSheet.getRange(1, 1, 1, metricsHeaders.length).setFontWeight('bold');
    metricsSheet.autoResizeColumns(1, metricsHeaders.length);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
    metricsSheet.getRange(6, 1, 1, 2).setValues([['–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:', `${metricsCheck.accuracy}%`]]);
    metricsSheet.getRange(6, 1, 1, 2).setFontWeight('bold');
    
    console.log(`üíæ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${fileName}`);
    console.log(`üîó ID —Ñ–∞–π–ª–∞: ${spreadsheet.getId()}`);
    
    return spreadsheet.getId();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
    throw error;
  }
}

// =============================================================================
// –¢–ï–°–¢–û–í–´–ï –§–£–ù–ö–¶–ò–ò
// =============================================================================

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function testRealProcessor() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const result = processRealGoogleSheets();
    
    if (result.success) {
      console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${result.processedRows}`);
      console.log(`üéØ –¢–æ—á–Ω–æ—Å—Ç—å: ${result.metricsCheck.accuracy}%`);
      console.log(`üîó ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${result.resultFileId}`);
    } else {
      console.log('‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', result.error);
    }
    
    return result;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function analyzeRealDataStructure() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    const sourceData = getRealSourceData();
    
    if (sourceData.length === 0) {
      console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
    console.log('üìã –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫:');
    for (let i = 0; i < Math.min(10, sourceData.length); i++) {
      const row = sourceData[i];
      console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 1}:`, row.slice(0, 5).map(cell => 
        (cell || '').toString().substring(0, 30)
      ));
    }
    
    // –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const headerInfo = findRealHeaders(sourceData);
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:', headerInfo.headers);
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentTypes = new Map();
    const dataRows = sourceData.slice(headerInfo.row + 1);
    
    for (let i = 0; i < Math.min(100, dataRows.length); i++) {
      const row = dataRows[i];
      const type = determineRealContentType(row);
      contentTypes.set(type, (contentTypes.get(type) || 0) + 1);
    }
    
    console.log('üìä –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫):');
    for (const [type, count] of contentTypes) {
      console.log(`   ${type}: ${count}`);
    }
    
    return {
      totalRows: sourceData.length,
      headerRow: headerInfo.row,
      headers: headerInfo.headers,
      contentTypes: Object.fromEntries(contentTypes)
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
    return { error: error.message };
  }
}

// =============================================================================
// –ì–õ–ê–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ü–£–°–ö–ê
// =============================================================================

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ Google Apps Script
 */
function main() {
  return processRealGoogleSheets();
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function runRealTest() {
  return testRealProcessor();
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function runRealAnalysis() {
  return analyzeRealDataStructure();
}