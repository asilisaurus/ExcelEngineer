const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');

function checkLatestResult() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
  
  try {
    // –ò—â–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const uploadsDir = 'uploads';
    const files = fs.readdirSync(uploadsDir);
    
    const resultFiles = files.filter(file => 
      file.includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç') && file.endsWith('.xlsx') && !file.includes('temp_google_sheets')
    );
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    const fileStats = resultFiles.map(file => ({
      name: file,
      path: path.join(uploadsDir, file),
      stats: fs.statSync(path.join(uploadsDir, file))
    })).sort((a, b) => b.stats.mtime - a.stats.mtime);
    
    if (fileStats.length === 0) {
      console.log('‚ùå –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    const latestFile = fileStats[0];
    console.log(`üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${latestFile.name}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä: ${latestFile.stats.size} –±–∞–π—Ç`);
    console.log(`üïí –°–æ–∑–¥–∞–Ω: ${latestFile.stats.mtime.toISOString()}`);
    
    const workbook = XLSX.readFile(latestFile.path);
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
    
    console.log(`\nüìä –õ–∏—Å—Ç: "${sheetName}"`);
    console.log(`üìã –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${data.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ vs –∏—Å—Ö–æ–¥–Ω–∏–∫–∞
    console.log('\nüéØ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:');
    
    if (data[0]) {
      const row1 = data[0];
      console.log('‚úÖ –°—Ç—Ä–æ–∫–∞ 1:', row1.slice(0, 4));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
      if (row1[0] === '–ü—Ä–æ–¥—É–∫—Ç' && row1[1] === '–ê–∫—Ä–∏—Ö–∏–Ω - –§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º') {
        console.log('üéâ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê!');
      } else if (row1[0] === '–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º' || row1.includes('–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º')) {
        console.log('‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê - –í–´–ì–õ–Ø–î–ò–¢ –ö–ê–ö –ò–°–•–û–î–ù–ò–ö!');
      }
    }
    
    if (data[1]) {
      console.log('‚úÖ –°—Ç—Ä–æ–∫–∞ 2:', data[1].slice(0, 4));
    }
    if (data[2]) {
      console.log('‚úÖ –°—Ç—Ä–æ–∫–∞ 3:', data[2].slice(0, 4));
    }
    if (data[3]) {
      console.log('‚úÖ –°—Ç—Ä–æ–∫–∞ 4:', data[3].slice(0, 4));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª—ã
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤:');
    for (let i = 4; i < Math.min(data.length, 20); i++) {
      if (data[i] && data[i][0]) {
        const cellValue = data[i][0].toString();
        if (cellValue.includes('–û—Ç–∑—ã–≤—ã') || cellValue.includes('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') || cellValue.includes('–ê–∫—Ç–∏–≤–Ω—ã–µ')) {
          console.log(`‚úÖ –†–∞–∑–¥–µ–ª ${i}: ${cellValue}`);
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  }
}

checkLatestResult(); 