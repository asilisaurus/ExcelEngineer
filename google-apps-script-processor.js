/**
 * üöÄ –ò–î–ï–ê–õ–¨–ù–´–ô –ì–ò–ë–ö–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ï–ñ–ï–ú–ï–°–Ø–ß–ù–û–ô –†–ê–ë–û–¢–´
 * Google Apps Script –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
 * 
 * –ê–≤—Ç–æ—Ä: AI Assistant + Background Agent
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 2025
 */

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
const CONFIG = {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  PROCESSING: {
    MAX_ROWS: 10000,
    BATCH_SIZE: 100,
    TIMEOUT_SECONDS: 300
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ (–≥–∏–±–∫–∏–µ)
  COLUMNS: {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    PLATFORM: ['–ø–ª–æ—â–∞–¥–∫–∞', 'platform', 'site'],
    TEXT: ['—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '—Ç–µ–∫—Å—Ç', 'message', 'content'],
    DATE: ['–¥–∞—Ç–∞', 'date', 'created'],
    AUTHOR: ['–∞–≤—Ç–æ—Ä', '–Ω–∏–∫', 'author', 'nickname'],
    VIEWS: ['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã', '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ', 'views'],
    ENGAGEMENT: ['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ', 'engagement'],
    POST_TYPE: ['—Ç–∏–ø –ø–æ—Å—Ç–∞', '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', 'post_type'],
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    THEME: ['—Ç–µ–º–∞', 'theme', 'subject'],
    LINK: ['—Å—Å—ã–ª–∫–∞', 'link', 'url']
  },
  
  // –¢–∏–ø—ã –ø–æ—Å—Ç–æ–≤
  POST_TYPES: {
    REVIEW: ['–æ—Å', '–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'review', '–æ—Ç–∑—ã–≤'],
    COMMENT: ['—Ü—Å', '—Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'comment', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']
  },
  
  // –ú–µ—Å—è—Ü—ã
  MONTHS: {
    '—è–Ω–≤–∞—Ä—å': { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤', number: 1 },
    '—è–Ω–≤': { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤', number: 1 },
    '—Ñ–µ–≤—Ä–∞–ª—å': { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤', number: 2 },
    '—Ñ–µ–≤': { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤', number: 2 },
    '–º–∞—Ä—Ç': { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä', number: 3 },
    '–º–∞—Ä': { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä', number: 3 },
    '–∞–ø—Ä–µ–ª—å': { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä', number: 4 },
    '–∞–ø—Ä': { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä', number: 4 },
    '–º–∞–π': { name: '–ú–∞–π', short: '–ú–∞–π', number: 5 },
    '–∏—é–Ω—å': { name: '–ò—é–Ω—å', short: '–ò—é–Ω', number: 6 },
    '–∏—é–Ω': { name: '–ò—é–Ω—å', short: '–ò—é–Ω', number: 6 },
    '–∏—é–ª—å': { name: '–ò—é–ª—å', short: '–ò—é–ª', number: 7 },
    '–∏—é–ª': { name: '–ò—é–ª—å', short: '–ò—é–ª', number: 7 },
    '–∞–≤–≥—É—Å—Ç': { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥', number: 8 },
    '–∞–≤–≥': { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥', number: 8 },
    '—Å–µ–Ω—Ç—è–±—Ä—å': { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω', number: 9 },
    '—Å–µ–Ω': { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω', number: 9 },
    '–æ–∫—Ç—è–±—Ä—å': { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç', number: 10 },
    '–æ–∫—Ç': { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç', number: 10 },
    '–Ω–æ—è–±—Ä—å': { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è', number: 11 },
    '–Ω–æ—è': { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è', number: 11 },
    '–¥–µ–∫–∞–±—Ä—å': { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫', number: 12 },
    '–¥–µ–∫': { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫', number: 12 }
  }
};

// ==================== –û–°–ù–û–í–ù–´–ï –ö–õ–ê–°–°–´ ====================

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
 */
class MonthlyReportProcessor {
  constructor() {
    this.stats = {
      totalRows: 0,
      reviewsCount: 0,
      commentsCount: 0,
      totalViews: 0,
      processingTime: 0,
      qualityScore: 0,
      platformsWithData: 0
    };
    
    this.columnMapping = {};
    this.monthInfo = null;
    this.processedData = {
      reviews: [],
      comments: [],
      discussions: []
    };
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  processReport(sourceSheetId, sourceSheetName = null) {
    const startTime = new Date();
    
    try {
      console.log('üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...');
      
      // 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const sourceData = this.getSourceData(sourceSheetId, sourceSheetName);
      
      // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü
      this.monthInfo = this.detectMonth(sourceData);
      console.log(`üìÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ—Å—è—Ü: ${this.monthInfo.name}`);
      
      // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      this.analyzeStructure(sourceData);
      
      // 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      this.processData(sourceData);
      
      // 5. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
      const reportSheetId = this.createReport();
      
      // 6. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.calculateStatistics(startTime);
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      
      return {
        success: true,
        reportSheetId: reportSheetId,
        statistics: this.stats,
        monthInfo: this.monthInfo
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', error);
      return {
        success: false,
        error: error.toString()
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  getSourceData(sheetId, sheetName) {
    const spreadsheet = SpreadsheetApp.openById(sheetId);
    const sheet = sheetName ? spreadsheet.getSheetByName(sheetName) : spreadsheet.getActiveSheet();
    
    if (!sheet) {
      throw new Error(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    const data = sheet.getDataRange().getValues();
    this.stats.totalRows = data.length;
    
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    return data;
  }

  /**
   * –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
   */
  detectMonth(data) {
    // 1. –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ª–∏—Å—Ç–æ–≤
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    for (const sheetName of spreadsheet.getSheetNames()) {
      const monthInfo = this.findMonthInText(sheetName);
      if (monthInfo) {
        return { ...monthInfo, detectedFrom: 'sheet' };
      }
    }
    
    // 2. –ü–æ–∏—Å–∫ –≤ –¥–∞–Ω–Ω—ã—Ö
    for (let i = 0; i < Math.min(10, data.length); i++) {
      const rowText = data[i].join(' ').toLowerCase();
      const monthInfo = this.findMonthInText(rowText);
      if (monthInfo) {
        return { ...monthInfo, detectedFrom: 'content' };
      }
    }
    
    // 3. –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const currentMonth = new Date().getMonth();
    const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                       '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
    const shortNames = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                       '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫'];
    
    return {
      name: monthNames[currentMonth],
      shortName: shortNames[currentMonth],
      number: currentMonth + 1,
      detectedFrom: 'default'
    };
  }

  /**
   * –ü–æ–∏—Å–∫ –º–µ—Å—è—Ü–∞ –≤ —Ç–µ–∫—Å—Ç–µ
   */
  findMonthInText(text) {
    const lowerText = text.toLowerCase();
    for (const [key, value] of Object.entries(CONFIG.MONTHS)) {
      if (lowerText.includes(key)) {
        return value;
      }
    }
    return null;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
   */
  analyzeStructure(data) {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    let headerRowIndex = -1;
    for (let i = 0; i < Math.min(10, data.length); i++) {
      const rowText = data[i].join(' ').toLowerCase();
      if (this.isHeaderRow(rowText)) {
        headerRowIndex = i;
        break;
      }
    }
    
    if (headerRowIndex === -1) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏');
    }
    
    const headers = data[headerRowIndex];
    this.createColumnMapping(headers);
    
    console.log('üìã –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏:', this.columnMapping);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
   */
  isHeaderRow(rowText) {
    const headerKeywords = ['—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', '–ø–ª–æ—â–∞–¥–∫–∞', '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–¥–∞—Ç–∞', '–∞–≤—Ç–æ—Ä'];
    return headerKeywords.some(keyword => rowText.includes(keyword));
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫
   */
  createColumnMapping(headers) {
    this.columnMapping = {};
    
    headers.forEach((header, index) => {
      if (!header) return;
      
      const cleanHeader = this.cleanText(header);
      
      // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–ª–æ–Ω–æ–∫
      for (const [category, keywords] of Object.entries(CONFIG.COLUMNS)) {
        if (keywords.some(keyword => cleanHeader.includes(keyword))) {
          this.columnMapping[category] = index;
          break;
        }
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    const requiredColumns = ['PLATFORM', 'TEXT', 'DATE'];
    const missingColumns = requiredColumns.filter(col => !(col in this.columnMapping));
    
    if (missingColumns.length > 0) {
      console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: ${missingColumns.join(', ')}`);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  processData(data) {
    console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
    
    let processedRows = 0;
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (this.isEmptyRow(row) || this.isHeaderRow(row.join(' '))) {
        continue;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏
      const recordType = this.determineRecordType(row);
      
      if (recordType === 'review') {
        const reviewData = this.extractReviewData(row, i);
        if (reviewData) {
          this.processedData.reviews.push(reviewData);
          this.stats.reviewsCount++;
        }
      } else if (recordType === 'comment') {
        const commentData = this.extractCommentData(row, i);
        if (commentData) {
          this.processedData.comments.push(commentData);
          this.stats.commentsCount++;
        }
      }
      
      processedRows++;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Å—Ç—Ä–æ–∫
      if (processedRows % 100 === 0) {
        console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedRows} —Å—Ç—Ä–æ–∫...`);
      }
    }
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedRows} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏
   */
  determineRecordType(row) {
    const postTypeCol = this.columnMapping.POST_TYPE;
    if (postTypeCol !== undefined) {
      const postType = this.cleanText(row[postTypeCol]);
      
      if (CONFIG.POST_TYPES.REVIEW.some(type => postType.includes(type))) {
        return 'review';
      }
      if (CONFIG.POST_TYPES.COMMENT.some(type => postType.includes(type))) {
        return 'comment';
      }
    }
    
    // Fallback: –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ–∫—Å—Ç—É
    const textCol = this.columnMapping.TEXT;
    if (textCol !== undefined) {
      const text = this.cleanText(row[textCol]);
      if (text.length > 50) { // –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ—Ç–∑—ã–≤
        return 'review';
      }
    }
    
    return 'comment'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞
   */
  extractReviewData(row, index) {
    try {
      const platform = this.getColumnValue(row, 'PLATFORM');
      const text = this.getColumnValue(row, 'TEXT');
      const date = this.getColumnValue(row, 'DATE');
      const author = this.getColumnValue(row, 'AUTHOR');
      const views = this.getColumnValue(row, 'VIEWS');
      const engagement = this.getColumnValue(row, 'ENGAGEMENT');
      
      if (!text || text.length < 10) {
        return null; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –∑–Ω–∞—á–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
      }
      
      return {
        –ø–ª–æ—â–∞–¥–∫–∞: platform,
        —Ç–µ–º–∞: this.extractTheme(text),
        —Ç–µ–∫—Å—Ç: text,
        –¥–∞—Ç–∞: this.formatDate(date),
        –Ω–∏–∫: author,
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: this.parseViews(views),
        –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: engagement,
        —Ç–∏–ø–ü–æ—Å—Ç–∞: '–û—Ç–∑—ã–≤',
        section: 'reviews',
        originalRow: row,
        rowIndex: index + 1
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ ${index + 1}:`, error);
      return null;
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
   */
  extractCommentData(row, index) {
    try {
      const platform = this.getColumnValue(row, 'PLATFORM');
      const text = this.getColumnValue(row, 'TEXT');
      const date = this.getColumnValue(row, 'DATE');
      const author = this.getColumnValue(row, 'AUTHOR');
      const views = this.getColumnValue(row, 'VIEWS');
      const engagement = this.getColumnValue(row, 'ENGAGEMENT');
      
      if (!text || text.length < 5) {
        return null;
      }
      
      return {
        –ø–ª–æ—â–∞–¥–∫–∞: platform,
        —Ç–µ–º–∞: this.extractTheme(text),
        —Ç–µ–∫—Å—Ç: text,
        –¥–∞—Ç–∞: this.formatDate(date),
        –Ω–∏–∫: author,
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: this.parseViews(views),
        –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: engagement,
        —Ç–∏–ø–ü–æ—Å—Ç–∞: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        section: 'comments',
        originalRow: row,
        rowIndex: index + 1
      };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ ${index + 1}:`, error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
   */
  createReport() {
    console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...');
    
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const reportSheetName = `–û—Ç—á–µ—Ç_${this.monthInfo.name}_${new Date().getFullYear()}`;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingSheet = spreadsheet.getSheetByName(reportSheetName);
    if (existingSheet) {
      spreadsheet.deleteSheet(existingSheet);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
    const reportSheet = spreadsheet.insertSheet(reportSheetName);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    this.createReportHeader(reportSheet);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    this.addReportData(reportSheet);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.addReportStatistics(reportSheet);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    this.formatReport(reportSheet);
    
    console.log(`‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${reportSheetName}`);
    return spreadsheet.getId();
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
   */
  createReportHeader(sheet) {
    const headerData = [
      ['–ï–ñ–ï–ú–ï–°–Ø–ß–ù–´–ô –û–¢–ß–ï–¢ –ü–û –°–û–¶–ò–ê–õ–¨–ù–´–ú –ú–ï–î–ò–ê'],
      [''],
      [`–ú–µ—Å—è—Ü: ${this.monthInfo.name} ${new Date().getFullYear()}`],
      [`–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleDateString('ru-RU')}`],
      [''],
      ['–°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò:'],
      [`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${this.stats.totalRows}`],
      [`–û—Ç–∑—ã–≤–æ–≤: ${this.stats.reviewsCount}`],
      [`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${this.stats.commentsCount}`],
      [`–û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${this.stats.totalViews.toLocaleString()}`],
      ['']
    ];
    
    sheet.getRange(1, 1, headerData.length, 1).setValues(headerData);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    sheet.getRange(1, 1).setFontWeight('bold').setFontSize(16);
    sheet.getRange(3, 1).setFontWeight('bold');
    sheet.getRange(6, 1).setFontWeight('bold');
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç—á–µ—Ç
   */
  addReportData(sheet) {
    let currentRow = 12;
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    const tableHeaders = [
      '–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞', '–ê–≤—Ç–æ—Ä', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø'
    ];
    
    sheet.getRange(currentRow, 1, 1, tableHeaders.length).setValues([tableHeaders]);
    sheet.getRange(currentRow, 1, 1, 1, tableHeaders.length).setFontWeight('bold');
    currentRow++;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã
    if (this.processedData.reviews.length > 0) {
      sheet.getRange(currentRow, 1).setValue('–û–¢–ó–´–í–´:');
      sheet.getRange(currentRow, 1).setFontWeight('bold');
      currentRow++;
      
      for (const review of this.processedData.reviews) {
        const rowData = [
          review.–ø–ª–æ—â–∞–¥–∫–∞,
          review.—Ç–µ–º–∞,
          review.—Ç–µ–∫—Å—Ç,
          review.–¥–∞—Ç–∞,
          review.–Ω–∏–∫,
          review.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
          review.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ,
          review.—Ç–∏–ø–ü–æ—Å—Ç–∞
        ];
        
        sheet.getRange(currentRow, 1, 1, rowData.length).setValues([rowData]);
        currentRow++;
      }
      
      currentRow++; // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if (this.processedData.comments.length > 0) {
      sheet.getRange(currentRow, 1).setValue('–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò:');
      sheet.getRange(currentRow, 1).setFontWeight('bold');
      currentRow++;
      
      for (const comment of this.processedData.comments) {
        const rowData = [
          comment.–ø–ª–æ—â–∞–¥–∫–∞,
          comment.—Ç–µ–º–∞,
          comment.—Ç–µ–∫—Å—Ç,
          comment.–¥–∞—Ç–∞,
          comment.–Ω–∏–∫,
          comment.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã,
          comment.–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ,
          comment.—Ç–∏–ø–ü–æ—Å—Ç–∞
        ];
        
        sheet.getRange(currentRow, 1, 1, rowData.length).setValues([rowData]);
        currentRow++;
      }
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  addReportStatistics(sheet) {
    const lastRow = sheet.getLastRow();
    const statsRow = lastRow + 3;
    
    const statsData = [
      ['–ò–¢–û–ì–û:'],
      [`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${this.stats.totalRows}`],
      [`–û—Ç–∑—ã–≤–æ–≤: ${this.stats.reviewsCount}`],
      [`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${this.stats.commentsCount}`],
      [`–û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${this.stats.totalViews.toLocaleString()}`],
      [`–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${this.stats.processingTime} —Å–µ–∫`],
      [`–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: ${this.stats.qualityScore}%`]
    ];
    
    sheet.getRange(statsRow, 1, statsData.length, 1).setValues(statsData);
    sheet.getRange(statsRow, 1).setFontWeight('bold');
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
   */
  formatReport(sheet) {
    // –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    sheet.autoResizeColumns(1, 8);
    
    // –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    const dataRange = sheet.getDataRange();
    dataRange.setBorder(true, true, true, true, true, true);
    
    // –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫
    const tableRange = sheet.getRange(13, 1, sheet.getLastRow() - 12, 8);
    tableRange.setAlternatingRowColors(true);
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  calculateStatistics(startTime) {
    const endTime = new Date();
    this.stats.processingTime = Math.round((endTime - startTime) / 1000);
    
    // –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
    this.stats.totalViews = this.processedData.reviews.reduce((sum, r) => sum + (r.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã || 0), 0) +
                           this.processedData.comments.reduce((sum, c) => sum + (c.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã || 0), 0);
    
    // –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    const totalProcessed = this.stats.reviewsCount + this.stats.commentsCount;
    this.stats.qualityScore = totalProcessed > 0 ? Math.round((totalProcessed / this.stats.totalRows) * 100) : 0;
    
    // –ü–ª–æ—â–∞–¥–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    const platforms = new Set();
    [...this.processedData.reviews, ...this.processedData.comments].forEach(item => {
      if (item.–ø–ª–æ—â–∞–¥–∫–∞) platforms.add(item.–ø–ª–æ—â–∞–¥–∫–∞);
    });
    this.stats.platformsWithData = platforms.size;
  }

  // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–ª–æ–Ω–∫–∏
   */
  getColumnValue(row, columnType) {
    const columnIndex = this.columnMapping[columnType];
    if (columnIndex === undefined || columnIndex >= row.length) {
      return '';
    }
    return this.cleanText(row[columnIndex]);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
   */
  cleanText(text) {
    if (!text) return '';
    return String(text).trim();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
   */
  isEmptyRow(row) {
    return !row.some(cell => cell && String(cell).trim().length > 0);
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  extractTheme(text) {
    if (!text || text.length < 10) return '–û–±—â–∞—è —Ç–µ–º–∞';
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º—ã
    const words = text.split(' ').slice(0, 5);
    return words.join(' ') + (text.length > 50 ? '...' : '');
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
   */
  formatDate(dateValue) {
    if (!dateValue) return '';
    
    if (dateValue instanceof Date) {
      return dateValue.toLocaleDateString('ru-RU');
    }
    
    const dateStr = String(dateValue);
    if (dateStr.includes('/') || dateStr.includes('.')) {
      return dateStr;
    }
    
    return dateStr;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
   */
  parseViews(viewsValue) {
    if (!viewsValue) return 0;
    
    const viewsStr = String(viewsValue).replace(/[^\d]/g, '');
    const views = parseInt(viewsStr);
    
    return isNaN(views) ? 0 : views;
  }
}

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
function processMonthlyReport() {
  const processor = new MonthlyReportProcessor();
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheetId = spreadsheet.getId();
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...');
  console.log(`üìä –¢–∞–±–ª–∏—Ü–∞: ${spreadsheet.getName()}`);
  
  const result = processor.processReport(sheetId);
  
  if (result.success) {
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', result.statistics);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    SpreadsheetApp.getUi().alert(
      '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
      `–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n- –û—Ç–∑—ã–≤–æ–≤: ${result.statistics.reviewsCount}\n- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${result.statistics.commentsCount}\n- –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${result.statistics.totalViews.toLocaleString()}\n- –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.statistics.processingTime} —Å–µ–∫`,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  } else {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', result.error);
    
    SpreadsheetApp.getUi().alert(
      '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:\n${result.error}`,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
  
  return result;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—á–µ—Ç–æ–≤')
    .addItem('–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç', 'processMonthlyReport')
    .addSeparator()
    .addItem('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'showSettings')
    .addToUi();
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
function showSettings() {
  const html = HtmlService.createHtmlOutput(`
    <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞</h3>
    <p>–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</p>
    <ul>
      <li>–ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–æ–∫: ${CONFIG.PROCESSING.MAX_ROWS}</li>
      <li>–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: ${CONFIG.PROCESSING.BATCH_SIZE}</li>
      <li>–¢–∞–π–º–∞—É—Ç: ${CONFIG.PROCESSING.TIMEOUT_SECONDS} —Å–µ–∫</li>
    </ul>
    <p>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞.</p>
  `)
    .setWidth(400)
    .setHeight(300);
  
  SpreadsheetApp.getUi().showModalDialog(html, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏');
}

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function testProcessor() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...');
  
  const processor = new MonthlyReportProcessor();
  console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  
  // –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–∞
  const testText = '–û—Ç—á–µ—Ç –∑–∞ –∏—é–Ω—å 2025';
  const monthInfo = processor.findMonthInText(testText);
  console.log('üìÖ –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–∞:', monthInfo);
  
  // –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
  const cleanText = processor.cleanText('  –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç  ');
  console.log('üßπ –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:', cleanText);
  
  console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
} 