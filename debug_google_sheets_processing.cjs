const ExcelJS = require('exceljs');
const path = require('path');

async function debugGoogleSheetsProcessing() {
  try {
    console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò GOOGLE SHEETS ===');
    
    const filePath = 'uploads/temp_google_sheets_1751807589999.xlsx';
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é ExcelJS
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(filePath);
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: ${workbook.worksheets.length}`);
    workbook.worksheets.forEach((ws, index) => {
      console.log(`  –õ–∏—Å—Ç ${index + 1}: "${ws.name}" (${ws.actualRowCount} —Å—Ç—Ä–æ–∫)`);
    });
    
    const worksheet = workbook.worksheets[0];
    console.log(`\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç: "${worksheet.name}"`);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤
    const data = [];
    let totalRows = 0;
    let emptyRows = 0;
    let contentRows = 0;
    
    worksheet.eachRow((row, rowNumber) => {
      totalRows++;
      const rowData = [];
      let hasContent = false;
      
      row.eachCell((cell, colNumber) => {
        let value = cell.value;
        
        if (value && typeof value === 'object') {
          if (value instanceof Date) {
            value = value.toISOString().split('T')[0];
          } else if (value.text) {
            value = value.text;
          } else if (value.result) {
            value = value.result;
          } else if (value.toString) {
            value = value.toString();
          }
        }
        
        if (value && value.toString().trim()) {
          hasContent = true;
        }
        
        rowData[colNumber - 1] = value;
      });
      
      if (hasContent) {
        contentRows++;
      } else {
        emptyRows++;
      }
      
      data[rowNumber - 1] = rowData;
      
      // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      if (rowNumber <= 10) {
        console.log(`–°—Ç—Ä–æ–∫–∞ ${rowNumber}: ${hasContent ? '‚úÖ' : '‚ùå'} | ${JSON.stringify(rowData.slice(0, 5))}...`);
      }
    });
    
    console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–¢–ï–ù–ò–Ø:`);
    console.log(`–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${totalRows}`);
    console.log(`–°—Ç—Ä–æ–∫ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: ${contentRows}`);
    console.log(`–ü—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: ${emptyRows}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    let reviewOtzovikCount = 0;
    let reviewPharmacyCount = 0;
    let commentCount = 0;
    let otherCount = 0;
    let headerCount = 0;
    
    console.log(`\nüîç –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –°–¢–†–û–ö:`);
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      if (!row || row.length === 0) continue;
      
      const type = analyzeRowType(row);
      
      switch (type) {
        case 'review_otzovik':
          reviewOtzovikCount++;
          break;
        case 'review_pharmacy':
          reviewPharmacyCount++;
          break;
        case 'comment':
          commentCount++;
          break;
        case 'header':
        case 'section_header':
          headerCount++;
          break;
        default:
          otherCount++;
          break;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–≤—ã—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
      if ((type === 'review_otzovik' && reviewOtzovikCount <= 3) ||
          (type === 'review_pharmacy' && reviewPharmacyCount <= 3) ||
          (type === 'comment' && commentCount <= 3)) {
        console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 1} [${type}]: ${(row[0] || '').toString().substring(0, 50)}...`);
      }
    }
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:`);
    console.log(`–û—Ç–∑—ã–≤—ã-–æ—Ç–∑–æ–≤–∏–∫–∏: ${reviewOtzovikCount}`);
    console.log(`–û—Ç–∑—ã–≤—ã-–∞–ø—Ç–µ–∫–∏: ${reviewPharmacyCount}`);
    console.log(`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${commentCount}`);
    console.log(`–ó–∞–≥–æ–ª–æ–≤–∫–∏: ${headerCount}`);
    console.log(`–ü—Ä–æ—á–∏–µ: ${otherCount}`);
    console.log(`–ò–¢–û–ì–û –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–•: ${reviewOtzovikCount + reviewPharmacyCount + commentCount}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 60 —Å—Ç—Ä–æ–∫ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ
    console.log(`\nüîç –ü–û–î–†–û–ë–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ï–†–í–´–• 60 –°–¢–†–û–ö:`);
    for (let i = 0; i < Math.min(60, data.length); i++) {
      const row = data[i];
      if (!row || row.length === 0) continue;
      
      const colA = (row[0] || '').toString();
      const colB = (row[1] || '').toString();
      const colE = (row[4] || '').toString();
      const type = analyzeRowType(row);
      
      if (colA || colB || colE) {
                 console.log(`${(i + 1).toString().padStart(2)}: [${type.padEnd(15)}] A:"${colA.substring(0, 30)}" | E:"${colE.substring(0, 40)}"`);
       }
     }
     
   } catch (error) {
     console.error('‚ùå –û—à–∏–±–∫–∞:', error);
   }
}

function analyzeRowType(row) {
  if (!row || row.length === 0) return 'empty';
  
  const colA = (row[0] || '').toString().toLowerCase();
  const colB = (row[1] || '').toString().toLowerCase();
  const colD = (row[3] || '').toString().toLowerCase();
  const colE = (row[4] || '').toString().toLowerCase();
  const colN = (row[13] || '').toString().toLowerCase();
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
  if (colA.includes('—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è') || colA.includes('–ø–ª–æ—â–∞–¥–∫–∞') || 
      colB.includes('–ø–ª–æ—â–∞–¥–∫–∞') || colE.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è') ||
      colA.includes('–ø–ª–∞–Ω') || colA.includes('–∏—Ç–æ–≥–æ')) {
    return 'header';
  }
  
  // –°–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  if ((colA === '–æ—Ç–∑—ã–≤—ã' || colA === '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') && !colB && !colD && !colE) {
    return 'section_header';
  }
  
  // –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ—Ç–∑—ã–≤–æ–≤ (–æ—Ç–∑–æ–≤–∏–∫–∏)
  const reviewPlatforms = ['otzovik', 'irecommend', 'otzyvru', 'pravogolosa', 'medum', 'vseotzyvy', 'otzyvy.pro'];
  
  // –ê–ø—Ç–µ—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const pharmacyPlatforms = ['market.yandex', 'dialog.ru', 'goodapteka', 'megapteka', 'uteka', 'nfapteka', 'piluli.ru', 'eapteka.ru', 'pharmspravka.ru', 'gde.ru', 'ozon.ru'];
  
  // –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  const commentPlatforms = ['dzen.ru', 'woman.ru', 'forum.baby.ru', 'vk.com', 't.me', 'ok.ru', 'otvet.mail.ru', 'babyblog.ru', 'mom.life', 'youtube.com', 'pikabu.ru', 'livejournal.com', 'facebook.com'];
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ URL –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
  const urlText = colB + ' ' + colD;
  const isReviewPlatform = reviewPlatforms.some(platform => urlText.toLowerCase().includes(platform));
  const isPharmacyPlatform = pharmacyPlatforms.some(platform => urlText.toLowerCase().includes(platform));
  const isCommentPlatform = commentPlatforms.some(platform => urlText.toLowerCase().includes(platform));
  
  // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ N
  const postType = colN;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ —Ç–∏–ø—É –ø–æ—Å—Ç–∞
  if ((colB || colD || colE) && (isReviewPlatform || (postType === '–æ—Å' && isReviewPlatform))) {
    return 'review_otzovik';
  }
  
  if ((colB || colD || colE) && (isPharmacyPlatform || (postType === '–æ—Å' && isPharmacyPlatform))) {
    return 'review_pharmacy';
  }
  
  if ((colB || colD || colE) && (isCommentPlatform || postType === '—Ü—Å')) {
    return 'comment';
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–æ —Ç–∏–ø –Ω–µ—è—Å–µ–Ω
  if (colB || colD || colE) {
    return 'content';
  }
  
  return 'empty';
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
debugGoogleSheetsProcessing(); 