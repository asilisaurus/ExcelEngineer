const ExcelJS = require('exceljs');

async function debugDateDetection() {
  console.log('üîç –û–¢–õ–ê–î–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –î–ê–¢');
  console.log('='.repeat(50));
  
  try {
    const sourceFile = 'uploads/Fortedetrim ORM report source.xlsx';
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(sourceFile);
    
    const sheet = workbook.getWorksheet(1);
    
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –ò–°–•–û–î–ù–´–• –î–ê–ù–ù–´–• –° –î–ê–¢–ê–ú–ò:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 6-–π —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    for (let i = 6; i <= 15; i++) {
      const row = sheet.getRow(i);
      
      console.log(`\n--- –°–¢–†–û–ö–ê ${i} ---`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–∞—Ç—ã
      const potentialDateColumns = [6, 3, 5]; // G, D, F
      
      for (const colIndex of potentialDateColumns) {
        const cellValue = row.getCell(colIndex + 1).value; // ExcelJS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 1-based –∏–Ω–¥–µ–∫—Å—ã
        const cellText = row.getCell(colIndex + 1).text;
        
        console.log(`–ö–æ–ª–æ–Ω–∫–∞ ${String.fromCharCode(65 + colIndex)}(${colIndex}): value="${cellValue}", text="${cellText}"`);
        
        if (cellValue) {
          const cellStr = cellValue.toString();
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
          const isExcelNumber = typeof cellValue === 'number' && cellValue > 40000 && cellValue < 50000;
          const isDateSlash = cellStr.match(/\d{1,2}[.\/]\d{1,2}[.\/]\d{2,4}/);
          const isDateFormat = cellStr.match(/(Mon|Tue|Wed|Thu|Fri|Sat|Sun).+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec).+\d{4}/);
          
          console.log(`  ‚úì Excel number (${isExcelNumber}): ${cellValue}`);
          console.log(`  ‚úì Date slash (${!!isDateSlash}): ${cellStr}`);
          console.log(`  ‚úì Date format (${!!isDateFormat}): ${cellStr}`);
          
          if (isExcelNumber || isDateSlash || isDateFormat) {
            console.log(`  üéØ –î–ê–¢–ê –ù–ê–ô–î–ï–ù–ê –≤ –∫–æ–ª–æ–Ω–∫–µ ${String.fromCharCode(65 + colIndex)}!`);
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            try {
              const convertedDate = convertExcelDateToString(cellValue);
              console.log(`  üìÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: "${convertedDate}"`);
            } catch (e) {
              console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ${e.message}`);
            }
          }
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∫–∏
      const potentialAuthorColumns = [7, 4, 8]; // H, E, I
      
      for (const colIndex of potentialAuthorColumns) {
        const cellValue = row.getCell(colIndex + 1).value;
        
        if (cellValue && typeof cellValue === 'string') {
          const cellStr = cellValue.toString().trim();
          const isValidAuthor = cellStr.length > 2 && cellStr.length < 50 && 
                               !cellStr.includes('http') && 
                               !cellStr.includes('.com') &&
                               !cellStr.match(/\d{1,2}[.\/]\d{1,2}[.\/]\d{2,4}/) &&
                               !cellStr.match(/^\d+$/);
          
          if (isValidAuthor) {
            console.log(`  üë§ –ù–ò–ö –ù–ê–ô–î–ï–ù –≤ –∫–æ–ª–æ–Ω–∫–µ ${String.fromCharCode(65 + colIndex)}: "${cellStr}"`);
          }
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

// –ö–æ–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
function convertExcelDateToString(dateValue) {
  if (!dateValue) {
    return '';
  }
  
  try {
    let jsDate;
    
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã
    if (typeof dateValue === 'string') {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "3/4/2025" –∏–ª–∏ "03.04.2025"
      if (dateValue.includes('/')) {
        const parts = dateValue.split('/');
        if (parts.length === 3) {
          const month = parseInt(parts[0]);
          const day = parseInt(parts[1]);
          const year = parseInt(parts[2]);
          jsDate = new Date(year, month - 1, day);
        } else {
          jsDate = new Date(dateValue);
        }
      } else if (dateValue.includes('.')) {
        const parts = dateValue.split('.');
        if (parts.length === 3) {
          const day = parseInt(parts[0]);
          const month = parseInt(parts[1]);
          const year = parseInt(parts[2]);
          jsDate = new Date(year, month - 1, day);
        } else {
          jsDate = new Date(dateValue);
        }
      } else if (dateValue.match(/(Mon|Tue|Wed|Thu|Fri|Sat|Sun).+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec).+\d{4}/)) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "Fri Mar 07 2025"
        jsDate = new Date(dateValue);
      } else {
        jsDate = new Date(dateValue);
      }
    }
    // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ Excel
    else if (typeof dateValue === 'number' && dateValue > 1) {
      jsDate = new Date((dateValue - 25569) * 86400 * 1000);
    }
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç Date
    else if (dateValue instanceof Date) {
      jsDate = dateValue;
    }
    else {
      return '';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
    if (isNaN(jsDate.getTime())) {
      return '';
    }
    
    const day = jsDate.getDate().toString().padStart(2, '0');
    const month = (jsDate.getMonth() + 1).toString().padStart(2, '0');
    const year = jsDate.getFullYear().toString();
    
    return `${day}.${month}.${year}`;
  } catch (error) {
    return '';
  }
}

debugDateDetection(); 