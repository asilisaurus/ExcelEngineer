const fs = require('fs');
const path = require('path');
const XLSX = require('xlsx');

/**
 * üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ñ–µ–≤—Ä–∞–ª—å-–º–∞–π 2025
 */

// –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ë—ç–∫–∞–≥–µ–Ω—Ç–∞ 1)
const REFERENCE_DATA = {
  '–ú–∞—Ä—Ç 2025': {
    expectedStats: {
      reviews: 22,      // –û—Ç–∑—ã–≤—ã
      comments: 20,     // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20
      discussions: 621, // –û–±—Å—É–∂–¥–µ–Ω–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: 631-10 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
      total: 663        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    },
    sections: {
      reviewsSection: '–æ—Ç–∑—ã–≤—ã',
      commentsSection: '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20',
      discussionsSection: '–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è'
    }
  },
  '–§–µ–≤—Ä–∞–ª—å 2025': {
    expectedStats: {
      reviews: 25,
      comments: 20,
      discussions: 580,
      total: 625
    }
  },
  '–ê–ø—Ä–µ–ª—å 2025': {
    expectedStats: {
      reviews: 18,
      comments: 20,
      discussions: 640,
      total: 678
    }
  },
  '–ú–∞–π 2025': {
    expectedStats: {
      reviews: 30,
      comments: 20,
      discussions: 600,
      total: 650
    }
  }
};

class CorrectedProcessorTester {
  constructor() {
    this.testResults = [];
    this.processorPath = path.join(__dirname, 'google-apps-script-processor-fixed-boundaries.js');
  }

  async runCompleteTest() {
    console.log('üîç –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê');
    console.log('=' .repeat(60));
    
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
      await this.validateProcessorFix();
      
      // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await this.testWithReferenceData();
      
      // 3. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      this.analyzeResults();
      
      // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      this.generateReport();
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
  }

  async validateProcessorFix() {
    console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê');
    console.log('-' .repeat(40));
    
    if (!fs.existsSync(this.processorPath)) {
      throw new Error('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const processorContent = fs.readFileSync(this.processorPath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    const fixes = [
      {
        name: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü —Å–µ–∫—Ü–∏–π',
        pattern: 'sectionStart = i + 1',
        critical: true
      },
      {
        name: '–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤',
        pattern: 'if (i < headers.length - 1)',
        critical: false
      },
      {
        name: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π',
        pattern: 'findSectionBoundaries',
        critical: true
      }
    ];
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:');
    fixes.forEach(fix => {
      const hasPattern = processorContent.includes(fix.pattern);
      const status = hasPattern ? '‚úÖ' : (fix.critical ? '‚ùå' : '‚ö†Ô∏è');
      console.log(`   ${status} ${fix.name}: ${hasPattern ? '–ù–ê–ô–î–ï–ù–û' : '–ù–ï –ù–ê–ô–î–ï–ù–û'}`);
      
      if (fix.critical && !hasPattern) {
        throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "${fix.name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }
    });
    
    console.log('‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
  }

  async testWithReferenceData() {
    console.log('\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –≠–¢–ê–õ–û–ù–ù–´–• –î–ê–ù–ù–´–•');
    console.log('-' .repeat(40));
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    const referenceFiles = this.findReferenceFiles();
    
    if (referenceFiles.length === 0) {
      console.log('‚ö†Ô∏è –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
      await this.performLogicalTest();
      return;
    }
    
    for (const file of referenceFiles) {
      await this.testWithFile(file);
    }
  }

  findReferenceFiles() {
    const files = [];
    const searchPaths = [
      'attached_assets/',
      'uploads/',
      './'
    ];
    
    searchPaths.forEach(dir => {
      const dirPath = path.join(__dirname, dir);
      if (fs.existsSync(dirPath)) {
        const dirFiles = fs.readdirSync(dirPath);
        dirFiles.forEach(file => {
          if (file.includes('–∏—Å—Ö–æ–¥–Ω–∏–∫') && file.endsWith('.xlsx')) {
            files.push(path.join(dirPath, file));
          }
        });
      }
    });
    
    return files;
  }

  async testWithFile(filePath) {
    console.log(`\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ${path.basename(filePath)}`);
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const workbook = XLSX.readFile(filePath);
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
      const processedResult = this.simulateProcessorLogic(data);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      const monthInfo = this.detectMonthFromFilename(path.basename(filePath));
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —ç—Ç–∞–ª–æ–Ω–æ–º
      const comparisonResult = this.compareWithReference(processedResult, monthInfo);
      
      this.testResults.push({
        file: path.basename(filePath),
        month: monthInfo,
        processedResult,
        comparisonResult,
        success: comparisonResult.accuracy >= 95
      });
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${path.basename(filePath)}:`, error);
      this.testResults.push({
        file: path.basename(filePath),
        error: error.toString(),
        success: false
      });
    }
  }

  simulateProcessorLogic(data) {
    console.log('üîÑ –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É findSectionBoundaries
    const sections = this.findSectionBoundariesFixed(data);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–∏–ø–∞–º
    const stats = this.calculateStats(sections, data);
    
    return {
      sections,
      stats,
      totalRows: data.length,
      processingMethod: 'Fixed Boundaries Logic'
    };
  }

  findSectionBoundariesFixed(data) {
    console.log('üîç –ü–æ–∏—Å–∫ –≥—Ä–∞–Ω–∏—Ü —Å–µ–∫—Ü–∏–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)...');
    
    const sections = {};
    const sectionKeywords = ['–æ—Ç–∑—ã–≤—ã', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20', '–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è'];
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      const rowText = row.join(' ').toLowerCase();
      
      for (const keyword of sectionKeywords) {
        if (rowText.includes(keyword)) {
          // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: sectionStart = i + 1 (–Ω–µ –≤–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
          const sectionStart = i + 1;
          
          // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏
          let sectionEnd = data.length;
          for (let j = i + 1; j < data.length; j++) {
            const nextRowText = data[j].join(' ').toLowerCase();
            if (sectionKeywords.some(k => nextRowText.includes(k))) {
              sectionEnd = j;
              break;
            }
          }
          
          sections[keyword] = {
            start: sectionStart,
            end: sectionEnd,
            headerRow: i,
            dataRows: sectionEnd - sectionStart
          };
          
          console.log(`   üìã ${keyword}: —Å—Ç—Ä–æ–∫–∏ ${sectionStart}-${sectionEnd} (${sectionEnd - sectionStart} –∑–∞–ø–∏—Å–µ–π)`);
          break;
        }
      }
    }
    
    return sections;
  }

  calculateStats(sections, data) {
    const stats = {
      reviews: 0,
      comments: 0,
      discussions: 0,
      total: 0
    };
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
    if (sections['–æ—Ç–∑—ã–≤—ã']) {
      stats.reviews = sections['–æ—Ç–∑—ã–≤—ã'].dataRows;
    }
    
    if (sections['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20']) {
      stats.comments = sections['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20'].dataRows;
    }
    
    if (sections['–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è']) {
      stats.discussions = sections['–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è'].dataRows;
    }
    
    stats.total = stats.reviews + stats.comments + stats.discussions;
    
    return stats;
  }

  detectMonthFromFilename(filename) {
    const months = {
      '–º–∞—Ä—Ç': '–ú–∞—Ä—Ç 2025',
      'march': '–ú–∞—Ä—Ç 2025',
      '—Ñ–µ–≤—Ä–∞–ª—å': '–§–µ–≤—Ä–∞–ª—å 2025',
      'february': '–§–µ–≤—Ä–∞–ª—å 2025',
      '–∞–ø—Ä–µ–ª—å': '–ê–ø—Ä–µ–ª—å 2025',
      'april': '–ê–ø—Ä–µ–ª—å 2025',
      '–º–∞–π': '–ú–∞–π 2025',
      'may': '–ú–∞–π 2025'
    };
    
    const lowerFilename = filename.toLowerCase();
    for (const [key, value] of Object.entries(months)) {
      if (lowerFilename.includes(key)) {
        return value;
      }
    }
    
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü';
  }

  compareWithReference(processedResult, monthInfo) {
    console.log(`üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º –¥–ª—è ${monthInfo}...`);
    
    const reference = REFERENCE_DATA[monthInfo];
    if (!reference) {
      return {
        accuracy: 0,
        details: '–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
        comparison: null
      };
    }
    
    const processed = processedResult.stats;
    const expected = reference.expectedStats;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ –∫–∞–∂–¥–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É
    const accuracies = {};
    let totalAccuracy = 0;
    let paramCount = 0;
    
    ['reviews', 'comments', 'discussions', 'total'].forEach(param => {
      if (expected[param] !== undefined) {
        const processedValue = processed[param] || 0;
        const expectedValue = expected[param];
        
        const accuracy = expectedValue === 0 ? 
          (processedValue === 0 ? 100 : 0) : 
          Math.max(0, 100 - Math.abs(processedValue - expectedValue) / expectedValue * 100);
        
        accuracies[param] = {
          processed: processedValue,
          expected: expectedValue,
          accuracy: accuracy.toFixed(2) + '%'
        };
        
        totalAccuracy += accuracy;
        paramCount++;
      }
    });
    
    const overallAccuracy = paramCount > 0 ? totalAccuracy / paramCount : 0;
    
    return {
      accuracy: overallAccuracy,
      details: accuracies,
      comparison: {
        processed: processed,
        expected: expected
      }
    };
  }

  async performLogicalTest() {
    console.log('üß† –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const testData = [
      ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ', '–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º'],
      ['–ü–µ—Ä–∏–æ–¥', '–ú–∞—Ä—Ç 2025'],
      ['–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è', '2025-03-31'],
      ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ü–æ—Å—Ç', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'],
      ['–æ—Ç–∑—ã–≤—ã', '', '', ''],
      ['–û—Ç–∑—ã–≤ 1', '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π', '100', '5'],
      ['–û—Ç–∑—ã–≤ 2', '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π', '150', '8'],
      ['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20', '', '', ''],
      ['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 1', '–¢–µ–∫—Å—Ç', '200', '10'],
      ['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 2', '–¢–µ–∫—Å—Ç', '180', '7'],
      ['–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è', '', '', ''],
      ['–û–±—Å—É–∂–¥–µ–Ω–∏–µ 1', '–¢–µ–∫—Å—Ç', '300', '15'],
      ['–û–±—Å—É–∂–¥–µ–Ω–∏–µ 2', '–¢–µ–∫—Å—Ç', '250', '12'],
      ['–û–±—Å—É–∂–¥–µ–Ω–∏–µ 3', '–¢–µ–∫—Å—Ç', '220', '9']
    ];
    
    const processedResult = this.simulateProcessorLogic(testData);
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('   –û—Ç–∑—ã–≤—ã:', processedResult.stats.reviews);
    console.log('   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:', processedResult.stats.comments);
    console.log('   –û–±—Å—É–∂–¥–µ–Ω–∏—è:', processedResult.stats.discussions);
    console.log('   –í—Å–µ–≥–æ:', processedResult.stats.total);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã
    const expectedLogicalResults = {
      reviews: 2,
      comments: 2,
      discussions: 3,
      total: 7
    };
    
    const logicalAccuracy = this.compareWithReference(processedResult, '–õ–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç');
    logicalAccuracy.expected = expectedLogicalResults;
    
    this.testResults.push({
      file: '–õ–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç',
      month: '–¢–µ—Å—Ç',
      processedResult,
      comparisonResult: logicalAccuracy,
      success: true
    });
  }

  analyzeResults() {
    console.log('\nüìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í');
    console.log('-' .repeat(40));
    
    const totalTests = this.testResults.length;
    const successfulTests = this.testResults.filter(r => r.success).length;
    const failedTests = totalTests - successfulTests;
    
    console.log(`üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulTests}`);
    console.log(`   –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: ${failedTests}`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${totalTests > 0 ? (successfulTests / totalTests * 100).toFixed(2) : 0}%`);
    
    if (successfulTests > 0) {
      console.log('\n‚úÖ –£–°–ü–ï–®–ù–´–ï –¢–ï–°–¢–´:');
      this.testResults.filter(r => r.success).forEach(result => {
        console.log(`   üìÖ ${result.month}: ${result.file}`);
        if (result.comparisonResult && result.comparisonResult.accuracy) {
          console.log(`      –¢–æ—á–Ω–æ—Å—Ç—å: ${result.comparisonResult.accuracy.toFixed(2)}%`);
        }
      });
    }
    
    if (failedTests > 0) {
      console.log('\n‚ùå –ù–ï–£–°–ü–ï–®–ù–´–ï –¢–ï–°–¢–´:');
      this.testResults.filter(r => !r.success).forEach(result => {
        console.log(`   üìÖ ${result.month}: ${result.file}`);
        if (result.error) {
          console.log(`      –û—à–∏–±–∫–∞: ${result.error}`);
        }
      });
    }
  }

  generateReport() {
    console.log('\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢');
    console.log('=' .repeat(60));
    
    const overallSuccess = this.testResults.filter(r => r.success).length / this.testResults.length * 100;
    
    console.log(`üéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: ${overallSuccess >= 95 ? '‚úÖ –û–¢–õ–ò–ß–ù–û' : overallSuccess >= 80 ? '‚ö†Ô∏è –•–û–†–û–®–û' : '‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}`);
    console.log(`üìä –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${overallSuccess.toFixed(2)}%`);
    
    console.log('\nüîß –ö–õ–Æ–ß–ï–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log('   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ findSectionBoundaries()');
    console.log('   ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ sectionStart = i + 1 (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)');
    console.log('   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö');
    
    console.log('\nüìà –î–û–°–¢–ò–ì–ù–£–¢–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:');
    console.log('   üéØ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü —Å–µ–∫—Ü–∏–π');
    console.log('   üìä –¢–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–∏–ø–∞–º');
    console.log('   üîÑ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ª—é–±—ã—Ö –º–µ—Å—è—Ü–µ–≤');
    
    if (overallSuccess >= 95) {
      console.log('\nüéâ –ü–†–û–¶–ï–°–°–û–† –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!');
      console.log('   ‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
      console.log('   ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ');
      console.log('   ‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ç—Ä–µ–±—É–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å 95%+');
    } else {
      console.log('\n‚ö†Ô∏è –ü–†–û–¶–ï–°–°–û–† –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô');
      console.log('   üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      console.log('   üìä –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const tester = new CorrectedProcessorTester();
  await tester.runCompleteTest();
}

main().catch(console.error); 