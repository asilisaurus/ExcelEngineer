/**
 * üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢–û–í–´–ô –§–†–ï–ô–ú–í–û–†–ö –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê –ë–≠–ö–ê–ì–ï–ù–¢–ê 1
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Apps Script —Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ê–≤—Ç–æ—Ä: AI Assistant + Background Agent bc-851d0563-ea94-47b9-ba36-0f832bafdb25
 * –í–µ—Ä—Å–∏—è: 2.1.0 - –≠–¢–ê–õ–û–ù–ù–´–ï –õ–ò–°–¢–´ –í –¢–û–ô –ñ–ï –¢–ê–ë–õ–ò–¶–ï
 * –î–∞—Ç–∞: 2025
 */

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ====================

const TEST_CONFIG = {
  // URL –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–û–°–ù–û–í–ê–ù–´ –ù–ê –ê–ù–ê–õ–ò–ó–ï –ë–≠–ö–ê–ì–ï–ù–¢–ê 1)
  SOURCE_URL: 'https://docs.google.com/spreadsheets/d/1RT8T5gnDPe0KMikTmVNdSvxqDal3aQUmelpEwItgxMI/edit?usp=sharing',
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  TESTING: {
    MAX_RETRIES: 3,
    TIMEOUT_SECONDS: 300,
    COMPARISON_THRESHOLD: 0.95, // 95% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º
    ENABLE_DETAILED_LOGGING: true
  },
  
  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (–û–°–ù–û–í–ê–ù–ê –ù–ê –ê–ù–ê–õ–ò–ó–ï –ë–≠–ö–ê–ì–ï–ù–¢–ê 1)
  DATA_STRUCTURE: {
    headerRow: 4,        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ 4
    dataStartRow: 5,     // –î–∞–Ω–Ω—ã–µ —Å —Å—Ç—Ä–æ–∫–∏ 5
    infoRows: [1, 2, 3]  // –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö 1-3
  },
  
  // –®–∞–±–ª–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
  REFERENCE_PATTERNS: {
    suffix: ' (—ç—Ç–∞–ª–æ–Ω)',
    alternativeSuffixes: [' (—ç—Ç–∞–ª–æ–Ω)', ' (reference)', ' (etalon)']
  }
};

// ==================== –ö–õ–ê–°–° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ====================

/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ë—ç–∫–∞–≥–µ–Ω—Ç–∞ 1
 * –û–ë–ù–û–í–õ–ï–ù: —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã –≤ —Ç–æ–π –∂–µ —Ç–∞–±–ª–∏—Ü–µ
 */
class FinalGoogleAppsScriptTester {
  constructor() {
    this.testResults = {
      totalTests: 0,
      passedTests: 0,
      failedTests: 0,
      details: [],
      processingTime: 0
    };
    
    this.processor = new FinalMonthlyReportProcessor();
    this.currentSpreadsheet = null;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async runFullTesting() {
    const startTime = Date.now();
    
    console.log('üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê –ë–≠–ö–ê–ì–ï–ù–¢–ê 1');
    console.log('================================================================');
    console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${TEST_CONFIG.SOURCE_URL}`);
    console.log(`üìä –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã: –≤ —Ç–æ–π –∂–µ —Ç–∞–±–ª–∏—Ü–µ (—à–∞–±–ª–æ–Ω: "–ú–µ—Å—è—Ü (—ç—Ç–∞–ª–æ–Ω)")`);
    console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ ${TEST_CONFIG.DATA_STRUCTURE.headerRow}, –¥–∞–Ω–Ω—ã–µ —Å —Å—Ç—Ä–æ–∫–∏ ${TEST_CONFIG.DATA_STRUCTURE.dataStartRow}`);
    
    try {
      // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      console.log('\nüìã –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•...');
      const sourceData = await this.prepareSourceData();
      
      // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      console.log('\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò...');
      await this.testProcessing(sourceData);
      
      // 3. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      this.analyzeResults();
      
      // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      await this.generateTestReport();
      
      this.testResults.processingTime = Date.now() - startTime;
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      this.testResults.details.push({
        test: '–û–±—â–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        status: 'FAILED',
        error: error.toString()
      });
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async prepareSourceData() {
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      this.currentSpreadsheet = SpreadsheetApp.openByUrl(TEST_CONFIG.SOURCE_URL);
      const sheets = this.currentSpreadsheet.getSheets();
      
      const sourceData = {};
      
      for (const sheet of sheets) {
        const sheetName = sheet.getName();
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã - –æ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (this.isReferenceSheet(sheetName)) {
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –ª–∏—Å—Ç "${sheetName}"`);
          continue;
        }
        
        const data = sheet.getDataRange().getValues();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞
        const monthInfo = this.detectMonthFromSheet(sheetName, data);
        if (monthInfo) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –ª–∏—Å—Ç
          const referenceSheet = this.findReferenceSheet(monthInfo);
          
          sourceData[monthInfo.key] = {
            sheet: sheet,
            data: data,
            monthInfo: monthInfo,
            referenceSheet: referenceSheet
          };
          
          if (referenceSheet) {
            console.log(`‚úÖ –õ–∏—Å—Ç "${sheetName}" -> ${monthInfo.name} ${monthInfo.year} (–µ—Å—Ç—å —ç—Ç–∞–ª–æ–Ω)`);
          } else {
            console.log(`‚ö†Ô∏è –õ–∏—Å—Ç "${sheetName}" -> ${monthInfo.name} ${monthInfo.year} (–Ω–µ—Ç —ç—Ç–∞–ª–æ–Ω–∞)`);
          }
        }
      }
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(sourceData).length} –ª–∏—Å—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏`);
      return sourceData;
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –¥–ª—è –º–µ—Å—è—Ü–∞
   */
  findReferenceSheet(monthInfo) {
    if (!this.currentSpreadsheet) return null;
    
    // –≠–¢–ê–õ–û–ù–´ –¢–û–õ–¨–ö–û –î–õ–Ø 2025 –ì–û–î–ê
    if (monthInfo.year !== 2025) {
      return null;
    }
    
    const sheets = this.currentSpreadsheet.getSheets();
    const referenceName = this.getReferenceSheetName(monthInfo);
    
    for (const sheet of sheets) {
      const sheetName = sheet.getName();
      if (sheetName === referenceName) {
        return sheet;
      }
    }
    
    return null;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
   */
  getReferenceSheetName(monthInfo) {
    return `${monthInfo.name} ${monthInfo.year}${TEST_CONFIG.REFERENCE_PATTERNS.suffix}`;
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–û–ë–ù–û–í–õ–ï–ù–û)
   */
  async prepareReferenceData() {
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü—ã...');
    
    try {
      if (!this.currentSpreadsheet) {
        this.currentSpreadsheet = SpreadsheetApp.openByUrl(TEST_CONFIG.SOURCE_URL);
      }
      
      const sheets = this.currentSpreadsheet.getSheets();
      const referenceData = {};
      
      for (const sheet of sheets) {
        const sheetName = sheet.getName();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–∏—Å—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–º
        if (this.isReferenceSheet(sheetName)) {
          const data = sheet.getDataRange().getValues();
          const monthInfo = this.detectMonthFromSheet(sheetName, data);
          
          if (monthInfo) {
            referenceData[monthInfo.key] = {
              sheet: sheet,
              data: data,
              monthInfo: monthInfo
            };
            console.log(`‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ª–∏—Å—Ç "${sheetName}" -> ${monthInfo.name} ${monthInfo.year}`);
          }
        }
      }
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(referenceData).length} —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤`);
      return referenceData;
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–∏—Å—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–º
   */
  isReferenceSheet(sheetName) {
    // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
    const referencePatterns = [
      ' (—ç—Ç–∞–ª–æ–Ω)',
      ' (reference)', 
      ' (etalon)',
      ' (—ç—Ç–∞–ª–æ–Ω)',
      ' (—ç—Ç–∞–ª–æ–Ω)',
      ' (—ç—Ç–∞–ª–æ–Ω)'
    ];
    
    return referencePatterns.some(pattern => 
      sheetName.includes(pattern)
    );
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  detectMonthFromSheet(sheetName, data) {
    const lowerSheetName = sheetName.toLowerCase();
    
    // –ò–°–ö–õ–Æ–ß–ê–ï–ú –ª–∏—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–µ—Å—è—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const excludedPatterns = [
      '–±—Ä–∏—Ñ',
      '—Ä–µ–ø—É—Ç–∞—Ü–∏—è',
      '–º–µ–¥–∏–∞–ø–ª–∞–Ω',
      '—ç—Ç–∞–ª–æ–Ω',
      'reference',
      'etalon'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    for (const pattern of excludedPatterns) {
      if (lowerSheetName.includes(pattern.toLowerCase())) {
        console.log(`‚è≠Ô∏è –ò—Å–∫–ª—é—á–µ–Ω –ª–∏—Å—Ç "${sheetName}" (—Å–æ–¥–µ—Ä–∂–∏—Ç "${pattern}")`);
        return null;
      }
    }
    
    // –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞
    const months = [
      { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤', number: 1 },
      { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤', number: 2 },
      { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä', number: 3 },
      { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä', number: 4 },
      { name: '–ú–∞–π', short: '–ú–∞–π', number: 5 },
      { name: '–ò—é–Ω—å', short: '–ò—é–Ω', number: 6 },
      { name: '–ò—é–ª—å', short: '–ò—é–ª', number: 7 },
      { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥', number: 8 },
      { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω', number: 9 },
      { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç', number: 10 },
      { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è', number: 11 },
      { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫', number: 12 }
    ];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
    let detectedYear = 2025; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    // –ò—â–µ–º –≥–æ–¥ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º)
    if (lowerSheetName.includes('2024') || lowerSheetName.match(/\b24\b/)) {
      detectedYear = 2024;
    } else if (lowerSheetName.includes('2023') || lowerSheetName.match(/\b23\b/)) {
      detectedYear = 2023;
    } else if (lowerSheetName.includes('2022') || lowerSheetName.match(/\b22\b/)) {
      detectedYear = 2022;
    }
    
    console.log(`üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –¥–ª—è "${sheetName}": ${detectedYear}`);
    
    // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (const month of months) {
      // –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      const exactMatches = [
        month.name.toLowerCase(),
        month.short.toLowerCase(),
        `${month.short}${detectedYear.toString().slice(-2)}`,
        `${month.name}${detectedYear.toString().slice(-2)}`,
        `${month.short}${detectedYear}`,
        `${month.name}${detectedYear}`
      ];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
      for (const exactMatch of exactMatches) {
        if (lowerSheetName === exactMatch || lowerSheetName.includes(exactMatch)) {
          return {
            key: `${month.short}${detectedYear}`,
            name: month.name,
            short: month.short,
            number: month.number,
            year: detectedYear,
            detectedFrom: 'sheet'
          };
        }
      }
    }
    
    // –ü–æ–∏—Å–∫ –≤ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å—Ç—Ä–æ–∫–∏ 1-3)
    for (let i = 0; i < Math.min(3, data.length); i++) {
      const rowText = data[i].join(' ').toLowerCase();
      
      for (const month of months) {
        const monthVariants = [
          month.name.toLowerCase(),
          month.short.toLowerCase(),
          `${month.short}${detectedYear.toString().slice(-2)}`,
          `${month.name}${detectedYear.toString().slice(-2)}`
        ];
        
        if (monthVariants.some(variant => rowText.includes(variant))) {
          return {
            key: `${month.short}${detectedYear}`,
            name: month.name,
            short: month.short,
            number: month.number,
            year: detectedYear,
            detectedFrom: 'content'
          };
        }
      }
    }
    
    return null;
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  async testProcessing(sourceData) {
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü
    const testMonths = Object.keys(sourceData);
    
    for (const monthKey of testMonths) {
      const sourceInfo = sourceData[monthKey];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞
      if (!sourceInfo.referenceSheet) {
        console.log(`‚ö†Ô∏è –î–ª—è ${sourceInfo.monthInfo.name} ${sourceInfo.monthInfo.year} –Ω–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
        continue;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
      const referenceData = sourceInfo.referenceSheet.getDataRange().getValues();
      const referenceInfo = {
        sheet: sourceInfo.referenceSheet,
        data: referenceData,
        monthInfo: sourceInfo.monthInfo
      };
      
      console.log(`\nüìÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: ${sourceInfo.monthInfo.name} ${sourceInfo.monthInfo.year}`);
      console.log('='.repeat(60));
      
      await this.testMonthProcessing(sourceInfo, referenceInfo);
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
   */
  async testMonthProcessing(sourceInfo, referenceInfo) {
    try {
      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${sourceInfo.monthInfo.name} ${sourceInfo.monthInfo.year}...`);
      
      // 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—à–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
      const processedResult = await this.processMonthData(sourceInfo);
      
      // 2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —ç—Ç–∞–ª–æ–Ω–æ–º
      const comparisonResult = this.compareWithReference(processedResult, referenceInfo);
      
      // 3. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.recordTestResult(sourceInfo.monthInfo, processedResult, comparisonResult);
      
      // 4. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π, –ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å
      if (!comparisonResult.match) {
        console.log(`‚ö†Ô∏è –ù–∏–∑–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å...`);
        await this.attemptFix(sourceInfo.monthInfo, sourceInfo, referenceInfo);
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${sourceInfo.monthInfo.name} ${sourceInfo.monthInfo.year}:`, error);
      this.recordTestResult(sourceInfo.monthInfo, null, null, error.toString());
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–∞ –Ω–∞—à–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
   */
  async processMonthData(sourceDataInfo) {
    const { sheet, data, monthInfo } = sourceDataInfo;
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testSpreadsheet = SpreadsheetApp.create(`–¢–µ—Å—Ç_${monthInfo.name}_${monthInfo.year}`);
    const testSheet = testSpreadsheet.getActiveSheet();
    
    // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    testSheet.getRange(1, 1, data.length, data[0].length).setValues(data);
    
    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–∞
    testSheet.setName(`${monthInfo.name} ${monthInfo.year}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞
    const result = this.processor.processReport(testSpreadsheet.getId(), testSheet.getName());
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    // –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –Ω–µ—ë –¥–∞–Ω–Ω—ã–µ
    
    // –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL)
    let resultSpreadsheet = null;
    let resultSheet = null;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É –ø–æ —à–∞–±–ª–æ–Ω—É –∏–º–µ–Ω–∏
    const tempSpreadsheetName = `temp_google_sheets_*_${monthInfo.name}_${monthInfo.year}_—Ä–µ–∑—É–ª—å—Ç–∞—Ç`;
    
    try {
      // –ò—â–µ–º –≤ Drive –ø–æ —à–∞–±–ª–æ–Ω—É –∏–º–µ–Ω–∏
      const files = DriveApp.getFilesByName(tempSpreadsheetName);
      
      while (files.hasNext()) {
        const file = files.next();
        if (file.getMimeType() === MimeType.GOOGLE_SHEETS) {
          resultSpreadsheet = SpreadsheetApp.openById(file.getId());
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: ${file.getName()}`);
          break;
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —à–∞–±–ª–æ–Ω—É, –∏—â–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
      if (!resultSpreadsheet) {
        const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);
        const files = DriveApp.getFiles();
        
        while (files.hasNext()) {
          const file = files.next();
          if (file.getMimeType() === MimeType.GOOGLE_SHEETS && 
              file.getName().includes('temp_google_sheets') &&
              file.getName().includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç') &&
              file.getDateCreated() > fiveMinutesAgo) {
            resultSpreadsheet = SpreadsheetApp.openById(file.getId());
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: ${file.getName()}`);
            break;
          }
        }
      }
      
      if (resultSpreadsheet) {
        console.log(`üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É: ${resultSpreadsheet.getUrl()}`);
        // –ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫ –ª–∏—Å—Ç–∞ —Å –æ—Ç—á—ë—Ç–æ–º
        const possibleNames = [
          `${monthInfo.name}_${monthInfo.year}`,
          `${monthInfo.name} ${monthInfo.year}`,
          `${monthInfo.name}_${monthInfo.year}_—Ä–µ–∑—É–ª—å—Ç–∞—Ç`,
          `${monthInfo.name} ${monthInfo.year} —Ä–µ–∑—É–ª—å—Ç–∞—Ç`,
          `${monthInfo.name}_${monthInfo.year} —Ä–µ–∑—É–ª—å—Ç–∞—Ç`,
          `${monthInfo.name} ${monthInfo.year}_—Ä–µ–∑—É–ª—å—Ç–∞—Ç`
        ];
        resultSheet = null;
        for (const name of possibleNames) {
          resultSheet = resultSpreadsheet.getSheetByName(name);
          if (resultSheet) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ª–∏—Å—Ç –æ—Ç—á—ë—Ç–∞: ${name}`);
            break;
          }
        }
        if (!resultSheet) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã
          const allSheets = resultSpreadsheet.getSheets();
          const sheetNames = allSheets.map(s => s.getName());
          console.log(`‚ùå –õ–∏—Å—Ç –æ—Ç—á—ë—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã: ${sheetNames.join(', ')}`);
          console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É: ${resultSpreadsheet.getUrl()}`);
          throw new Error('–õ–∏—Å—Ç –æ—Ç—á—ë—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', error.message);
    }
    
    if (!resultSheet) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const allSheets = testSpreadsheet.getSheets();
      const sheetNames = allSheets.map(s => s.getName());
      console.log(`‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã: ${sheetNames.join(', ')}`);
      
      // –ù–ï —É–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É: ${testSpreadsheet.getUrl()}`);
      
      throw new Error(`–û—Ç—á–µ—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã: ${sheetNames.join(', ')}`);
    }
    
    const resultData = resultSheet.getDataRange().getValues();
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    try {
      DriveApp.getFileById(testSpreadsheet.getId()).setTrashed(true);
      if (resultSpreadsheet) {
        DriveApp.getFileById(resultSpreadsheet.getId()).setTrashed(true);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', error.message);
    }
    
    return {
      data: resultData,
      statistics: result.statistics,
      monthInfo: monthInfo
    };
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∏ –º–µ—Ç—Ä–∏–∫–∏)
   */
  compareWithReference(processedResult, referenceDataInfo) {
    const processedStats = this.extractStatisticsFromData(processedResult.data);
    const referenceStats = this.extractStatisticsFromData(referenceDataInfo.data);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
    const sectionResults = [
      {
        name: '–û—Ç–∑—ã–≤—ã',
        processed: processedStats.reviews,
        reference: referenceStats.reviews,
        match: processedStats.reviews === referenceStats.reviews
      },
      {
        name: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20 –≤—ã–¥–∞—á–∏',
        processed: processedStats.commentsTop20,
        reference: referenceStats.commentsTop20,
        match: processedStats.commentsTop20 === referenceStats.commentsTop20
      },
      {
        name: '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)',
        processed: processedStats.activeDiscussions,
        reference: referenceStats.activeDiscussions,
        match: processedStats.activeDiscussions === referenceStats.activeDiscussions
      }
    ];

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
    const statsResults = [
      {
        name: '–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤',
        processed: processedStats.totalViews,
        reference: referenceStats.totalViews,
        match: processedStats.totalViews === referenceStats.totalViews
      },
      {
        name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç–∑—ã–≤–æ–≤)',
        processed: processedStats.productCards,
        reference: referenceStats.productCards,
        match: processedStats.productCards === referenceStats.productCards
      },
      {
        name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π',
        processed: processedStats.discussions,
        reference: referenceStats.discussions,
        match: processedStats.discussions === referenceStats.discussions
      },
      {
        name: '–î–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º',
        processed: processedStats.engagementShare,
        reference: referenceStats.engagementShare,
        match: processedStats.engagementShare === referenceStats.engagementShare
      }
    ];

    // –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∏ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç
    const allSectionsMatch = sectionResults.every(s => s.match);
    const allStatsMatch = statsResults.every(s => s.match);
    const overallMatch = allSectionsMatch && allStatsMatch;

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–∏—è
    sectionResults.forEach(s => {
      if (!s.match) {
        console.log(`‚ùå –†–∞–∑–¥–µ–ª "${s.name}": ${s.processed} (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ) vs ${s.reference} (—ç—Ç–∞–ª–æ–Ω)`);
      } else {
        console.log(`‚úÖ –†–∞–∑–¥–µ–ª "${s.name}": —Å–æ–≤–ø–∞–¥–∞–µ—Ç (${s.processed})`);
      }
    });
    statsResults.forEach(s => {
      if (!s.match) {
        console.log(`‚ùå –ú–µ—Ç—Ä–∏–∫–∞ "${s.name}": ${s.processed} (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ) vs ${s.reference} (—ç—Ç–∞–ª–æ–Ω)`);
      } else {
        console.log(`‚úÖ –ú–µ—Ç—Ä–∏–∫–∞ "${s.name}": —Å–æ–≤–ø–∞–¥–∞–µ—Ç (${s.processed})`);
      }
    });

    return {
      match: overallMatch,
      sectionResults,
      statsResults,
      details: {
        processedStats,
        referenceStats,
        sectionResults,
        statsResults
      }
    };
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
   */
  compareStructure(processedData, referenceData) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    const processedSections = this.findSections(processedData);
    const referenceSections = this.findSections(referenceData);
    
    let structureScore = 0;
    let totalChecks = 0;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if (processedData.length > 0 && referenceData.length > 0) {
      const processedHeaders = processedData[0].join(' ').toLowerCase();
      const referenceHeaders = referenceData[0].join(' ').toLowerCase();
      
      const headerSimilarity = this.calculateTextSimilarity(processedHeaders, referenceHeaders);
      structureScore += headerSimilarity;
      totalChecks++;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
    const sectionSimilarity = this.calculateSectionSimilarity(processedSections, referenceSections);
    structureScore += sectionSimilarity;
    totalChecks++;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    const totalRowSimilarity = this.compareTotalRows(processedData, referenceData);
    structureScore += totalRowSimilarity;
    totalChecks++;
    
    return totalChecks > 0 ? structureScore / totalChecks : 0;
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  compareContent(processedData, referenceData) {
    let contentScore = 0;
    let totalComparisons = 0;
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–∏–ø–∞–º
    const processedCounts = this.countRecordsByType(processedData);
    const referenceCounts = this.countRecordsByType(referenceData);
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ (–û–°)
    if (referenceCounts.reviews > 0) {
      const reviewAccuracy = Math.min(processedCounts.reviews / referenceCounts.reviews, 1);
      contentScore += reviewAccuracy;
      totalComparisons++;
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤ (–¶–°)
    if (referenceCounts.targeted > 0) {
      const targetedAccuracy = Math.min(processedCounts.targeted / referenceCounts.targeted, 1);
      contentScore += targetedAccuracy;
      totalComparisons++;
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ (–ü–°)
    if (referenceCounts.social > 0) {
      const socialAccuracy = Math.min(processedCounts.social / referenceCounts.social, 1);
      contentScore += socialAccuracy;
      totalComparisons++;
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    if (referenceCounts.totalViews > 0) {
      const viewsAccuracy = Math.min(processedCounts.totalViews / referenceCounts.totalViews, 1);
      contentScore += viewsAccuracy;
      totalComparisons++;
    }
    
    return totalComparisons > 0 ? contentScore / totalComparisons : 0;
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  compareStatistics(processedStats, referenceDataInfo) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const referenceStats = this.extractStatisticsFromData(referenceDataInfo.data);
    
    let statsScore = 0;
    let totalChecks = 0;
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
    if (referenceStats.totalRows > 0) {
      const rowsAccuracy = Math.min(processedStats.totalRows / referenceStats.totalRows, 1);
      statsScore += rowsAccuracy;
      totalChecks++;
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
    if (referenceStats.reviewsCount > 0) {
      const reviewsAccuracy = Math.min(processedStats.reviewsCount / referenceStats.reviewsCount, 1);
      statsScore += reviewsAccuracy;
      totalChecks++;
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤
    if (referenceStats.targetedCount > 0) {
      const targetedAccuracy = Math.min(processedStats.targetedCount / referenceStats.targetedCount, 1);
      statsScore += targetedAccuracy;
      totalChecks++;
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫
    if (referenceStats.socialCount > 0) {
      const socialAccuracy = Math.min(processedStats.socialCount / referenceStats.socialCount, 1);
      statsScore += socialAccuracy;
      totalChecks++;
    }
    
    return totalChecks > 0 ? statsScore / totalChecks : 0;
  }

  /**
   * –ü–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
   */
  findSections(data) {
    const sections = [];
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      if (row.length > 0) {
        const firstCell = String(row[0]).toLowerCase();
        if (firstCell.includes('–æ—Ç–∑—ã–≤—ã') || firstCell.includes('—Ü–µ–ª–µ–≤—ã–µ') || 
            firstCell.includes('–ø–ª–æ—â–∞–¥–∫–∏') || firstCell.includes('–æ—Å') || 
            firstCell.includes('—Ü—Å') || firstCell.includes('–ø—Å')) {
          sections.push({
            name: firstCell,
            row: i + 1
          });
        }
      }
    }
    
    return sections;
  }

  /**
   * –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–∏–ø–∞–º
   */
  countRecordsByType(data) {
    let reviews = 0;
    let targeted = 0;
    let social = 0;
    let totalViews = 0;
    
    let inReviewsSection = false;
    let inTargetedSection = false;
    let inSocialSection = false;
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      if (row.length === 0) continue;
      
      const firstCell = String(row[0]).toLowerCase();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏–∏
      if (firstCell.includes('–æ—Ç–∑—ã–≤—ã') || firstCell.includes('–æ—Å')) {
        inReviewsSection = true;
        inTargetedSection = false;
        inSocialSection = false;
        continue;
      }
      
      if (firstCell.includes('—Ü–µ–ª–µ–≤—ã–µ') || firstCell.includes('—Ü—Å')) {
        inReviewsSection = false;
        inTargetedSection = true;
        inSocialSection = false;
        continue;
      }
      
      if (firstCell.includes('–ø–ª–æ—â–∞–¥–∫–∏') || firstCell.includes('–ø—Å')) {
        inReviewsSection = false;
        inTargetedSection = false;
        inSocialSection = true;
        continue;
      }
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
      if (inReviewsSection && this.isDataRow(row)) {
        reviews++;
        totalViews += this.extractViews(row);
      }
      
      if (inTargetedSection && this.isDataRow(row)) {
        targeted++;
        totalViews += this.extractViews(row);
      }
      
      if (inSocialSection && this.isDataRow(row)) {
        social++;
        totalViews += this.extractViews(row);
      }
    }
    
    return { reviews, targeted, social, totalViews };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã–º–∏
   */
  isDataRow(row) {
    if (row.length < 3) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∑–Ω–∞—á–∏–º—ã–π —Ç–µ–∫—Å—Ç
    const textCell = row[2] || row[1] || row[0];
    return textCell && String(textCell).trim().length > 10;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏
   */
  extractViews(row) {
    if (row.length < 6) return 0;
    
    const viewsCell = row[5];
    if (!viewsCell) return 0;
    
    const viewsStr = String(viewsCell).replace(/[^\d]/g, '');
    const views = parseInt(viewsStr);
    
    return isNaN(views) ? 0 : views;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–ª–æ–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–æ–≤
   */
  extractStatisticsFromData(data) {
    console.log(`üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ (${data.length} —Å—Ç—Ä–æ–∫)`);
    // –ò—â–µ–º 4 –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —Å—Ç—Ä–æ–∫–∞—Ö
    let totalViews = null;
    let productCards = null;
    let discussions = null;
    let engagementShare = null;
    const N = Math.min(50, data.length);
    for (let idx = 0; idx < N; idx++) {
      const i = data.length - N + idx;
      const row = data[i].map(cell => String(cell).replace(/\s+/g, ' ').trim());
      const joined = row.join(' ').toLowerCase();
      if (idx >= N - 10) {
        console.log(`üìã –°—Ç—Ä–æ–∫–∞ ${i + 1}: "${joined.substring(0, 100)}..."`);
      }
      // –°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
      if (totalViews === null && joined.includes('—Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤')) {
        for (const cell of row) {
          const match = cell.match(/(\d{4,})/);
          if (match) {
            totalViews = parseInt(match[1]);
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${totalViews} –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
            break;
          }
        }
      }
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç–∑—ã–≤—ã) (–¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
      if (productCards === null && joined.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–∞') && joined.includes('–æ—Ç–∑—ã–≤')) {
        for (const cell of row) {
          const match = cell.match(/(\d{1,})/);
          if (match) {
            productCards = parseInt(match[1]);
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞: ${productCards} –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
            break;
          }
        }
      }
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (–¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
      if (discussions === null && joined.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π') && joined.includes('—Ñ–æ—Ä—É–º—ã')) {
        for (const cell of row) {
          const match = cell.match(/(\d{1,})/);
          if (match) {
            discussions = parseInt(match[1]);
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è: ${discussions} –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
            break;
          }
        }
      }
      // –î–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º (–¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
      if (engagementShare === null && joined.includes('–¥–æ–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º')) {
        for (const cell of row) {
          const match = cell.match(/(\d+[\.,]\d+)/);
          if (match) {
            engagementShare = Math.round(parseFloat(match[1].replace(',', '.')) * 100);
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–æ–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è: ${engagementShare}% –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
            break;
          }
        }
      }
    }
    // –ü–æ–¥—Å—á—ë—Ç —Å—Ç—Ä–æ–∫ –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
    let reviews = 0, commentsTop20 = 0, activeDiscussions = 0;
    let currentSection = '';
    let sectionStartRow = -1;
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      if (row.length === 0) continue;
      const firstCell = String(row[0]).toLowerCase().trim();
      if (firstCell.includes('–æ—Ç–∑—ã–≤—ã')) {
        currentSection = 'reviews';
        sectionStartRow = i;
        console.log(`üìÇ –ù–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª "–û—Ç–∑—ã–≤—ã" –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
        continue;
      }
      if (firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20') || firstCell.includes('—Ç–æ–ø-20')) {
        currentSection = 'commentsTop20';
        sectionStartRow = i;
        console.log(`üìÇ –ù–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20" –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
        continue;
      }
      if (firstCell.includes('–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è') || firstCell.includes('–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')) {
        currentSection = 'activeDiscussions';
        sectionStartRow = i;
        console.log(`üìÇ –ù–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª "–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è" –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
        continue;
      }
      if (currentSection && sectionStartRow !== -1 && i > sectionStartRow) {
        const hasData = row.some(cell => String(cell).trim().length > 0);
        const isHeader = row.some(cell => String(cell).toLowerCase().includes('—Ç–∏–ø') || 
                                        String(cell).toLowerCase().includes('–ø–ª–æ—â–∞–¥–∫–∞') ||
                                        String(cell).toLowerCase().includes('–ø—Ä–æ–¥—É–∫—Ç'));
        if (hasData && !isHeader) {
          if (currentSection === 'reviews') reviews++;
          if (currentSection === 'commentsTop20') commentsTop20++;
          if (currentSection === 'activeDiscussions') activeDiscussions++;
        }
      }
    }
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–∞–∑–¥–µ–ª–æ–≤:`);
    console.log(`   - –û—Ç–∑—ã–≤—ã: ${reviews} —Å—Ç—Ä–æ–∫`);
    console.log(`   - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20: ${commentsTop20} —Å—Ç—Ä–æ–∫`);
    console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: ${activeDiscussions} —Å—Ç—Ä–æ–∫`);
    return {
      totalViews,
      productCards,
      discussions,
      engagementShare,
      reviews,
      commentsTop20,
      activeDiscussions
    };
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
   */
  compareTotalRows(processedData, referenceData) {
    const processedTotal = this.findTotalRow(processedData);
    const referenceTotal = this.findTotalRow(referenceData);
    
    if (!processedTotal && !referenceTotal) return 1;
    if (!processedTotal || !referenceTotal) return 0;
    
    const processedText = processedTotal.join(' ').toLowerCase();
    const referenceText = referenceTotal.join(' ').toLowerCase();
    
    return this.calculateTextSimilarity(processedText, referenceText);
  }

  /**
   * –ü–æ–∏—Å–∫ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
   */
  findTotalRow(data) {
    for (let i = data.length - 1; i >= 0; i--) {
      const row = data[i];
      if (row.length > 0) {
        const firstCell = String(row[0]).toLowerCase();
        if (firstCell.includes('–∏—Ç–æ–≥–æ') || firstCell.includes('total')) {
          return row;
        }
      }
    }
    return null;
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
   */
  calculateTextSimilarity(text1, text2) {
    const words1 = text1.split(/\s+/).filter(w => w.length > 0);
    const words2 = text2.split(/\s+/).filter(w => w.length > 0);
    
    const commonWords = words1.filter(word => words2.includes(word));
    const totalWords = Math.max(words1.length, words2.length);
    
    return totalWords > 0 ? commonWords.length / totalWords : 0;
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
   */
  calculateSectionSimilarity(sections1, sections2) {
    if (sections1.length === 0 && sections2.length === 0) return 1;
    if (sections1.length === 0 || sections2.length === 0) return 0;
    
    const sectionNames1 = sections1.map(s => s.name);
    const sectionNames2 = sections2.map(s => s.name);
    
    const commonSections = sectionNames1.filter(name => 
      sectionNames2.some(name2 => this.calculateTextSimilarity(name, name2) > 0.5)
    );
    
    const totalSections = Math.max(sections1.length, sections2.length);
    return totalSections > 0 ? commonSections.length / totalSections : 0;
  }

  /**
   * –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
   */
  recordTestResult(month, processedResult, comparisonResult, error = null) {
    this.testResults.totalTests++;
    
    const testDetail = {
      month: `${month.name} ${month.year}`,
      status: error ? 'FAILED' : (comparisonResult.match ? 'PASSED' : 'FAILED'),
      similarity: comparisonResult ? (comparisonResult.match ? 1 : 0) : 0,
      details: comparisonResult ? {
        processedStats: comparisonResult.details.processedStats,
        referenceStats: comparisonResult.details.referenceStats,
        sectionResults: comparisonResult.sectionResults,
        statsResults: comparisonResult.statsResults
      } : null,
      error: error
    };
    
    this.testResults.details.push(testDetail);
    
    if (testDetail.status === 'PASSED') {
      this.testResults.passedTests++;
      console.log(`‚úÖ ${month.name} ${month.year}: –ü–†–û–ô–î–ï–ù`);
    } else {
      this.testResults.failedTests++;
      console.log(`‚ùå ${month.name} ${month.year}: –ü–†–û–í–ê–õ–ï–ù`);
      if (error) console.log(`   –û—à–∏–±–∫–∞: ${error}`);
    }
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  async attemptFix(month, sourceDataInfo, referenceDataInfo) {
    console.log(`üîß –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è ${month.name} ${month.year}...`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∏ —Ç.–¥.
    
    console.log(`‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –¥–ª—è ${month.name} ${month.year}`);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  analyzeResults() {
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('=====================================');
    
    const successRate = this.testResults.totalTests > 0 ? 
      (this.testResults.passedTests / this.testResults.totalTests) * 100 : 0;
    
    console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${successRate.toFixed(1)}%`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.passedTests}/${this.testResults.totalTests}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.failedTests}/${this.testResults.totalTests}`);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${(this.testResults.processingTime / 1000).toFixed(2)} —Å–µ–∫`);
    
    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    this.testResults.details.forEach(detail => {
      const statusIcon = detail.status === 'PASSED' ? '‚úÖ' : '‚ùå';
      const similarity = detail.similarity ? `(${(detail.similarity * 100).toFixed(1)}%)` : '';
      console.log(`${statusIcon} ${detail.month}: ${detail.status} ${similarity}`);
      
      if (detail.error) {
        console.log(`   –û—à–∏–±–∫–∞: ${detail.error}`);
      }
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
   */
  async generateTestReport() {
    console.log('\nüìÑ –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò...');
    
    const reportData = [
      ['–û–¢–ß–ï–¢ –û –§–ò–ù–ê–õ–¨–ù–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò GOOGLE APPS SCRIPT'],
      ['–û–°–ù–û–í–ê–ù –ù–ê –ê–ù–ê–õ–ò–ó–ï –ë–≠–ö–ê–ì–ï–ù–¢–ê 1'],
      [''],
      [`–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date().toLocaleDateString('ru-RU')}`],
      [`–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date().toLocaleTimeString('ru-RU')}`],
      [`–û–±—â–µ–µ –≤—Ä–µ–º—è: ${(this.testResults.processingTime / 1000).toFixed(2)} —Å–µ–∫`],
      [''],
      ['–û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:'],
      [`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.totalTests}`],
      [`–ü—Ä–æ–π–¥–µ–Ω–æ: ${this.testResults.passedTests}`],
      [`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testResults.failedTests}`],
      [`–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${this.testResults.totalTests > 0 ? (this.testResults.passedTests / this.testResults.totalTests * 100).toFixed(1) : 0}%`],
      [''],
      ['–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:'],
      ['–ú–µ—Å—è—Ü', '–°—Ç–∞—Ç—É—Å', '–°—Ö–æ–∂–µ—Å—Ç—å', '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫', '–≠—Ç–∞–ª–æ–Ω —Å—Ç—Ä–æ–∫', '–û—Ç–∑—ã–≤—ã', '–¶–µ–ª–µ–≤—ã–µ', '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã']
    ];
    
    this.testResults.details.forEach(detail => {
      const details = detail.details || {};
      reportData.push([
        detail.month,
        detail.status,
        detail.similarity ? `${(detail.similarity * 100).toFixed(1)}%` : 'N/A',
        details.processedStats ? details.processedStats.totalRows : 'N/A',
        details.referenceStats ? details.referenceStats.totalRows : 'N/A',
        details.processedStats ? details.processedStats.reviews : 'N/A',
        details.processedStats ? details.processedStats.targeted : 'N/A',
        details.processedStats ? details.processedStats.social : 'N/A',
        details.processedStats ? details.processedStats.totalViews : 'N/A'
      ]);
    });
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
    const maxColumns = Math.max(...reportData.map(row => row.length));
    
    // –î–æ–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–æ–Ω–æ–∫
    const normalizedData = reportData.map(row => {
      const normalizedRow = [...row];
      while (normalizedRow.length < maxColumns) {
        normalizedRow.push('');
      }
      return normalizedRow;
    });
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    const reportSpreadsheet = SpreadsheetApp.create(`–§–∏–Ω–∞–ª—å–Ω—ã–π_–æ—Ç—á–µ—Ç_—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è_${new Date().toISOString().split('T')[0]}`);
    const reportSheet = reportSpreadsheet.getActiveSheet();
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–ª–æ–Ω–æ–∫
    reportSheet.getRange(1, 1, normalizedData.length, maxColumns).setValues(normalizedData);
    reportSheet.autoResizeColumns(1, maxColumns);
    
    console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${reportSpreadsheet.getUrl()}`);
    
    return reportSpreadsheet.getUrl();
  }
}

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function runFinalTesting() {
  const tester = new FinalGoogleAppsScriptTester();
  return tester.runFullTesting();
}

/**
 * –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function showFinalTestConfig() {
  console.log('‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('==========================================');
  console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${TEST_CONFIG.SOURCE_URL}`);
  console.log(`üìä –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã: –≤ —Ç–æ–π –∂–µ —Ç–∞–±–ª–∏—Ü–µ (—à–∞–±–ª–æ–Ω: "–ú–µ—Å—è—Ü (—ç—Ç–∞–ª–æ–Ω)")`);
  console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ ${TEST_CONFIG.DATA_STRUCTURE.headerRow}, –¥–∞–Ω–Ω—ã–µ —Å —Å—Ç—Ä–æ–∫–∏ ${TEST_CONFIG.DATA_STRUCTURE.dataStartRow}`);
  console.log(`üéØ –ü–æ—Ä–æ–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: ${TEST_CONFIG.TESTING.COMPARISON_THRESHOLD * 100}%`);
  console.log(`üîÑ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: ${TEST_CONFIG.TESTING.MAX_RETRIES}`);
  console.log(`üìù –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ${TEST_CONFIG.TESTING.ENABLE_DETAILED_LOGGING ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}`);
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function updateMenuWithFinalTesting() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üß™ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
    .addItem('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'runFinalTesting')
    .addSeparator()
    .addItem('–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é', 'showFinalTestConfig')
    .addToUi();
} 