/**
 * üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢–û–í–´–ô –§–†–ï–ô–ú–í–û–†–ö –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê –ë–≠–ö–ê–ì–ï–ù–¢–ê 1
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Apps Script —Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ê–≤—Ç–æ—Ä: AI Assistant + Background Agent bc-851d0563-ea94-47b9-ba36-0f832bafdb25
 * –í–µ—Ä—Å–∏—è: 2.0.0 - –û–°–ù–û–í–ê–ù–ê –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•
 * –î–∞—Ç–∞: 2025
 */

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ====================

const TEST_CONFIG = {
  // URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–û–°–ù–û–í–ê–ù–´ –ù–ê –ê–ù–ê–õ–ò–ó–ï –ë–≠–ö–ê–ì–ï–ù–¢–ê 1)
  SOURCE_URL: 'https://docs.google.com/spreadsheets/d/1RT8T5gnDPe0KMikTmVNdSvxqDal3aQUmelpEwItgxMI/edit?usp=sharing',
  
  // URL —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  REFERENCE_URL: 'https://docs.google.com/spreadsheets/d/1pxUF5HnII7hVnaw077mE0FHqGp-TN1Rk/edit?',
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  TESTING: {
    MAX_RETRIES: 3,
    TIMEOUT_SECONDS: 300,
    COMPARISON_THRESHOLD: 0.95, // 95% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º
    ENABLE_DETAILED_LOGGING: true
  },
  
  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (–û–°–ù–û–í–ê–ù–ê –ù–ê –ê–ù–ê–õ–ò–ó–ï –ë–≠–ö–ê–ì–ï–ù–¢–ê 1)
  DATA_STRUCTURE: {
    headerRow: 4,        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ 4
    dataStartRow: 5,     // –î–∞–Ω–Ω—ã–µ —Å —Å—Ç—Ä–æ–∫–∏ 5
    infoRows: [1, 2, 3]  // –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö 1-3
  }
};

// ==================== –ö–õ–ê–°–° –ü–†–û–¶–ï–°–°–û–†–ê ====================

/**
 * –ö–ª–∞—Å—Å-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
 */
class FinalMonthlyReportProcessor {
  processReport(spreadsheetId) {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
      const originalSheetId = '1RT8T5gnDPe0KMikTmVNdSvxqDal3aQUmelpEwItgxMI';
      
      // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const result = processGoogleSheets();
      
      return {
        success: result.success,
        statistics: result.statistics || {
          totalRows: result.processedRows || 0,
          reviewsCount: result.reviewsCount || 0,
          targetedCount: result.targetedCount || 0,
          socialCount: result.socialCount || 0,
          totalViews: result.totalViews || 0,
          totalEngagement: result.totalEngagement || 0
        },
        resultFileId: result.resultFileId
      };
      
    } catch (error) {
      return {
        success: false,
        error: error.toString(),
        statistics: {
          totalRows: 0,
          reviewsCount: 0,
          targetedCount: 0,
          socialCount: 0,
          totalViews: 0,
          totalEngagement: 0
        }
      };
    }
  }
}

// ==================== –ö–õ–ê–°–° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ====================

/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ë—ç–∫–∞–≥–µ–Ω—Ç–∞ 1
 */
class FinalGoogleAppsScriptTester {
  constructor() {
    this.testResults = {
      totalTests: 0,
      passedTests: 0,
      failedTests: 0,
      details: [],
      processingTime: 0
    };
    
    this.processor = new FinalMonthlyReportProcessor();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async runFullTesting() {
    const startTime = Date.now();
    
    console.log('üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ù–ê –û–°–ù–û–í–ï –ê–ù–ê–õ–ò–ó–ê –ë–≠–ö–ê–ì–ï–ù–¢–ê 1');
    console.log('================================================================');
    console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${TEST_CONFIG.SOURCE_URL}`);
    console.log(`üìä –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${TEST_CONFIG.REFERENCE_URL}`);
    console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ ${TEST_CONFIG.DATA_STRUCTURE.headerRow}, –¥–∞–Ω–Ω—ã–µ —Å —Å—Ç—Ä–æ–∫–∏ ${TEST_CONFIG.DATA_STRUCTURE.dataStartRow}`);
    
    try {
      // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      console.log('\nüìã –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•...');
      const sourceData = await this.prepareSourceData();
      const referenceData = await this.prepareReferenceData();
      
      // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      console.log('\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò...');
      await this.testProcessing(sourceData, referenceData);
      
      // 3. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      this.analyzeResults();
      
      // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      await this.generateTestReport();
      
      this.testResults.processingTime = Date.now() - startTime;
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      this.testResults.details.push({
        test: '–û–±—â–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        status: 'FAILED',
        error: error.toString()
      });
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async prepareSourceData() {
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      const spreadsheet = SpreadsheetApp.openByUrl(TEST_CONFIG.SOURCE_URL);
      const sheets = spreadsheet.getSheets();
      
      const sourceData = {};
      
      for (const sheet of sheets) {
        const sheetName = sheet.getName();
        const data = sheet.getDataRange().getValues();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞
        const monthInfo = this.detectMonthFromSheet(sheetName, data);
        if (monthInfo) {
          sourceData[monthInfo.key] = {
            sheet: sheet,
            data: data,
            monthInfo: monthInfo
          };
          console.log(`‚úÖ –õ–∏—Å—Ç "${sheetName}" -> ${monthInfo.name} ${monthInfo.year}`);
        }
      }
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(sourceData).length} –ª–∏—Å—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏`);
      return sourceData;
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async prepareReferenceData() {
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      const spreadsheet = SpreadsheetApp.openByUrl(TEST_CONFIG.REFERENCE_URL);
      const sheets = spreadsheet.getSheets();
      
      const referenceData = {};
      
      for (const sheet of sheets) {
        const sheetName = sheet.getName();
        const data = sheet.getDataRange().getValues();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞
        const monthInfo = this.detectMonthFromSheet(sheetName, data);
        if (monthInfo) {
          referenceData[monthInfo.key] = {
            sheet: sheet,
            data: data,
            monthInfo: monthInfo
          };
          console.log(`‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –ª–∏—Å—Ç "${sheetName}" -> ${monthInfo.name} ${monthInfo.year}`);
        }
      }
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(referenceData).length} —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤`);
      return referenceData;
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  detectMonthFromSheet(sheetName, data) {
    const lowerSheetName = sheetName.toLowerCase();
    
    // –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞
    const months = [
      { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤', number: 1 },
      { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤', number: 2 },
      { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä', number: 3 },
      { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä', number: 4 },
      { name: '–ú–∞–π', short: '–ú–∞–π', number: 5 },
      { name: '–ò—é–Ω—å', short: '–ò—é–Ω', number: 6 },
      { name: '–ò—é–ª—å', short: '–ò—é–ª', number: 7 },
      { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥', number: 8 },
      { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω', number: 9 },
      { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç', number: 10 },
      { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è', number: 11 },
      { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫', number: 12 }
    ];
    
    for (const month of months) {
      const monthVariants = [
        month.name.toLowerCase(),
        month.short.toLowerCase(),
        `${month.short}25`,
        `${month.name}25`,
        `${month.short}2025`,
        `${month.name}2025`
      ];
      
      if (monthVariants.some(variant => lowerSheetName.includes(variant))) {
        return {
          key: `${month.short}${month.year || 2025}`,
          name: month.name,
          short: month.short,
          number: month.number,
          year: 2025,
          detectedFrom: 'sheet'
        };
      }
    }
    
    // –ü–æ–∏—Å–∫ –≤ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å—Ç—Ä–æ–∫–∏ 1-3)
    for (let i = 0; i < Math.min(3, data.length); i++) {
      const rowText = data[i].join(' ').toLowerCase();
      
      for (const month of months) {
        const monthVariants = [
          month.name.toLowerCase(),
          month.short.toLowerCase(),
          `${month.short}25`,
          `${month.name}25`
        ];
        
        if (monthVariants.some(variant => rowText.includes(variant))) {
          return {
            key: `${month.short}${month.year || 2025}`,
            name: month.name,
            short: month.short,
            number: month.number,
            year: 2025,
            detectedFrom: 'content'
          };
        }
      }
    }
    
    return null;
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  async testProcessing(sourceData, referenceData) {
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü
    const testMonths = Object.keys(sourceData);
    
    for (const monthKey of testMonths) {
      const sourceInfo = sourceData[monthKey];
      const referenceInfo = referenceData[monthKey];
      
      if (!referenceInfo) {
        console.log(`‚ö†Ô∏è –î–ª—è ${sourceInfo.monthInfo.name} ${sourceInfo.monthInfo.year} –Ω–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
        continue;
      }
      
      console.log(`\nüìÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: ${sourceInfo.monthInfo.name} ${sourceInfo.monthInfo.year}`);
      console.log('='.repeat(60));
      
      await this.testMonthProcessing(sourceInfo, referenceInfo);
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
   */
  async testMonthProcessing(sourceInfo, referenceInfo) {
    try {
      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${sourceInfo.monthInfo.name} ${sourceInfo.monthInfo.year}...`);
      
      // 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—à–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
      const processedResult = await this.processMonthData(sourceInfo);
      
      // 2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —ç—Ç–∞–ª–æ–Ω–æ–º
      const comparisonResult = this.compareWithReference(processedResult, referenceInfo);
      
      // 3. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.recordTestResult(sourceInfo.monthInfo, processedResult, comparisonResult);
      
      // 4. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π, –ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å
      if (comparisonResult.similarity < TEST_CONFIG.TESTING.COMPARISON_THRESHOLD) {
        console.log(`‚ö†Ô∏è –ù–∏–∑–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (${(comparisonResult.similarity * 100).toFixed(1)}%), –ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å...`);
        await this.attemptFix(sourceInfo.monthInfo, sourceInfo, referenceInfo);
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${sourceInfo.monthInfo.name} ${sourceInfo.monthInfo.year}:`, error);
      this.recordTestResult(sourceInfo.monthInfo, null, null, error.toString());
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–∞ –Ω–∞—à–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
   */
  async processMonthData(sourceDataInfo) {
    const { sheet, data, monthInfo } = sourceDataInfo;
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testSpreadsheet = SpreadsheetApp.create(`–¢–µ—Å—Ç_${monthInfo.name}_${monthInfo.year}`);
    const testSheet = testSpreadsheet.getActiveSheet();
    
    // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    testSheet.getRange(1, 1, data.length, data[0].length).setValues(data);
    
    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–∞
    testSheet.setName(`${monthInfo.name} ${monthInfo.year}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    const result = this.processor.processReport(testSpreadsheet.getId());
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const resultSheet = testSpreadsheet.getSheetByName(`–û—Ç—á–µ—Ç_${monthInfo.name}_${new Date().getFullYear()}`);
    if (!resultSheet) {
      throw new Error('–û—Ç—á–µ—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
    }
    
    const resultData = resultSheet.getDataRange().getValues();
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    DriveApp.getFileById(testSpreadsheet.getId()).setTrashed(true);
    
    return {
      data: resultData,
      statistics: result.statistics,
      monthInfo: monthInfo
    };
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  compareWithReference(processedResult, referenceDataInfo) {
    const { data: processedData } = processedResult;
    const { data: referenceData } = referenceDataInfo;
    
    console.log(`üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedData.length} —Å—Ç—Ä–æ–∫, —ç—Ç–∞–ª–æ–Ω ${referenceData.length} —Å—Ç—Ä–æ–∫`);
    
    // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const structureComparison = this.compareStructure(processedData, referenceData);
    
    // –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    const contentComparison = this.compareContent(processedData, referenceData);
    
    // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const statsComparison = this.compareStatistics(processedResult.statistics, referenceDataInfo);
    
    const overallSimilarity = (structureComparison + contentComparison + statsComparison) / 3;
    
    return {
      similarity: overallSimilarity,
      structure: structureComparison,
      content: contentComparison,
      statistics: statsComparison,
      details: {
        processedRows: processedData.length,
        referenceRows: referenceData.length,
        structureMatch: structureComparison,
        contentMatch: contentComparison,
        statsMatch: statsComparison
      }
    };
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
   */
  compareStructure(processedData, referenceData) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    const processedSections = this.findSections(processedData);
    const referenceSections = this.findSections(referenceData);
    
    let structureScore = 0;
    let totalChecks = 0;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if (processedData.length > 0 && referenceData.length > 0) {
      const processedHeaders = processedData[0].join(' ').toLowerCase();
      const referenceHeaders = referenceData[0].join(' ').toLowerCase();
      
      const headerSimilarity = this.calculateTextSimilarity(processedHeaders, referenceHeaders);
      structureScore += headerSimilarity;
      totalChecks++;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
    const sectionSimilarity = this.calculateSectionSimilarity(processedSections, referenceSections);
    structureScore += sectionSimilarity;
    totalChecks++;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    const totalRowSimilarity = this.compareTotalRows(processedData, referenceData);
    structureScore += totalRowSimilarity;
    totalChecks++;
    
    return totalChecks > 0 ? structureScore / totalChecks : 0;
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  compareContent(processedData, referenceData) {
    let contentScore = 0;
    let totalComparisons = 0;
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–∏–ø–∞–º
    const processedCounts = this.countRecordsByType(processedData);
    const referenceCounts = this.countRecordsByType(referenceData);
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ (–û–°)
    if (referenceCounts.reviews > 0) {
      const reviewAccuracy = Math.min(processedCounts.reviews / referenceCounts.reviews, 1);
      contentScore += reviewAccuracy;
      totalComparisons++;
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤ (–¶–°)
    if (referenceCounts.targeted > 0) {
      const targetedAccuracy = Math.min(processedCounts.targeted / referenceCounts.targeted, 1);
      contentScore += targetedAccuracy;
      totalComparisons++;
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ (–ü–°)
    if (referenceCounts.social > 0) {
      const socialAccuracy = Math.min(processedCounts.social / referenceCounts.social, 1);
      contentScore += socialAccuracy;
      totalComparisons++;
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    if (referenceCounts.totalViews > 0) {
      const viewsAccuracy = Math.min(processedCounts.totalViews / referenceCounts.totalViews, 1);
      contentScore += viewsAccuracy;
      totalComparisons++;
    }
    
    return totalComparisons > 0 ? contentScore / totalComparisons : 0;
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  compareStatistics(processedStats, referenceDataInfo) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const referenceStats = this.extractStatisticsFromData(referenceDataInfo.data);
    
    let statsScore = 0;
    let totalChecks = 0;
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
    if (referenceStats.totalRows > 0) {
      const rowsAccuracy = Math.min(processedStats.totalRows / referenceStats.totalRows, 1);
      statsScore += rowsAccuracy;
      totalChecks++;
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
    if (referenceStats.reviewsCount > 0) {
      const reviewsAccuracy = Math.min(processedStats.reviewsCount / referenceStats.reviewsCount, 1);
      statsScore += reviewsAccuracy;
      totalChecks++;
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤
    if (referenceStats.targetedCount > 0) {
      const targetedAccuracy = Math.min(processedStats.targetedCount / referenceStats.targetedCount, 1);
      statsScore += targetedAccuracy;
      totalChecks++;
    }
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫
    if (referenceStats.socialCount > 0) {
      const socialAccuracy = Math.min(processedStats.socialCount / referenceStats.socialCount, 1);
      statsScore += socialAccuracy;
      totalChecks++;
    }
    
    return totalChecks > 0 ? statsScore / totalChecks : 0;
  }

  /**
   * –ü–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
   */
  findSections(data) {
    const sections = [];
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      if (row.length > 0) {
        const firstCell = String(row[0]).toLowerCase();
        if (firstCell.includes('–æ—Ç–∑—ã–≤—ã') || firstCell.includes('—Ü–µ–ª–µ–≤—ã–µ') || 
            firstCell.includes('–ø–ª–æ—â–∞–¥–∫–∏') || firstCell.includes('–æ—Å') || 
            firstCell.includes('—Ü—Å') || firstCell.includes('–ø—Å')) {
          sections.push({
            name: firstCell,
            row: i + 1
          });
        }
      }
    }
    
    return sections;
  }

  /**
   * –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–∏–ø–∞–º
   */
  countRecordsByType(data) {
    let reviews = 0;
    let targeted = 0;
    let social = 0;
    let totalViews = 0;
    
    let inReviewsSection = false;
    let inTargetedSection = false;
    let inSocialSection = false;
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      if (row.length === 0) continue;
      
      const firstCell = String(row[0]).toLowerCase();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏–∏
      if (firstCell.includes('–æ—Ç–∑—ã–≤—ã') || firstCell.includes('–æ—Å')) {
        inReviewsSection = true;
        inTargetedSection = false;
        inSocialSection = false;
        continue;
      }
      
      if (firstCell.includes('—Ü–µ–ª–µ–≤—ã–µ') || firstCell.includes('—Ü—Å')) {
        inReviewsSection = false;
        inTargetedSection = true;
        inSocialSection = false;
        continue;
      }
      
      if (firstCell.includes('–ø–ª–æ—â–∞–¥–∫–∏') || firstCell.includes('–ø—Å')) {
        inReviewsSection = false;
        inTargetedSection = false;
        inSocialSection = true;
        continue;
      }
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
      if (inReviewsSection && this.isDataRow(row)) {
        reviews++;
        totalViews += this.extractViews(row);
      }
      
      if (inTargetedSection && this.isDataRow(row)) {
        targeted++;
        totalViews += this.extractViews(row);
      }
      
      if (inSocialSection && this.isDataRow(row)) {
        social++;
        totalViews += this.extractViews(row);
      }
    }
    
    return { reviews, targeted, social, totalViews };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã–º–∏
   */
  isDataRow(row) {
    if (row.length < 3) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∑–Ω–∞—á–∏–º—ã–π —Ç–µ–∫—Å—Ç
    const textCell = row[2] || row[1] || row[0];
    return textCell && String(textCell).trim().length > 10;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏
   */
  extractViews(row) {
    if (row.length < 6) return 0;
    
    const viewsCell = row[5];
    if (!viewsCell) return 0;
    
    const viewsStr = String(viewsCell).replace(/[^\d]/g, '');
    const views = parseInt(viewsStr);
    
    return isNaN(views) ? 0 : views;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
   */
  extractStatisticsFromData(data) {
    const counts = this.countRecordsByType(data);
    
    return {
      totalRows: data.length,
      reviewsCount: counts.reviews,
      targetedCount: counts.targeted,
      socialCount: counts.social,
      totalViews: counts.totalViews
    };
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
   */
  compareTotalRows(processedData, referenceData) {
    const processedTotal = this.findTotalRow(processedData);
    const referenceTotal = this.findTotalRow(referenceData);
    
    if (!processedTotal && !referenceTotal) return 1;
    if (!processedTotal || !referenceTotal) return 0;
    
    const processedText = processedTotal.join(' ').toLowerCase();
    const referenceText = referenceTotal.join(' ').toLowerCase();
    
    return this.calculateTextSimilarity(processedText, referenceText);
  }

  /**
   * –ü–æ–∏—Å–∫ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
   */
  findTotalRow(data) {
    for (let i = data.length - 1; i >= 0; i--) {
      const row = data[i];
      if (row.length > 0) {
        const firstCell = String(row[0]).toLowerCase();
        if (firstCell.includes('–∏—Ç–æ–≥–æ') || firstCell.includes('total')) {
          return row;
        }
      }
    }
    return null;
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
   */
  calculateTextSimilarity(text1, text2) {
    const words1 = text1.split(/\s+/).filter(w => w.length > 0);
    const words2 = text2.split(/\s+/).filter(w => w.length > 0);
    
    const commonWords = words1.filter(word => words2.includes(word));
    const totalWords = Math.max(words1.length, words2.length);
    
    return totalWords > 0 ? commonWords.length / totalWords : 0;
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
   */
  calculateSectionSimilarity(sections1, sections2) {
    if (sections1.length === 0 && sections2.length === 0) return 1;
    if (sections1.length === 0 || sections2.length === 0) return 0;
    
    const sectionNames1 = sections1.map(s => s.name);
    const sectionNames2 = sections2.map(s => s.name);
    
    const commonSections = sectionNames1.filter(name => 
      sectionNames2.some(name2 => this.calculateTextSimilarity(name, name2) > 0.5)
    );
    
    const totalSections = Math.max(sections1.length, sections2.length);
    return totalSections > 0 ? commonSections.length / totalSections : 0;
  }

  /**
   * –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
   */
  recordTestResult(month, processedResult, comparisonResult, error = null) {
    this.testResults.totalTests++;
    
    const testDetail = {
      month: `${month.name} ${month.year}`,
      status: error ? 'FAILED' : (comparisonResult.similarity >= TEST_CONFIG.TESTING.COMPARISON_THRESHOLD ? 'PASSED' : 'FAILED'),
      similarity: comparisonResult ? comparisonResult.similarity : 0,
      details: comparisonResult ? comparisonResult.details : null,
      error: error
    };
    
    this.testResults.details.push(testDetail);
    
    if (testDetail.status === 'PASSED') {
      this.testResults.passedTests++;
      console.log(`‚úÖ ${month.name} ${month.year}: –ü–†–û–ô–î–ï–ù (${(comparisonResult.similarity * 100).toFixed(1)}%)`);
    } else {
      this.testResults.failedTests++;
      console.log(`‚ùå ${month.name} ${month.year}: –ü–†–û–í–ê–õ–ï–ù (${(comparisonResult ? (comparisonResult.similarity * 100).toFixed(1) : 0)}%)`);
      if (error) console.log(`   –û—à–∏–±–∫–∞: ${error}`);
    }
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  async attemptFix(month, sourceDataInfo, referenceDataInfo) {
    console.log(`üîß –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è ${month.name} ${month.year}...`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∏ —Ç.–¥.
    
    console.log(`‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –¥–ª—è ${month.name} ${month.year}`);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  analyzeResults() {
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('=====================================');
    
    const successRate = this.testResults.totalTests > 0 ? 
      (this.testResults.passedTests / this.testResults.totalTests) * 100 : 0;
    
    console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${successRate.toFixed(1)}%`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.passedTests}/${this.testResults.totalTests}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.failedTests}/${this.testResults.totalTests}`);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${(this.testResults.processingTime / 1000).toFixed(2)} —Å–µ–∫`);
    
    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    this.testResults.details.forEach(detail => {
      const statusIcon = detail.status === 'PASSED' ? '‚úÖ' : '‚ùå';
      const similarity = detail.similarity ? `(${(detail.similarity * 100).toFixed(1)}%)` : '';
      console.log(`${statusIcon} ${detail.month}: ${detail.status} ${similarity}`);
      
      if (detail.error) {
        console.log(`   –û—à–∏–±–∫–∞: ${detail.error}`);
      }
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
   */
  async generateTestReport() {
    console.log('\nüìÑ –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò...');
    
    const reportData = [
      ['–û–¢–ß–ï–¢ –û –§–ò–ù–ê–õ–¨–ù–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò GOOGLE APPS SCRIPT'],
      ['–û–°–ù–û–í–ê–ù –ù–ê –ê–ù–ê–õ–ò–ó–ï –ë–≠–ö–ê–ì–ï–ù–¢–ê 1'],
      [''],
      [`–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date().toLocaleDateString('ru-RU')}`],
      [`–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date().toLocaleTimeString('ru-RU')}`],
      [`–û–±—â–µ–µ –≤—Ä–µ–º—è: ${(this.testResults.processingTime / 1000).toFixed(2)} —Å–µ–∫`],
      [''],
      ['–û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:'],
      [`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.totalTests}`],
      [`–ü—Ä–æ–π–¥–µ–Ω–æ: ${this.testResults.passedTests}`],
      [`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testResults.failedTests}`],
      [`–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${this.testResults.totalTests > 0 ? (this.testResults.passedTests / this.testResults.totalTests * 100).toFixed(1) : 0}%`],
      [''],
      ['–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:'],
      ['–ú–µ—Å—è—Ü', '–°—Ç–∞—Ç—É—Å', '–°—Ö–æ–∂–µ—Å—Ç—å', '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫', '–≠—Ç–∞–ª–æ–Ω —Å—Ç—Ä–æ–∫', '–û—Ç–∑—ã–≤—ã', '–¶–µ–ª–µ–≤—ã–µ', '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã']
    ];
    
    this.testResults.details.forEach(detail => {
      const details = detail.details || {};
      reportData.push([
        detail.month,
        detail.status,
        detail.similarity ? `${(detail.similarity * 100).toFixed(1)}%` : 'N/A',
        details.processedRows || 'N/A',
        details.referenceRows || 'N/A',
        details.reviews || 'N/A',
        details.targeted || 'N/A',
        details.social || 'N/A',
        details.views || 'N/A'
      ]);
    });
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    const reportSpreadsheet = SpreadsheetApp.create(`–§–∏–Ω–∞–ª—å–Ω—ã–π_–æ—Ç—á–µ—Ç_—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è_${new Date().toISOString().split('T')[0]}`);
    const reportSheet = reportSpreadsheet.getActiveSheet();
    
    reportSheet.getRange(1, 1, reportData.length, reportData[0].length).setValues(reportData);
    reportSheet.autoResizeColumns(1, reportData[0].length);
    
    console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${reportSpreadsheet.getUrl()}`);
    
    return reportSpreadsheet.getUrl();
  }
}

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function runFinalTesting() {
  const tester = new FinalGoogleAppsScriptTester();
  return tester.runFullTesting();
}

/**
 * –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function showFinalTestConfig() {
  console.log('‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('==========================================');
  console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${TEST_CONFIG.SOURCE_URL}`);
  console.log(`üìä –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${TEST_CONFIG.REFERENCE_URL}`);
  console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ ${TEST_CONFIG.DATA_STRUCTURE.headerRow}, –¥–∞–Ω–Ω—ã–µ —Å —Å—Ç—Ä–æ–∫–∏ ${TEST_CONFIG.DATA_STRUCTURE.dataStartRow}`);
  console.log(`üéØ –ü–æ—Ä–æ–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: ${TEST_CONFIG.TESTING.COMPARISON_THRESHOLD * 100}%`);
  console.log(`üîÑ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: ${TEST_CONFIG.TESTING.MAX_RETRIES}`);
  console.log(`üìù –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ${TEST_CONFIG.TESTING.ENABLE_DETAILED_LOGGING ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}`);
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function updateMenuWithFinalTesting() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üß™ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
    .addItem('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'runFinalTesting')
    .addItem('–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', 'quickTestProcessor')
    .addSeparator()
    .addItem('–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é', 'showFinalTestConfig')
    .addToUi();
}

/**
 * –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
 */
function quickTestProcessor() {
  console.log('üß™ –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–¶–ï–°–°–û–†–ê');
  console.log('==================================');
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–∞–ø—Ä—è–º—É—é
    const result = processGoogleSheets();
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log(`‚úÖ –£—Å–ø–µ—Ö: ${result.success}`);
    
    if (result.success) {
      console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: ${result.sourceRows}`);
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${result.processedRows}`);
      console.log(`üìù –û—Ç–∑—ã–≤–æ–≤: ${result.reviewsCount || 0}`);
      console.log(`üéØ –¶–µ–ª–µ–≤—ã—Ö: ${result.targetedCount || 0}`);
      console.log(`üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã—Ö: ${result.socialCount || 0}`);
      console.log(`üëÅÔ∏è –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${result.totalViews || 0}`);
      console.log(`üí¨ –í—Å–µ–≥–æ –≤–æ–≤–ª–µ—á–µ–Ω–∏–π: ${result.totalEngagement || 0}`);
      console.log(`üîó ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${result.resultFileId}`);
      
      // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
      const quality = analyzeProcessorQuality(result);
      console.log(`\nüìà –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê: ${quality.score.toFixed(1)}%`);
      
      if (quality.issues.length > 0) {
        console.log('\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
        quality.issues.forEach((issue, index) => {
          console.log(`${index + 1}. ${issue}`);
        });
      }
      
      if (quality.recommendations.length > 0) {
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        quality.recommendations.forEach((rec, index) => {
          console.log(`${index + 1}. ${rec}`);
        });
      }
      
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
    }
    
    return result;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return { success: false, error: error.toString() };
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
 */
function analyzeProcessorQuality(result) {
  const analysis = {
    score: 0,
    issues: [],
    recommendations: []
  };
  
  let scoreComponents = 0;
  let maxScore = 0;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
  if (result.success) {
    scoreComponents += 20;
  } else {
    analysis.issues.push('–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π');
    analysis.recommendations.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏');
  }
  maxScore += 20;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
  const processedRows = result.processedRows || 0;
  if (processedRows >= 10) {
    scoreComponents += 15;
  } else if (processedRows > 0) {
    scoreComponents += 10;
    analysis.issues.push(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞–ª–æ —Å—Ç—Ä–æ–∫: ${processedRows}`);
    analysis.recommendations.push('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö');
  } else {
    analysis.issues.push('–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏');
    analysis.recommendations.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
  }
  maxScore += 15;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
  const reviewsCount = result.reviewsCount || 0;
  if (reviewsCount >= 3) {
    scoreComponents += 15;
  } else if (reviewsCount > 0) {
    scoreComponents += 10;
    analysis.issues.push(`–ù–∞–π–¥–µ–Ω–æ –º–∞–ª–æ –æ—Ç–∑—ã–≤–æ–≤: ${reviewsCount}`);
    analysis.recommendations.push('–£–ª—É—á—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –æ—Ç–∑—ã–≤–æ–≤');
  } else {
    analysis.issues.push('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤');
    analysis.recommendations.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–∞ "–û—Ç–∑—ã–≤—ã —Å–∞–π—Ç–æ–≤ (–û–°)"');
  }
  maxScore += 15;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤
  const targetedCount = result.targetedCount || 0;
  if (targetedCount >= 2) {
    scoreComponents += 15;
  } else if (targetedCount > 0) {
    scoreComponents += 10;
    analysis.issues.push(`–ù–∞–π–¥–µ–Ω–æ –º–∞–ª–æ —Ü–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤: ${targetedCount}`);
    analysis.recommendations.push('–£–ª—É—á—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Ü–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤');
  } else {
    analysis.issues.push('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤');
    analysis.recommendations.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–∞ "–¶–µ–ª–µ–≤—ã–µ —Å–∞–π—Ç—ã (–¶–°)"');
  }
  maxScore += 15;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫
  const socialCount = result.socialCount || 0;
  if (socialCount >= 2) {
    scoreComponents += 15;
  } else if (socialCount > 0) {
    scoreComponents += 10;
    analysis.issues.push(`–ù–∞–π–¥–µ–Ω–æ –º–∞–ª–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫: ${socialCount}`);
    analysis.recommendations.push('–£–ª—É—á—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫');
  } else {
    analysis.issues.push('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫');
    analysis.recommendations.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–∞ "–ü–ª–æ—â–∞–¥–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ (–ü–°)"');
  }
  maxScore += 15;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
  const totalViews = result.totalViews || 0;
  if (totalViews > 100) {
    scoreComponents += 10;
  } else if (totalViews > 0) {
    scoreComponents += 5;
    analysis.issues.push(`–ù–∞–π–¥–µ–Ω–æ –º–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${totalViews}`);
    analysis.recommendations.push('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö');
  } else {
    analysis.issues.push('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤');
    analysis.recommendations.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤');
  }
  maxScore += 10;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
  const totalEngagement = result.totalEngagement || 0;
  if (totalEngagement > 10) {
    scoreComponents += 10;
  } else if (totalEngagement > 0) {
    scoreComponents += 5;
    analysis.issues.push(`–ù–∞–π–¥–µ–Ω–æ –º–∞–ª–æ –≤–æ–≤–ª–µ—á–µ–Ω–∏–π: ${totalEngagement}`);
    analysis.recommendations.push('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö');
  } else {
    analysis.issues.push('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–≤–ª–µ—á–µ–Ω–∏–π');
    analysis.recommendations.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏–π');
  }
  maxScore += 10;
  
  analysis.score = maxScore > 0 ? (scoreComponents / maxScore) * 100 : 0;
  
  return analysis;
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
 */
function autoFixProcessor() {
  console.log('üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–¶–ï–°–°–û–†–ê');
  console.log('=========================================');
  
  // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
  const result = quickTestProcessor();
  
  if (!result.success) {
    console.log('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å - –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è');
    return false;
  }
  
  const quality = analyzeProcessorQuality(result);
  
  if (quality.score >= 90) {
    console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è');
    return true;
  }
  
  console.log('\nüîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');
  console.log('–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–¥–∞');
  
  quality.recommendations.forEach((rec, index) => {
    console.log(`${index + 1}. TODO: ${rec}`);
  });
  
  return false;
} 