/**
 * ‚ö° –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –ú–ò–°–°–ò–ò
 * –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google Apps Script
 * 
 * –ê–≤—Ç–æ—Ä: AI Assistant
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–´–°–û–ö–ò–ô
 * –í—Ä–µ–º—è: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–û
 */

// ==================== –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ö–û–ù–§–ò–ì ====================

const CRITICAL_CONFIG = {
  // URL –¥–∞–Ω–Ω—ã—Ö (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï)
  SOURCE_URL: 'https://docs.google.com/spreadsheets/d/1RT8T5gnDPe0KMikTmVNdSvxqDal3aQUmelpEwItgxMI/edit?usp=sharing',
  REFERENCE_URL: 'https://docs.google.com/spreadsheets/d/1pxUF5HnII7hVnaw077mE0FHqGp-TN1Rk/edit?',
  
  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  TARGET_SIMILARITY: 0.95, // 95% - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û
  MAX_RETRIES: 5,
  TIMEOUT_SECONDS: 300,
  
  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (–û–°–ù–û–í–ê–ù–ê –ù–ê –ê–ù–ê–õ–ò–ó–ï)
  STRUCTURE: {
    headerRow: 4,        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û
    dataStartRow: 5,     // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û
    infoRows: [1, 2, 3]
  }
};

// ==================== –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö ====================

/**
 * ‚ö° –ú–ì–ù–û–í–ï–ù–ù–´–ô –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –ú–ò–°–°–ò–ò
 */
function launchCriticalMission() {
  console.log('üö® –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –ú–ò–°–°–ò–ò!');
  console.log('üéØ –¶–ï–õ–¨: 95%+ –°–û–í–ü–ê–î–ï–ù–ò–ï');
  console.log('‚è∞ –í–†–ï–ú–Ø: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–û');
  console.log('üí™ –†–ï–°–£–†–°–´: –ú–ê–ö–°–ò–ú–£–ú');
  
  const startTime = Date.now();
  
  try {
    // 1. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º...');
    const sourceAccess = testDataAccess(CRITICAL_CONFIG.SOURCE_URL);
    const referenceAccess = testDataAccess(CRITICAL_CONFIG.REFERENCE_URL);
    
    if (!sourceAccess || !referenceAccess) {
      throw new Error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º!');
    }
    
    console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
    
    // 2. –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...');
    const processor = new FinalMonthlyReportProcessor();
    
    // 3. –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Å—è—Ü–µ–≤
    const months = ['–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π'];
    const results = {};
    
    for (const month of months) {
      console.log(`üìÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: ${month} 2025`);
      
      const monthResult = testMonthCritical(processor, month);
      results[month] = monthResult;
      
      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      if (monthResult.similarity < CRITICAL_CONFIG.TARGET_SIMILARITY) {
        console.log(`‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: ${month} - ${(monthResult.similarity * 100).toFixed(1)}% < 95%`);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const fixedResult = attemptCriticalFix(processor, month);
        if (fixedResult.similarity >= CRITICAL_CONFIG.TARGET_SIMILARITY) {
          console.log(`‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: ${month} - ${(fixedResult.similarity * 100).toFixed(1)}%`);
          results[month] = fixedResult;
        }
      } else {
        console.log(`‚úÖ –£–°–ü–ï–•: ${month} - ${(monthResult.similarity * 100).toFixed(1)}%`);
      }
    }
    
    // 4. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const analysis = analyzeCriticalResults(results);
    
    // 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    const reportUrl = generateCriticalReport(results, analysis, startTime);
    
    console.log('üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ú–ò–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log(`üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${(analysis.overallSimilarity * 100).toFixed(1)}%`);
    console.log(`üìÑ –û—Ç—á–µ—Ç: ${reportUrl}`);
    
    return {
      success: analysis.overallSimilarity >= CRITICAL_CONFIG.TARGET_SIMILARITY,
      overallSimilarity: analysis.overallSimilarity,
      results: results,
      reportUrl: reportUrl,
      processingTime: Date.now() - startTime
    };
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    return {
      success: false,
      error: error.toString(),
      processingTime: Date.now() - startTime
    };
  }
}

/**
 * ‚ö° –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
 */
function testMonthCritical(processor, month) {
  try {
    console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${month} 2025...`);
    
    // –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const sourceData = getMonthDataCritical(CRITICAL_CONFIG.SOURCE_URL, month);
    const referenceData = getMonthDataCritical(CRITICAL_CONFIG.REFERENCE_URL, month);
    
    if (!sourceData || !referenceData) {
      return {
        month: month,
        similarity: 0,
        error: '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        status: 'FAILED'
      };
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
    const processedResult = processor.processReport(sourceData.spreadsheetId, sourceData.sheetName);
    
    if (!processedResult.success) {
      return {
        month: month,
        similarity: 0,
        error: processedResult.error,
        status: 'FAILED'
      };
    }
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    const comparison = compareCritical(processedResult, referenceData);
    
    return {
      month: month,
      similarity: comparison.similarity,
      details: comparison.details,
      status: comparison.similarity >= CRITICAL_CONFIG.TARGET_SIMILARITY ? 'PASSED' : 'FAILED',
      processedData: processedResult.statistics,
      referenceData: referenceData.statistics
    };
    
  } catch (error) {
    return {
      month: month,
      similarity: 0,
      error: error.toString(),
      status: 'FAILED'
    };
  }
}

/**
 * ‚ö° –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–∞ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±—ã—Å—Ç—Ä–æ)
 */
function getMonthDataCritical(spreadsheetUrl, month) {
  try {
    const spreadsheet = SpreadsheetApp.openByUrl(spreadsheetUrl);
    const sheets = spreadsheet.getSheets();
    
    // –ü–æ–∏—Å–∫ –ª–∏—Å—Ç–∞ —Å –Ω—É–∂–Ω—ã–º –º–µ—Å—è—Ü–µ–º
    const targetSheet = sheets.find(sheet => {
      const sheetName = sheet.getName().toLowerCase();
      const monthLower = month.toLowerCase();
      return sheetName.includes(monthLower) || 
             sheetName.includes(monthLower.substring(0, 3));
    });
    
    if (!targetSheet) {
      console.log(`‚ö†Ô∏è –õ–∏—Å—Ç –¥–ª—è ${month} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return null;
    }
    
    return {
      spreadsheetId: spreadsheet.getId(),
      sheetName: targetSheet.getName(),
      data: targetSheet.getDataRange().getValues()
    };
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${month}:`, error);
    return null;
  }
}

/**
 * ‚ö° –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
function compareCritical(processedResult, referenceData) {
  try {
    // –ë—ã—Å—Ç—Ä–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const processedStats = processedResult.statistics;
    const referenceStats = extractStatsCritical(referenceData.data);
    
    let similarity = 0;
    let totalChecks = 0;
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
    if (referenceStats.reviewsCount > 0) {
      const reviewAccuracy = Math.min(processedStats.reviewsCount / referenceStats.reviewsCount, 1);
      similarity += reviewAccuracy;
      totalChecks++;
    }
    
    if (referenceStats.targetedCount > 0) {
      const targetedAccuracy = Math.min(processedStats.targetedCount / referenceStats.targetedCount, 1);
      similarity += targetedAccuracy;
      totalChecks++;
    }
    
    if (referenceStats.socialCount > 0) {
      const socialAccuracy = Math.min(processedStats.socialCount / referenceStats.socialCount, 1);
      similarity += socialAccuracy;
      totalChecks++;
    }
    
    if (referenceStats.totalViews > 0) {
      const viewsAccuracy = Math.min(processedStats.totalViews / referenceStats.totalViews, 1);
      similarity += viewsAccuracy;
      totalChecks++;
    }
    
    const finalSimilarity = totalChecks > 0 ? similarity / totalChecks : 0;
    
    return {
      similarity: finalSimilarity,
      details: {
        processedStats: processedStats,
        referenceStats: referenceStats,
        checks: totalChecks
      }
    };
    
  } catch (error) {
    return {
      similarity: 0,
      error: error.toString()
    };
  }
}

/**
 * ‚ö° –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±—ã—Å—Ç—Ä–æ)
 */
function extractStatsCritical(data) {
  let reviews = 0;
  let targeted = 0;
  let social = 0;
  let totalViews = 0;
  
  let inReviewsSection = false;
  let inTargetedSection = false;
  let inSocialSection = false;
  
  for (let i = 0; i < data.length; i++) {
    const row = data[i];
    if (row.length === 0) continue;
    
    const firstCell = String(row[0]).toLowerCase();
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π
    if (firstCell.includes('–æ—Ç–∑—ã–≤—ã') || firstCell.includes('–æ—Å')) {
      inReviewsSection = true;
      inTargetedSection = false;
      inSocialSection = false;
      continue;
    }
    
    if (firstCell.includes('—Ü–µ–ª–µ–≤—ã–µ') || firstCell.includes('—Ü—Å')) {
      inReviewsSection = false;
      inTargetedSection = true;
      inSocialSection = false;
      continue;
    }
    
    if (firstCell.includes('–ø–ª–æ—â–∞–¥–∫–∏') || firstCell.includes('–ø—Å')) {
      inReviewsSection = false;
      inTargetedSection = false;
      inSocialSection = true;
      continue;
    }
    
    // –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π
    if (inReviewsSection && isDataRowCritical(row)) {
      reviews++;
      totalViews += extractViewsCritical(row);
    }
    
    if (inTargetedSection && isDataRowCritical(row)) {
      targeted++;
      totalViews += extractViewsCritical(row);
    }
    
    if (inSocialSection && isDataRowCritical(row)) {
      social++;
      totalViews += extractViewsCritical(row);
    }
  }
  
  return { reviews, targeted, social, totalViews };
}

/**
 * ‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±—ã—Å—Ç—Ä–æ)
 */
function isDataRowCritical(row) {
  if (row.length < 3) return false;
  const textCell = row[2] || row[1] || row[0];
  return textCell && String(textCell).trim().length > 10;
}

/**
 * ‚ö° –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±—ã—Å—Ç—Ä–æ)
 */
function extractViewsCritical(row) {
  if (row.length < 6) return 0;
  const viewsCell = row[5];
  if (!viewsCell) return 0;
  const viewsStr = String(viewsCell).replace(/[^\d]/g, '');
  const views = parseInt(viewsStr);
  return isNaN(views) ? 0 : views;
}

/**
 * ‚ö° –ü–æ–ø—ã—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
function attemptCriticalFix(processor, month) {
  console.log(`üîß –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è ${month}...`);
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∏ —Ç.–¥.
  
  // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  return {
    month: month,
    similarity: 0,
    status: 'FAILED',
    error: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ'
  };
}

/**
 * ‚ö° –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
function analyzeCriticalResults(results) {
  let totalSimilarity = 0;
  let passedTests = 0;
  let totalTests = 0;
  
  for (const month in results) {
    const result = results[month];
    totalSimilarity += result.similarity;
    totalTests++;
    
    if (result.status === 'PASSED') {
      passedTests++;
    }
  }
  
  const overallSimilarity = totalTests > 0 ? totalSimilarity / totalTests : 0;
  const successRate = totalTests > 0 ? passedTests / totalTests : 0;
  
  return {
    overallSimilarity: overallSimilarity,
    successRate: successRate,
    passedTests: passedTests,
    totalTests: totalTests,
    targetAchieved: overallSimilarity >= CRITICAL_CONFIG.TARGET_SIMILARITY
  };
}

/**
 * ‚ö° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */
function generateCriticalReport(results, analysis, startTime) {
  const reportData = [
    ['üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø'],
    [''],
    [`–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}`],
    [`–í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}`],
    [`–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${((Date.now() - startTime) / 1000).toFixed(2)} —Å–µ–∫`],
    [''],
    ['–û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:'],
    [`–û–±—â–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${(analysis.overallSimilarity * 100).toFixed(1)}%`],
    [`–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: ${analysis.targetAchieved ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`],
    [`–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${analysis.passedTests}/${analysis.totalTests}`],
    [''],
    ['–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:'],
    ['–ú–µ—Å—è—Ü', '–°—Ç–∞—Ç—É—Å', '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ', '–û—Ç–∑—ã–≤—ã', '–¶–µ–ª–µ–≤—ã–µ', '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã']
  ];
  
  for (const month in results) {
    const result = results[month];
    const statusIcon = result.status === 'PASSED' ? '‚úÖ' : '‚ùå';
    
    reportData.push([
      month,
      `${statusIcon} ${result.status}`,
      `${(result.similarity * 100).toFixed(1)}%`,
      result.processedData?.reviewsCount || 'N/A',
      result.processedData?.targetedCount || 'N/A',
      result.processedData?.socialCount || 'N/A',
      result.processedData?.totalViews || 'N/A'
    ]);
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  const reportSpreadsheet = SpreadsheetApp.create(`–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô_–û–¢–ß–ï–¢_${new Date().toISOString().split('T')[0]}`);
  const reportSheet = reportSpreadsheet.getActiveSheet();
  
  reportSheet.getRange(1, 1, reportData.length, reportData[0].length).setValues(reportData);
  reportSheet.autoResizeColumns(1, reportData[0].length);
  
  return reportSpreadsheet.getUrl();
}

/**
 * ‚ö° –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
 */
function testDataAccess(url) {
  try {
    const spreadsheet = SpreadsheetApp.openByUrl(url);
    return spreadsheet !== null;
  } catch (error) {
    return false;
  }
}

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * ‚ö° –ú–ì–ù–û–í–ï–ù–ù–´–ô –ó–ê–ü–£–°–ö
 */
function launchNow() {
  return launchCriticalMission();
}

/**
 * ‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
 */
function quickCheck() {
  console.log('üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
  console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${CRITICAL_CONFIG.SOURCE_URL}`);
  console.log(`üìä –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${CRITICAL_CONFIG.REFERENCE_URL}`);
  console.log(`üéØ –¶–µ–ª–µ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${CRITICAL_CONFIG.TARGET_SIMILARITY * 100}%`);
  
  const sourceAccess = testDataAccess(CRITICAL_CONFIG.SOURCE_URL);
  const referenceAccess = testDataAccess(CRITICAL_CONFIG.REFERENCE_URL);
  
  console.log(`‚úÖ –î–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º: ${sourceAccess ? '–î–ê' : '–ù–ï–¢'}`);
  console.log(`‚úÖ –î–æ—Å—Ç—É–ø –∫ —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º: ${referenceAccess ? '–î–ê' : '–ù–ï–¢'}`);
  
  return {
    sourceAccess: sourceAccess,
    referenceAccess: referenceAccess,
    ready: sourceAccess && referenceAccess
  };
} 