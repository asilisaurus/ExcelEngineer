const XLSX = require('xlsx');
const fs = require('fs');

function analyzeWorkbook(filename, description) {
    console.log(`\n${'='.repeat(80)}`);
    console.log(`–ê–ù–ê–õ–ò–ó ${description.toUpperCase()}: ${filename}`);
    console.log(`${'='.repeat(80)}\n`);
    
    if (!fs.existsSync(filename)) {
        console.log(`‚ùå –§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
        return null;
    }
    
    const workbook = XLSX.readFile(filename, {
        type: 'buffer',
        cellDates: true,
        cellNF: false,
        cellText: false,
        raw: false
    });
    
    const analysis = {
        filename,
        totalSheets: workbook.SheetNames.length,
        sheets: []
    };
    
    console.log(`üìã –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤: ${workbook.SheetNames.length}`);
    console.log(`üìë –ù–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤: ${workbook.SheetNames.join(', ')}\n`);
    
    workbook.SheetNames.forEach((sheetName, index) => {
        console.log(`${'‚îÄ'.repeat(60)}`);
        console.log(`üìÑ –õ–ò–°–¢ ${index + 1}: "${sheetName}"`);
        console.log(`${'‚îÄ'.repeat(60)}`);
        
        const worksheet = workbook.Sheets[sheetName];
        const range = XLSX.utils.decode_range(worksheet['!ref'] || 'A1:A1');
        const maxRow = range.e.r + 1;
        const maxCol = range.e.c + 1;
        
        console.log(`üìè –†–∞–∑–º–µ—Ä—ã: ${maxRow} —Å—Ç—Ä–æ–∫ √ó ${maxCol} –∫–æ–ª–æ–Ω–æ–∫`);
        console.log(`üìç –î–∏–∞–ø–∞–∑–æ–Ω: ${worksheet['!ref'] || '–ü—É—Å—Ç–æ–π –ª–∏—Å—Ç'}\n`);
        
        // –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö 5 —Å—Ç—Ä–æ–∫
        console.log(`üîç –ü–ï–†–í–´–ï 5 –°–¢–†–û–ö:`);
        for (let row = 0; row < Math.min(5, maxRow); row++) {
            const rowData = [];
            for (let col = 0; col < maxCol; col++) {
                const cellAddress = XLSX.utils.encode_cell({r: row, c: col});
                const cell = worksheet[cellAddress];
                const value = cell ? (typeof cell.v === 'string' ? cell.v.trim() : cell.v) : '';
                rowData.push(value || '');
            }
            console.log(`   –°—Ç—Ä–æ–∫–∞ ${row + 1}: [${rowData.slice(0, 10).map(v => `"${v}"`).join(', ')}${rowData.length > 10 ? '...' : ''}]`);
        }
        console.log();
        
        // –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        console.log(`üîç –ü–û–ò–°–ö –ö–õ–Æ–ß–ï–í–´–• –†–ê–ó–î–ï–õ–û–í:`);
        const sections = findSections(worksheet, maxRow, maxCol);
        sections.forEach(section => {
            console.log(`   ${section.type}: ${section.description} (—Å—Ç—Ä–æ–∫–∞ ${section.row + 1})`);
        });
        console.log();
        
        // –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        const headers = analyzeHeaders(worksheet, maxRow, maxCol);
        if (headers.found) {
            console.log(`üìã –ó–ê–ì–û–õ–û–í–ö–ò –ù–ê–ô–î–ï–ù–´ –í –°–¢–†–û–ö–ï ${headers.row + 1}:`);
            headers.columns.forEach((header, index) => {
                console.log(`   ${String.fromCharCode(65 + index)}: "${header}"`);
            });
            console.log();
        }
        
        // –ü–æ–∏—Å–∫ –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
        const totals = findTotalRows(worksheet, maxRow, maxCol);
        if (totals.length > 0) {
            console.log(`üìä –ò–¢–û–ì–û–í–´–ï –°–¢–†–û–ö–ò:`);
            totals.forEach(total => {
                console.log(`   –°—Ç—Ä–æ–∫–∞ ${total.row + 1}: ${total.text}`);
            });
            console.log();
        }
        
        // –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        const dataAnalysis = analyzeDataTypes(worksheet, headers, maxRow, maxCol);
        if (dataAnalysis) {
            console.log(`üìà –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•:`);
            Object.entries(dataAnalysis).forEach(([type, count]) => {
                console.log(`   ${type}: ${count}`);
            });
            console.log();
        }
        
        const sheetAnalysis = {
            name: sheetName,
            dimensions: {rows: maxRow, cols: maxCol},
            range: worksheet['!ref'],
            headers,
            sections,
            totals,
            dataAnalysis
        };
        
        analysis.sheets.push(sheetAnalysis);
    });
    
    return analysis;
}

function findSections(worksheet, maxRow, maxCol) {
    const sections = [];
    const sectionKeywords = [
        {keyword: '–æ—Ç–∑—ã–≤', type: 'üìù –û–¢–ó–´–í–´'},
        {keyword: '–∫–æ–º–º–µ–Ω—Ç–∞—Ä', type: 'üí¨ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò'},
        {keyword: '–æ–±—Å—É–∂–¥–µ–Ω', type: 'üó£Ô∏è –û–ë–°–£–ñ–î–ï–ù–ò–Ø'},
        {keyword: '–∏—Ç–æ–≥–æ', type: 'üìä –ò–¢–û–ì–ò'},
        {keyword: 'total', type: 'üìä TOTAL'},
        {keyword: '—Å—É–º–º–∞', type: 'üßÆ –°–£–ú–ú–´'},
        {keyword: '–∏–Ω—Å—Ç—Ä—É–∫—Ü', type: 'üìñ –ò–ù–°–¢–†–£–ö–¶–ò–ò'},
        {keyword: '–ø–ª–æ—â–∞–¥–∫', type: 'üåê –ü–õ–û–©–ê–î–ö–ò'},
        {keyword: '–¥–∞—Ç–∞', type: 'üìÖ –î–ê–¢–´'},
        {keyword: '—Å—Ç–∞—Ç—É—Å', type: 'üìà –°–¢–ê–¢–£–°–´'}
    ];
    
    for (let row = 0; row < maxRow; row++) {
        for (let col = 0; col < maxCol; col++) {
            const cellAddress = XLSX.utils.encode_cell({r: row, c: col});
            const cell = worksheet[cellAddress];
            if (cell && cell.v && typeof cell.v === 'string') {
                const value = cell.v.toLowerCase().trim();
                
                sectionKeywords.forEach(({keyword, type}) => {
                    if (value.includes(keyword)) {
                        sections.push({
                            type,
                            row,
                            col,
                            description: cell.v.trim(),
                            keyword
                        });
                    }
                });
            }
        }
    }
    
    return sections;
}

function analyzeHeaders(worksheet, maxRow, maxCol) {
    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤—ã—Ö 5 —Å—Ç—Ä–æ–∫–∞—Ö
    for (let headerRow = 0; headerRow < Math.min(5, maxRow); headerRow++) {
        const rowData = [];
        let hasHeaders = false;
        
        for (let col = 0; col < maxCol; col++) {
            const cellAddress = XLSX.utils.encode_cell({r: headerRow, c: col});
            const cell = worksheet[cellAddress];
            const value = cell ? (typeof cell.v === 'string' ? cell.v.trim() : cell.v) : '';
            rowData.push(value || '');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if (typeof value === 'string' && value.length > 1) {
                const headerKeywords = ['–ø–ª–æ—â–∞–¥–∫', '–¥–∞—Ç–∞', '—Ç–µ–∫—Å—Ç', '—Ç–∏–ø', '—Å—Ç–∞—Ç—É—Å', '—Å—Å—ã–ª–∫', '–ø—Ä–∏–º–µ—á', '–ø—Ä–æ—Å–º–æ—Ç—Ä', '–ª–∞–π–∫'];
                if (headerKeywords.some(keyword => value.toLowerCase().includes(keyword))) {
                    hasHeaders = true;
                }
            }
        }
        
        if (hasHeaders) {
            return {
                found: true,
                row: headerRow,
                columns: rowData.filter(v => v !== '')
            };
        }
    }
    
    return {found: false};
}

function findTotalRows(worksheet, maxRow, maxCol) {
    const totals = [];
    const totalKeywords = ['–∏—Ç–æ–≥–æ', 'total', '—Å—É–º–º–∞', '–≤—Å–µ–≥–æ', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'];
    
    for (let row = 0; row < maxRow; row++) {
        for (let col = 0; col < maxCol; col++) {
            const cellAddress = XLSX.utils.encode_cell({r: row, c: col});
            const cell = worksheet[cellAddress];
            if (cell && cell.v && typeof cell.v === 'string') {
                const value = cell.v.toLowerCase().trim();
                
                if (totalKeywords.some(keyword => value.includes(keyword))) {
                    totals.push({
                        row,
                        col,
                        text: cell.v.trim()
                    });
                }
            }
        }
    }
    
    return totals;
}

function analyzeDataTypes(worksheet, headers, maxRow, maxCol) {
    if (!headers.found) return null;
    
    let reviews = 0, comments = 0, discussions = 0, dates = 0, links = 0;
    
    for (let row = headers.row + 1; row < maxRow; row++) {
        for (let col = 0; col < maxCol; col++) {
            const cellAddress = XLSX.utils.encode_cell({r: row, c: col});
            const cell = worksheet[cellAddress];
            if (cell && cell.v) {
                const value = typeof cell.v === 'string' ? cell.v.toLowerCase().trim() : cell.v;
                
                if (typeof value === 'string') {
                    if (value.includes('–æ—Å') || value.includes('–æ—Ç–∑—ã–≤')) reviews++;
                    if (value.includes('—Ü—Å') || value.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä')) comments++;
                    if (value.includes('–ø—Å') || value.includes('–æ–±—Å—É–∂–¥–µ–Ω')) discussions++;
                    if (value.includes('http') || value.includes('www')) links++;
                }
                
                if (cell.v instanceof Date) dates++;
            }
        }
    }
    
    return {
        '–û—Ç–∑—ã–≤—ã (–û–°)': reviews,
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–¶–°)': comments,
        '–û–±—Å—É–∂–¥–µ–Ω–∏—è (–ü–°)': discussions,
        '–î–∞—Ç—ã': dates,
        '–°—Å—ã–ª–∫–∏': links
    };
}

function compareStructures(source, reference) {
    console.log(`\n${'='.repeat(80)}`);
    console.log(`–°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†`);
    console.log(`${'='.repeat(80)}\n`);
    
    if (!source || !reference) {
        console.log('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ - –æ–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return;
    }
    
    console.log(`üìä –û–ë–©–ï–ï –°–†–ê–í–ù–ï–ù–ò–ï:`);
    console.log(`   –ò—Å—Ö–æ–¥–Ω–∏–∫: ${source.totalSheets} –ª–∏—Å—Ç–æ–≤`);
    console.log(`   –≠—Ç–∞–ª–æ–Ω: ${reference.totalSheets} –ª–∏—Å—Ç–æ–≤\n`);
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ª–∏—Å—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const sourceMainSheet = findMainDataSheet(source);
    const referenceMainSheet = findMainDataSheet(reference);
    
    if (sourceMainSheet && referenceMainSheet) {
        console.log(`üéØ –°–†–ê–í–ù–ï–ù–ò–ï –û–°–ù–û–í–ù–´–• –õ–ò–°–¢–û–í:`);
        console.log(`   –ò—Å—Ö–æ–¥–Ω–∏–∫: "${sourceMainSheet.name}" (${sourceMainSheet.dimensions.rows}√ó${sourceMainSheet.dimensions.cols})`);
        console.log(`   –≠—Ç–∞–ª–æ–Ω: "${referenceMainSheet.name}" (${referenceMainSheet.dimensions.rows}√ó${referenceMainSheet.dimensions.cols})\n`);
        
        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if (sourceMainSheet.headers.found && referenceMainSheet.headers.found) {
            console.log(`üìã –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–ì–û–õ–û–í–ö–û–í:`);
            console.log(`   –ò—Å—Ö–æ–¥–Ω–∏–∫ (—Å—Ç—Ä–æ–∫–∞ ${sourceMainSheet.headers.row + 1}): ${sourceMainSheet.headers.columns.length} –∫–æ–ª–æ–Ω–æ–∫`);
            console.log(`   –≠—Ç–∞–ª–æ–Ω (—Å—Ç—Ä–æ–∫–∞ ${referenceMainSheet.headers.row + 1}): ${referenceMainSheet.headers.columns.length} –∫–æ–ª–æ–Ω–æ–∫\n`);
            
            compareHeaders(sourceMainSheet.headers.columns, referenceMainSheet.headers.columns);
        }
        
        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤
        console.log(`üîç –°–†–ê–í–ù–ï–ù–ò–ï –†–ê–ó–î–ï–õ–û–í:`);
        console.log(`   –ò—Å—Ö–æ–¥–Ω–∏–∫: ${sourceMainSheet.sections.length} —Ä–∞–∑–¥–µ–ª–æ–≤`);
        console.log(`   –≠—Ç–∞–ª–æ–Ω: ${referenceMainSheet.sections.length} —Ä–∞–∑–¥–µ–ª–æ–≤\n`);
        
        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        console.log(`üìä –°–†–ê–í–ù–ï–ù–ò–ï –ò–¢–û–ì–û–í:`);
        console.log(`   –ò—Å—Ö–æ–¥–Ω–∏–∫: ${sourceMainSheet.totals.length} –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫`);
        console.log(`   –≠—Ç–∞–ª–æ–Ω: ${referenceMainSheet.totals.length} –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫\n`);
    }
    
    generateRecommendations(source, reference, sourceMainSheet, referenceMainSheet);
}

function findMainDataSheet(analysis) {
    // –ò—â–µ–º –ª–∏—Å—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    return analysis.sheets.reduce((best, sheet) => {
        const score = (sheet.headers.found ? 100 : 0) + 
                     sheet.sections.length * 10 + 
                     sheet.totals.length * 5 + 
                     sheet.dimensions.rows;
        
        if (!best || score > best.score) {
            return {...sheet, score};
        }
        return best;
    }, null);
}

function compareHeaders(sourceHeaders, referenceHeaders) {
    const common = [];
    const sourceOnly = [];
    const referenceOnly = [];
    
    sourceHeaders.forEach(header => {
        const normalizedSource = header.toLowerCase().trim();
        const found = referenceHeaders.some(refHeader => 
            refHeader.toLowerCase().trim().includes(normalizedSource) ||
            normalizedSource.includes(refHeader.toLowerCase().trim())
        );
        
        if (found) {
            common.push(header);
        } else {
            sourceOnly.push(header);
        }
    });
    
    referenceHeaders.forEach(header => {
        const normalizedRef = header.toLowerCase().trim();
        const found = sourceHeaders.some(srcHeader => 
            srcHeader.toLowerCase().trim().includes(normalizedRef) ||
            normalizedRef.includes(srcHeader.toLowerCase().trim())
        );
        
        if (!found) {
            referenceOnly.push(header);
        }
    });
    
    console.log(`   ‚úÖ –û–±—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ (${common.length}): ${common.join(', ')}`);
    console.log(`   üî∏ –¢–æ–ª—å–∫–æ –≤ –∏—Å—Ö–æ–¥–Ω–∏–∫–µ (${sourceOnly.length}): ${sourceOnly.join(', ')}`);
    console.log(`   üîπ –¢–æ–ª—å–∫–æ –≤ —ç—Ç–∞–ª–æ–Ω–µ (${referenceOnly.length}): ${referenceOnly.join(', ')}\n`);
}

function generateRecommendations(source, reference, sourceMainSheet, referenceMainSheet) {
    console.log(`\n${'='.repeat(80)}`);
    console.log(`–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–¶–ï–°–°–û–†–ê`);
    console.log(`${'='.repeat(80)}\n`);
    
    console.log(`üéØ –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:`);
    
    if (sourceMainSheet && sourceMainSheet.headers.found) {
        console.log(`   üìç –°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${sourceMainSheet.headers.row + 1}`);
        console.log(`   üìè –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: ${sourceMainSheet.headers.columns.length}`);
    }
    
    console.log(`\nüîë –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –î–õ–Ø –ü–û–ò–°–ö–ê:`);
    console.log(`   üìù –û—Ç–∑—ã–≤—ã: "–û–°", "–æ—Ç–∑—ã–≤"`);
    console.log(`   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: "–¶–°", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä"`);
    console.log(`   üó£Ô∏è –û–±—Å—É–∂–¥–µ–Ω–∏—è: "–ü–°", "–æ–±—Å—É–∂–¥–µ–Ω"`);
    console.log(`   üìä –ò—Ç–æ–≥–∏: "–ò–¢–û–ì–û", "total", "—Å—É–º–º–∞"`);
    
    console.log(`\nüìã –ú–ê–ü–ü–ò–ù–ì –ö–û–õ–û–ù–û–ö:`);
    if (sourceMainSheet && sourceMainSheet.headers.found) {
        sourceMainSheet.headers.columns.forEach((header, index) => {
            console.log(`   ${String.fromCharCode(65 + index)}: "${header}"`);
        });
    }
    
    console.log(`\n‚ö†Ô∏è –û–°–û–ë–ï–ù–ù–û–°–¢–ò –û–ë–†–ê–ë–û–¢–ö–ò:`);
    console.log(`   üî∏ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π`);
    console.log(`   üî∏ –£—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É ${sourceMainSheet?.headers.row + 1 || 1} –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏`);
    console.log(`   üî∏ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ä–∞–∑–¥–µ–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º`);
    console.log(`   üî∏ –î–æ–±–∞–≤–ª—è—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    
    if (referenceMainSheet) {
        console.log(`\nüìä –≠–¢–ê–õ–û–ù–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:`);
        if (referenceMainSheet.dataAnalysis) {
            Object.entries(referenceMainSheet.dataAnalysis).forEach(([type, count]) => {
                console.log(`   ${type}: ~${count}`);
            });
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async function main() {
    try {
        const sourceAnalysis = analyzeWorkbook('source_structure_analysis.xlsx', '–ò–°–•–û–î–ù–û–ô –¢–ê–ë–õ–ò–¶–´');
        const referenceAnalysis = analyzeWorkbook('reference_structure_analysis.xlsx', '–≠–¢–ê–õ–û–ù–ù–û–ô –¢–ê–ë–õ–ò–¶–´');
        
        if (sourceAnalysis && referenceAnalysis) {
            compareStructures(sourceAnalysis, referenceAnalysis);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        const results = {
            timestamp: new Date().toISOString(),
            source: sourceAnalysis,
            reference: referenceAnalysis
        };
        
        fs.writeFileSync('structure_analysis_results.json', JSON.stringify(results, null, 2));
        console.log(`\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ structure_analysis_results.json`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error.message);
    }
}

main();