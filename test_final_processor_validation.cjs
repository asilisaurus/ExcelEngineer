const fs = require('fs');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
const { FinalGoogleAppsScriptTester } = require('./google-apps-script-testing-final.js');

async function runFinalValidation() {
  console.log('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê');
  console.log('=' .repeat(60));
  
  try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞
    const tester = new FinalGoogleAppsScriptTester();
    
    console.log('üìã –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const results = await tester.runFinalTesting();
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('=' .repeat(40));
    
    if (results && results.length > 0) {
      results.forEach((result, index) => {
        console.log(`\nüìÖ –¢–µ—Å—Ç ${index + 1}:`);
        console.log(`   –ú–µ—Å—è—Ü: ${result.month || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${result.success ? '‚úÖ –£–°–ü–ï–®–ù–û' : '‚ùå –û–®–ò–ë–ö–ê'}`);
        
        if (result.stats) {
          console.log('   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
          console.log(`   - –û—Ç–∑—ã–≤—ã: ${result.stats.reviews || 0}`);
          console.log(`   - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${result.stats.comments || 0}`);
          console.log(`   - –û–±—Å—É–∂–¥–µ–Ω–∏—è: ${result.stats.discussions || 0}`);
          console.log(`   - –í—Å–µ–≥–æ: ${result.stats.total || 0}`);
        }
        
        if (result.accuracy) {
          console.log(`   –¢–æ—á–Ω–æ—Å—Ç—å: ${result.accuracy.toFixed(2)}%`);
        }
        
        if (result.errors && result.errors.length > 0) {
          console.log('   –û—à–∏–±–∫–∏:');
          result.errors.forEach(error => {
            console.log(`   - ${error}`);
          });
        }
      });
      
      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const successCount = results.filter(r => r.success).length;
      const totalCount = results.length;
      const overallSuccess = (successCount / totalCount) * 100;
      
      console.log('\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
      console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successCount}/${totalCount}`);
      console.log(`   –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${overallSuccess.toFixed(2)}%`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${overallSuccess >= 95 ? '‚úÖ –û–¢–õ–ò–ß–ù–û' : '‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}`);
      
    } else {
      console.log('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –ø—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    await alternativeTest();
  }
}

async function alternativeTest() {
  console.log('üß™ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    const processorPath = path.join(__dirname, 'google-apps-script-processor-fixed-boundaries.js');
    if (fs.existsSync(processorPath)) {
      console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–∞–π–¥–µ–Ω');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ
      const processorContent = fs.readFileSync(processorPath, 'utf8');
      const hasFix = processorContent.includes('sectionStart = i + 1');
      
      console.log(`${hasFix ? '‚úÖ' : '‚ùå'} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${hasFix ? '–ø—Ä–∏–º–µ–Ω–µ–Ω–æ' : '–ù–ï –ü–†–ò–ú–ï–ù–ï–ù–û'}`);
      
      if (hasFix) {
        console.log('üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ findSectionBoundaries(): sectionStart = i + 1');
        console.log('üìã –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–π');
      }
      
    } else {
      console.log('‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const referenceFiles = [
      'attached_assets/–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º_ORM_–æ—Ç—á–µ—Ç_–∏—Å—Ö–æ–¥–Ω–∏–∫_1751040742705.xlsx',
      'attached_assets/–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º_ORM_–æ—Ç—á–µ—Ç_–ú–∞—Ä—Ç_2025_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_1751040742705.xlsx'
    ];
    
    console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:');
    referenceFiles.forEach(file => {
      const exists = fs.existsSync(path.join(__dirname, file));
      console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫
runFinalValidation().catch(console.error); 