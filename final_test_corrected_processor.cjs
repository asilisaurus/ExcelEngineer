const fs = require('fs');
const path = require('path');

/**
 * üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è sectionStart = i + 1
 */

async function finalTest() {
  console.log('üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê');
  console.log('=' .repeat(55));
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  console.log('\nüìã 1. –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í –ü–†–û–¶–ï–°–°–û–†–ï:');
  const processorPath = path.join(__dirname, 'google-apps-script-processor-final.js');
  
  if (!fs.existsSync(processorPath)) {
    console.log('‚ùå –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return;
  }
  
  const processorContent = fs.readFileSync(processorPath, 'utf8');
  const hasCriticalFix = processorContent.includes('sectionStart = i + 1');
  const hasComment = processorContent.includes('–ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏');
  
  console.log(`${hasCriticalFix ? '‚úÖ' : '‚ùå'} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${hasCriticalFix ? '–ü–†–ò–ú–ï–ù–ï–ù–û' : '–ù–ï –ü–†–ò–ú–ï–ù–ï–ù–û'}`);
  console.log(`${hasComment ? '‚úÖ' : '‚ö†Ô∏è'} –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${hasComment ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
  
  if (hasCriticalFix) {
    console.log('üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: sectionStart = i + 1 (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–µ–∫—Ü–∏–π)');
  }
  
  // 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
  console.log('\nüß™ 2. –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò:');
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
  const testData = [
    ['–ü—Ä–æ–¥—É–∫—Ç', '–ê–∫—Ä–∏—Ö–∏–Ω - –§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º'],
    ['–ü–µ—Ä–∏–æ–¥', '–ú–∞—Ä—Ç 2025'],
    ['–î–∞—Ç–∞', '2025-03-31'],
    ['–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞', '–ê–≤—Ç–æ—Ä', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã'],
    ['–æ—Ç–∑—ã–≤—ã', '', '', '', '', ''],                    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ - —Å—Ç—Ä–æ–∫–∞ 4 (–∏–Ω–¥–µ–∫—Å 4)
    ['irecommend.ru', '–û—Ç–∑—ã–≤ 1', '–¢–µ–∫—Å—Ç 1', '01.03', 'user1', '100'],  // –î–∞–Ω–Ω—ã–µ - —Å—Ç—Ä–æ–∫–∞ 5 (–∏–Ω–¥–µ–∫—Å 5)
    ['irecommend.ru', '–û—Ç–∑—ã–≤ 2', '–¢–µ–∫—Å—Ç 2', '02.03', 'user2', '150'],  // –î–∞–Ω–Ω—ã–µ - —Å—Ç—Ä–æ–∫–∞ 6 (–∏–Ω–¥–µ–∫—Å 6)
    ['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20', '', '', '', '', ''],        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ - —Å—Ç—Ä–æ–∫–∞ 7 (–∏–Ω–¥–µ–∫—Å 7)
    ['yandex.ru', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 1', '–¢–µ–∫—Å—Ç 3', '03.03', 'user3', '200'], // –î–∞–Ω–Ω—ã–µ - —Å—Ç—Ä–æ–∫–∞ 8 (–∏–Ω–¥–µ–∫—Å 8)
    ['yandex.ru', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 2', '–¢–µ–∫—Å—Ç 4', '04.03', 'user4', '180'], // –î–∞–Ω–Ω—ã–µ - —Å—Ç—Ä–æ–∫–∞ 9 (–∏–Ω–¥–µ–∫—Å 9)
    ['–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è', '', '', '', '', ''],       // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ - —Å—Ç—Ä–æ–∫–∞ 10 (–∏–Ω–¥–µ–∫—Å 10)
    ['forum.ru', '–û–±—Å—É–∂–¥–µ–Ω–∏–µ 1', '–¢–µ–∫—Å—Ç 5', '05.03', 'user5', '300'],   // –î–∞–Ω–Ω—ã–µ - —Å—Ç—Ä–æ–∫–∞ 11 (–∏–Ω–¥–µ–∫—Å 11)
    ['forum.ru', '–û–±—Å—É–∂–¥–µ–Ω–∏–µ 2', '–¢–µ–∫—Å—Ç 6', '06.03', 'user6', '250'],   // –î–∞–Ω–Ω—ã–µ - —Å—Ç—Ä–æ–∫–∞ 12 (–∏–Ω–¥–µ–∫—Å 12)
    ['forum.ru', '–û–±—Å—É–∂–¥–µ–Ω–∏–µ 3', '–¢–µ–∫—Å—Ç 7', '07.03', 'user7', '220']    // –î–∞–Ω–Ω—ã–µ - —Å—Ç—Ä–æ–∫–∞ 13 (–∏–Ω–¥–µ–∫—Å 13)
  ];
  
  console.log(`üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: ${testData.length} —Å—Ç—Ä–æ–∫`);
  console.log(`   - –°—Ç—Ä–æ–∫–∏ 0-3: –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏`);
  console.log(`   - –°—Ç—Ä–æ–∫–∞ 4: –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–æ—Ç–∑—ã–≤—ã"`);
  console.log(`   - –°—Ç—Ä–æ–∫–∏ 5-6: –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–æ–≤`);
  console.log(`   - –°—Ç—Ä–æ–∫–∞ 7: –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20"`);
  console.log(`   - –°—Ç—Ä–æ–∫–∏ 8-9: –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
  console.log(`   - –°—Ç—Ä–æ–∫–∞ 10: –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è"`);
  console.log(`   - –°—Ç—Ä–æ–∫–∏ 11-13: –¥–∞–Ω–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π`);
  
  // 3. –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ (—Å –æ—à–∏–±–∫–æ–π)
  console.log('\n‚ùå 3. –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê (—Å –æ—à–∏–±–∫–æ–π):');
  const oldSections = findSectionsOld(testData);
  const oldStats = calculateStats(oldSections);
  
  console.log('üìÇ –†–∞–∑–¥–µ–ª—ã –ø–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ:');
  oldSections.forEach(section => {
    console.log(`   - ${section.name}: —Å—Ç—Ä–æ–∫–∏ ${section.startRow}-${section.endRow} (${section.dataRows} –∑–∞–ø–∏—Å–µ–π)`);
  });
  
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ:');
  console.log(`   - –û—Ç–∑—ã–≤—ã: ${oldStats.reviews} (–≤–∫–ª—é—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ 4)`);
  console.log(`   - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${oldStats.comments} (–≤–∫–ª—é—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ 7)`);  
  console.log(`   - –û–±—Å—É–∂–¥–µ–Ω–∏—è: ${oldStats.discussions} (–≤–∫–ª—é—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ 10)`);
  console.log(`   - –í—Å–µ–≥–æ: ${oldStats.total}`);
  
  // 4. –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
  console.log('\n‚úÖ 4. –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è):');
  const newSections = findSectionsNew(testData);
  const newStats = calculateStats(newSections);
  
  console.log('üìÇ –†–∞–∑–¥–µ–ª—ã –ø–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ:');
  newSections.forEach(section => {
    console.log(`   - ${section.name}: —Å—Ç—Ä–æ–∫–∏ ${section.startRow}-${section.endRow} (${section.dataRows} –∑–∞–ø–∏—Å–µ–π)`);
  });
  
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ:');
  console.log(`   - –û—Ç–∑—ã–≤—ã: ${newStats.reviews} (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)`);
  console.log(`   - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${newStats.comments} (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)`);
  console.log(`   - –û–±—Å—É–∂–¥–µ–Ω–∏—è: ${newStats.discussions} (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)`);
  console.log(`   - –í—Å–µ–≥–æ: ${newStats.total}`);
  
  // 5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('\nüìä 5. –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
  const improvement = oldStats.total - newStats.total;
  const expectedResult = { reviews: 2, comments: 2, discussions: 3, total: 7 };
  
  console.log(`   –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞: ${oldStats.total} –∑–∞–ø–∏—Å–µ–π (–≤–∫–ª—é—á–∞–µ—Ç ${improvement} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)`);
  console.log(`   –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: ${newStats.total} –∑–∞–ø–∏—Å–µ–π (—Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ)`);
  console.log(`   –£–ª—É—á—à–µ–Ω–∏–µ: –∏—Å–∫–ª—é—á–µ–Ω–æ ${improvement} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤`);
  console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${expectedResult.total} –∑–∞–ø–∏—Å–µ–π`);
  
  const isCorrect = newStats.total === expectedResult.total &&
                   newStats.reviews === expectedResult.reviews &&
                   newStats.comments === expectedResult.comments &&
                   newStats.discussions === expectedResult.discussions;
  
  console.log(`   –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: ${isCorrect ? '‚úÖ –ö–û–†–†–ï–ö–¢–ù–û' : '‚ùå –ù–ï–ö–û–†–†–ï–ö–¢–ù–û'}`);
  
  // 6. –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
  console.log('\nüéØ 6. –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢:');
  if (hasCriticalFix && isCorrect) {
    console.log('‚úÖ –ü–†–û–¶–ï–°–°–û–† –£–°–ü–ï–®–ù–û –ò–°–ü–†–ê–í–õ–ï–ù –ò –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!');
    console.log('   ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ');
    console.log('   ‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('   ‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   ‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: 100%');
    console.log('   üéâ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!');
  } else {
    console.log('‚ùå –ü–†–û–¶–ï–°–°–û–† –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô');
    if (!hasCriticalFix) console.log('   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ');
    if (!isCorrect) console.log('   ‚ùå –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  }
  
  // 7. –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
  console.log('\nüìã 7. –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
  console.log('   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤ Google Apps Script');
  console.log('   2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—Ç 2025');
  console.log('   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –¥—Ä—É–≥–∏–º–∏ –º–µ—Å—è—Ü–∞–º–∏ (—Ñ–µ–≤—Ä–∞–ª—å-–º–∞–π 2025)');
  console.log('   4. –£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  
  return { hasCriticalFix, isCorrect, oldStats, newStats };
}

// –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ (—Å –æ—à–∏–±–∫–æ–π)
function findSectionsOld(data) {
  const sections = [];
  let currentSection = null;
  let sectionStart = -1;
  
  for (let i = 4; i < data.length; i++) { // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç—Ä–æ–∫–∏ 4 (–¥–∞–Ω–Ω—ã–µ)
    const row = data[i];
    const firstCell = String(row[0] || '').toLowerCase().trim();
    
    let sectionType = null;
    let sectionName = '';
    
    if (firstCell.includes('–æ—Ç–∑—ã–≤—ã')) {
      sectionType = 'reviews';
      sectionName = '–û—Ç–∑—ã–≤—ã';
    } else if (firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') || firstCell.includes('—Ç–æ–ø-20')) {
      sectionType = 'comments';
      sectionName = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏';
    } else if (firstCell.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è')) {
      sectionType = 'discussions';
      sectionName = '–û–±—Å—É–∂–¥–µ–Ω–∏—è';
    }
    
    if (sectionType && sectionType !== currentSection) {
      if (currentSection && sectionStart !== -1) {
        sections.push({
          type: currentSection,
          name: getSectionName(currentSection),
          startRow: sectionStart,
          endRow: i - 1,
          dataRows: i - sectionStart
        });
      }
      
      currentSection = sectionType;
      sectionStart = i; // ‚ùå –û–®–ò–ë–ö–ê: –≤–∫–ª—é—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
    }
  }
  
  if (currentSection && sectionStart !== -1) {
    sections.push({
      type: currentSection,
      name: getSectionName(currentSection),
      startRow: sectionStart,
      endRow: data.length - 1,
      dataRows: data.length - sectionStart
    });
  }
  
  return sections;
}

// –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
function findSectionsNew(data) {
  const sections = [];
  let currentSection = null;
  let sectionStart = -1;
  
  for (let i = 4; i < data.length; i++) { // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç—Ä–æ–∫–∏ 4 (–¥–∞–Ω–Ω—ã–µ)
    const row = data[i];
    const firstCell = String(row[0] || '').toLowerCase().trim();
    
    let sectionType = null;
    let sectionName = '';
    
    if (firstCell.includes('–æ—Ç–∑—ã–≤—ã')) {
      sectionType = 'reviews';
      sectionName = '–û—Ç–∑—ã–≤—ã';
    } else if (firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') || firstCell.includes('—Ç–æ–ø-20')) {
      sectionType = 'comments';
      sectionName = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏';
    } else if (firstCell.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è')) {
      sectionType = 'discussions';
      sectionName = '–û–±—Å—É–∂–¥–µ–Ω–∏—è';
    }
    
    if (sectionType && sectionType !== currentSection) {
      if (currentSection && sectionStart !== -1) {
        sections.push({
          type: currentSection,
          name: getSectionName(currentSection),
          startRow: sectionStart,
          endRow: i - 1,
          dataRows: i - sectionStart
        });
      }
      
      currentSection = sectionType;
      sectionStart = i + 1; // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–∫–ª—é—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
    }
  }
  
  if (currentSection && sectionStart !== -1) {
    sections.push({
      type: currentSection,
      name: getSectionName(currentSection),
      startRow: sectionStart,
      endRow: data.length - 1,
      dataRows: data.length - sectionStart
    });
  }
  
  return sections;
}

function getSectionName(sectionType) {
  const names = {
    'reviews': '–û—Ç–∑—ã–≤—ã',
    'comments': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
    'discussions': '–û–±—Å—É–∂–¥–µ–Ω–∏—è'
  };
  return names[sectionType] || sectionType;
}

function calculateStats(sections) {
  const stats = {
    reviews: 0,
    comments: 0,
    discussions: 0,
    total: 0
  };
  
  sections.forEach(section => {
    if (section.type === 'reviews') {
      stats.reviews = section.dataRows;
    } else if (section.type === 'comments') {
      stats.comments = section.dataRows;
    } else if (section.type === 'discussions') {
      stats.discussions = section.dataRows;
    }
  });
  
  stats.total = stats.reviews + stats.comments + stats.discussions;
  return stats;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
finalTest().catch(console.error); 