const fs = require('fs');
const path = require('path');

async function ultimateFinalTest() {
  console.log('üöÄüöÄüöÄ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ üöÄüöÄüöÄ');
  console.log('='.repeat(70));
  
  try {
    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (8 —Å–µ–∫)...');
    await new Promise(resolve => setTimeout(resolve, 8000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try {
      await fetch('http://localhost:5000/api/health');
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
    } catch {
      console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º...');
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É Google Sheets...');
    const response = await fetch('http://localhost:5000/api/import-google-sheets', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url: 'https://docs.google.com/spreadsheets/d/1z4KJfXSNaV8Zw5Qi4hKdVsoKvt9GTSrweWv45URzB4I/edit?usp=sharing'
      })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÅ ID —Ñ–∞–π–ª–∞: ${result.fileId}`);
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    let attempts = 0;
    const maxAttempts = 20;
    
    while (attempts < maxAttempts) {
      console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (${attempts + 1}/${maxAttempts})...`);
      
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const statusResponse = await fetch(`http://localhost:5000/api/files/${result.fileId}`);
      const fileInfo = await statusResponse.json();
      
      if (fileInfo.status === 'completed') {
        console.log('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        const files = fs.readdirSync('uploads');
        const today = new Date().toISOString().slice(0, 10).replace(/-/g, '');
        const resultFiles = files.filter(f => f.includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç') && f.includes(today));
        
        if (resultFiles.length > 0) {
          const latestFile = resultFiles[resultFiles.length - 1];
          console.log(`üìÅ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${latestFile}`);
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
          const ExcelJS = require('exceljs');
          const workbook = new ExcelJS.Workbook();
          await workbook.xlsx.readFile(path.join('uploads', latestFile));
          const worksheet = workbook.getWorksheet(1);
          
          // –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –∏ –¥–∞–Ω–Ω—ã–µ
          let reviewCount = 0;
          let commentCount = 0;
          let discussionCount = 0;
          let totalDataRows = 0;
          let currentSection = '';
          
          const sections = [];
          
          worksheet.eachRow((row, rowNumber) => {
            if (rowNumber <= 4) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            
            const cellA = row.getCell(1).value;
            if (cellA && typeof cellA === 'string') {
              const cellStr = cellA.toString().trim();
              
              if (cellStr === '–û—Ç–∑—ã–≤—ã') {
                currentSection = 'reviews';
                sections.push('–û—Ç–∑—ã–≤—ã');
                return;
              } else if (cellStr.includes('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')) {
                currentSection = 'comments';
                sections.push(cellStr);
                return;
              } else if (cellStr.includes('–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è')) {
                currentSection = 'discussions';
                sections.push(cellStr);
                return;
              }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ
            const hasData = cellA && cellA !== '–ü–ª–æ—â–∞–¥–∫–∞' && 
                           !cellA.toString().startsWith('–°—É–º–º–∞—Ä–Ω–æ–µ') &&
                           !cellA.toString().startsWith('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ') &&
                           !cellA.toString().startsWith('–î–æ–ª—è') &&
                           !cellA.toString().startsWith('*–ë–µ–∑') &&
                           !cellA.toString().startsWith('–ü–ª–æ—â–∞–¥–∫–∏');
            
            if (hasData) {
              totalDataRows++;
              if (currentSection === 'reviews') reviewCount++;
              else if (currentSection === 'comments') commentCount++;
              else if (currentSection === 'discussions') discussionCount++;
            }
          });
          
          console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
          console.log(`üìù –û—Ç–∑—ã–≤—ã: ${reviewCount}`);
          console.log(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${commentCount}`);
          console.log(`üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: ${discussionCount}`);
          console.log(`üìã –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${totalDataRows}`);
          console.log(`üìë –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã: ${sections.join(', ')}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
          const row1 = worksheet.getRow(1);
          const headerColor = row1.getCell(1).fill?.fgColor?.argb;
          const headerText = row1.getCell(1).value;
          
          console.log(`\nüé® –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:`);
          console.log(`üìë –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${headerText}`);
          console.log(`üé® –¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞: ${headerColor}`);
          
          // –ò—Ç–æ–≥–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
          const checks = {
            correctReviews: reviewCount === 18,
            correctComments: commentCount === 519,
            hasDiscussions: discussionCount > 0,
            hasAllSections: sections.length === 3,
            goodTotalRows: totalDataRows >= 600,
            correctHeader: headerText === '–ü—Ä–æ–¥—É–∫—Ç',
            correctColor: headerColor === 'FF2D1341'
          };
          
          console.log('\nüèÜ –ò–¢–û–ì–û–í–´–ï –ü–†–û–í–ï–†–ö–ò:');
          Object.entries(checks).forEach(([check, passed]) => {
            console.log(`${passed ? '‚úÖ' : '‚ùå'} ${check}: ${passed ? '–ü–†–û–ô–î–ï–ù–û' : '–ù–ï –ü–†–û–ô–î–ï–ù–û'}`);
          });
          
          const passedCount = Object.values(checks).filter(Boolean).length;
          const totalChecks = Object.values(checks).length;
          
          console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: ${passedCount}/${totalChecks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ`);
          
          if (passedCount >= 6) { // –ú–∏–Ω–∏–º—É–º 6 –∏–∑ 7 –ø—Ä–æ–≤–µ—Ä–æ–∫
            console.log('\nüéâüéâüéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û! üéâüéâüéâ');
            console.log('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:');
            console.log(`  üìù ${reviewCount} –æ—Ç–∑—ã–≤–æ–≤ ${reviewCount === 18 ? '‚úÖ' : '‚ö†Ô∏è'}`);
            console.log(`  üí¨ ${commentCount} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ${commentCount === 519 ? '‚úÖ' : '‚ö†Ô∏è'}`);
            console.log(`  üî• ${discussionCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π ‚úÖ`);
            console.log(`  üìã ${totalDataRows} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö ‚úÖ`);
            console.log(`  üé® –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚úÖ`);
            console.log('\nüöÄ –ì–û–¢–û–í–û –ö –ü–†–û–î–ê–ö–®–ù–£!');
            return true;
          } else {
            console.log('\n‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò');
            console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${passedCount}/${totalChecks} –ø—Ä–æ–≤–µ—Ä–æ–∫`);
            return false;
          }
          
        } else {
          console.log('‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return false;
        }
        
      } else if (fileInfo.status === 'error') {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', fileInfo.errorMessage);
        return false;
      }
      
      attempts++;
    }
    
    console.log('‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
    return false;
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç
ultimateFinalTest().then(success => {
  if (success) {
    console.log('\nüéäüéäüéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! üéäüéäüéä');
    console.log('üî• ExcelEngineer –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    console.log('üíº –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ–¥–æ–±—Ä–µ–Ω–∞!');
  } else {
    console.log('\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê');
  }
}).catch(error => {
  console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
}); 