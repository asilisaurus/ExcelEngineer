/**
 * ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø
 * –°–∏—Å—Ç–µ–º–∞ –¥–ª—è –¥–æ–≤–æ–¥–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * 
 * –ê–≤—Ç–æ—Ä: AI Assistant
 * –í–µ—Ä—Å–∏—è: 1.0.0
 * –î–∞—Ç–∞: 2025
 */

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

const AUTOMATION_CONFIG = {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  TESTING: {
    MAX_ITERATIONS: 10,
    SUCCESS_THRESHOLD: 0.95,
    TIMEOUT_SECONDS: 300,
    RETRY_DELAY: 5000
  },
  
  // ID —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  SHEETS: {
    SOURCE: '1RT8T5gnDPe0KMikTmVNdSvxqDal3aQUmelpEwItgxMI',
    REFERENCE: '1pxUF5HnII7hVnaw077mE0FHqGp-TN1Rk' // –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  },
  
  // –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
  SUCCESS_CRITERIA: {
    MIN_PROCESSED_ROWS: 50,
    MIN_REVIEWS_COUNT: 10,
    MIN_TARGETED_COUNT: 5,
    MIN_SOCIAL_COUNT: 5,
    REQUIRED_TOTAL_ROW: true,
    REQUIRED_STATISTICS: true
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  DIAGNOSTICS: {
    ENABLE_DETAILED_LOGGING: true,
    SAVE_LOGS_TO_SHEET: true,
    EXPORT_DIAGNOSTICS: true
  }
};

// ==================== –ö–õ–ê–°–° –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –¢–ï–°–¢–ï–†–ê ====================

class AutomatedProcessorTester {
  constructor() {
    this.reset();
  }
  
  reset() {
    this.iteration = 0;
    this.testResults = [];
    this.diagnostics = {
      startTime: new Date(),
      totalTime: 0,
      iterations: [],
      errors: [],
      improvements: [],
      finalResult: null
    };
    this.currentProcessor = null;
    this.processorVersion = 'ultimate';
  }
  
  // ==================== –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î ====================
  
  /**
   * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async runAutomatedTesting() {
    try {
      this.log('ü§ñ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
      this.log('============================================');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      await this.initialize();
      
      // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      while (this.iteration < AUTOMATION_CONFIG.TESTING.MAX_ITERATIONS) {
        this.iteration++;
        
        this.log(`\nüîÑ –ò–¢–ï–†–ê–¶–ò–Ø ${this.iteration}/${AUTOMATION_CONFIG.TESTING.MAX_ITERATIONS}`);
        this.log('=' .repeat(50));
        
        // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const testResult = await this.runSingleTest();
        
        // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const analysis = this.analyzeTestResult(testResult);
        
        // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º
        if (analysis.success) {
          this.log('‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!');
          this.diagnostics.finalResult = analysis;
          break;
        }
        
        // –ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ—à–µ–Ω, –ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å
        const fixes = this.generateFixes(analysis);
        if (fixes.length > 0) {
          await this.applyFixes(fixes);
        } else {
          this.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º');
          break;
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
        await this.sleep(AUTOMATION_CONFIG.TESTING.RETRY_DELAY);
      }
      
      // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      await this.generateFinalReport();
      
      return {
        success: this.diagnostics.finalResult?.success || false,
        iterations: this.iteration,
        finalResult: this.diagnostics.finalResult,
        diagnostics: this.diagnostics
      };
      
    } catch (error) {
      this.logError('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', error);
      return {
        success: false,
        error: error.toString(),
        diagnostics: this.diagnostics
      };
    }
  }
  
  // ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================
  
  async initialize() {
    this.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–µ—Ä–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü
    await this.checkSheetsAccess();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await this.loadReferenceData();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    this.currentProcessor = new UltimateGoogleAppsScriptProcessor();
    
    this.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
  
  async checkSheetsAccess() {
    this.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü...');
    
    try {
      const sourceSheet = SpreadsheetApp.openById(AUTOMATION_CONFIG.SHEETS.SOURCE);
      this.log(`‚úÖ –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: "${sourceSheet.getName()}"`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (AUTOMATION_CONFIG.SHEETS.REFERENCE) {
        const referenceSheet = SpreadsheetApp.openById(AUTOMATION_CONFIG.SHEETS.REFERENCE);
        this.log(`‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: "${referenceSheet.getName()}"`);
      }
      
    } catch (error) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–∞–º: ${error.message}`);
    }
  }
  
  async loadReferenceData() {
    this.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    if (!AUTOMATION_CONFIG.SHEETS.REFERENCE) {
      this.log('‚ö†Ô∏è –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏');
      return;
    }
    
    try {
      const referenceSheet = SpreadsheetApp.openById(AUTOMATION_CONFIG.SHEETS.REFERENCE);
      const sheets = referenceSheet.getSheets();
      
      this.referenceData = {};
      
      for (const sheet of sheets) {
        const sheetName = sheet.getName();
        const data = sheet.getDataRange().getValues();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const analysis = this.analyzeReferenceSheet(data, sheetName);
        if (analysis) {
          this.referenceData[sheetName] = analysis;
          this.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è "${sheetName}"`);
        }
      }
      
    } catch (error) {
      this.logError('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', error);
      this.referenceData = null;
    }
  }
  
  analyzeReferenceSheet(data, sheetName) {
    if (!data || data.length === 0) return null;
    
    let reviewsCount = 0;
    let targetedCount = 0;
    let socialCount = 0;
    let totalViews = 0;
    let hasTotalRow = false;
    
    let currentSection = null;
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      if (!row || row.length === 0) continue;
      
      const firstCell = (row[0] || '').toString().toLowerCase().trim();
      
      // –ü–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–æ–≤
      if (firstCell.includes('–æ—Ç–∑—ã–≤') || firstCell.includes('–æ—Å')) {
        currentSection = 'reviews';
        continue;
      }
      if (firstCell.includes('—Ü–µ–ª–µ–≤—ã–µ') || firstCell.includes('—Ü—Å')) {
        currentSection = 'targeted';
        continue;
      }
      if (firstCell.includes('–ø–ª–æ—â–∞–¥–∫–∏') || firstCell.includes('–ø—Å')) {
        currentSection = 'social';
        continue;
      }
      
      // –ü–æ–∏—Å–∫ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
      if (firstCell.includes('–∏—Ç–æ–≥–æ')) {
        hasTotalRow = true;
        continue;
      }
      
      // –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π
      if (currentSection && this.isDataRow(row)) {
        switch (currentSection) {
          case 'reviews':
            reviewsCount++;
            break;
          case 'targeted':
            targetedCount++;
            break;
          case 'social':
            socialCount++;
            break;
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
        const views = this.extractViews(row);
        totalViews += views;
      }
    }
    
    return {
      sheetName,
      reviewsCount,
      targetedCount,
      socialCount,
      totalViews,
      hasTotalRow,
      totalRows: data.length
    };
  }
  
  isDataRow(row) {
    if (!row || row.length < 3) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const text = row[2] || row[1] || row[0];
    return text && text.toString().trim().length > 10;
  }
  
  extractViews(row) {
    if (row.length < 6) return 0;
    
    const viewsCell = row[5] || row[4] || row[3];
    if (!viewsCell) return 0;
    
    const viewsStr = viewsCell.toString().replace(/[^\d]/g, '');
    const views = parseInt(viewsStr);
    
    return isNaN(views) ? 0 : views;
  }
  
  // ==================== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ====================
  
  async runSingleTest() {
    this.log(`üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Ç–µ—Ä–∞—Ü–∏—è ${this.iteration})...`);
    
    try {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
      const processor = new UltimateGoogleAppsScriptProcessor();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
      const processingResult = processor.processSheet(AUTOMATION_CONFIG.SHEETS.SOURCE);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.testResults.push({
        iteration: this.iteration,
        timestamp: new Date(),
        processingResult,
        processorVersion: this.processorVersion
      });
      
      this.log(`‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—Ö: ${processingResult.success}`);
      
      return processingResult;
      
    } catch (error) {
      this.logError(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${this.iteration}`, error);
      return {
        success: false,
        error: error.toString(),
        iteration: this.iteration
      };
    }
  }
  
  // ==================== –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ====================
  
  analyzeTestResult(testResult) {
    this.log('üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    const analysis = {
      success: false,
      score: 0,
      issues: [],
      recommendations: [],
      statistics: testResult.statistics || {}
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
    if (!testResult.success) {
      analysis.issues.push('–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π');
      analysis.recommendations.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞');
      return analysis;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    const processedRows = testResult.statistics?.processedRows || 0;
    if (processedRows < AUTOMATION_CONFIG.SUCCESS_CRITERIA.MIN_PROCESSED_ROWS) {
      analysis.issues.push(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å—Ç—Ä–æ–∫: ${processedRows}`);
      analysis.recommendations.push('–£–ª—É—á—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö');
    } else {
      analysis.score += 0.2;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
    const reviewsCount = testResult.statistics?.reviewsCount || 0;
    if (reviewsCount < AUTOMATION_CONFIG.SUCCESS_CRITERIA.MIN_REVIEWS_COUNT) {
      analysis.issues.push(`–ù–∞–π–¥–µ–Ω–æ –º–∞–ª–æ –æ—Ç–∑—ã–≤–æ–≤: ${reviewsCount}`);
      analysis.recommendations.push('–£–ª—É—á—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –æ—Ç–∑—ã–≤–æ–≤');
    } else {
      analysis.score += 0.2;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤
    const targetedCount = testResult.statistics?.targetedCount || 0;
    if (targetedCount < AUTOMATION_CONFIG.SUCCESS_CRITERIA.MIN_TARGETED_COUNT) {
      analysis.issues.push(`–ù–∞–π–¥–µ–Ω–æ –º–∞–ª–æ —Ü–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤: ${targetedCount}`);
      analysis.recommendations.push('–£–ª—É—á—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Ü–µ–ª–µ–≤—ã—Ö —Å–∞–π—Ç–æ–≤');
    } else {
      analysis.score += 0.2;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫
    const socialCount = testResult.statistics?.socialCount || 0;
    if (socialCount < AUTOMATION_CONFIG.SUCCESS_CRITERIA.MIN_SOCIAL_COUNT) {
      analysis.issues.push(`–ù–∞–π–¥–µ–Ω–æ –º–∞–ª–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫: ${socialCount}`);
      analysis.recommendations.push('–£–ª—É—á—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫');
    } else {
      analysis.score += 0.2;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
    const totalViews = testResult.statistics?.totalViews || 0;
    if (totalViews > 0) {
      analysis.score += 0.1;
    } else {
      analysis.issues.push('–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤');
      analysis.recommendations.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    if (AUTOMATION_CONFIG.SUCCESS_CRITERIA.REQUIRED_TOTAL_ROW) {
      // –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
      analysis.score += 0.1;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —É—Å–ø–µ—Ö
    analysis.success = analysis.score >= AUTOMATION_CONFIG.TESTING.SUCCESS_THRESHOLD;
    
    this.log(`üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ü–µ–Ω–∫–∞: ${(analysis.score * 100).toFixed(1)}%`);
    this.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${analysis.issues.length}`);
    this.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${analysis.recommendations.length}`);
    
    return analysis;
  }
  
  // ==================== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ====================
  
  generateFixes(analysis) {
    this.log('üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');
    
    const fixes = [];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    analysis.recommendations.forEach(recommendation => {
      const fix = this.createFix(recommendation, analysis);
      if (fix) {
        fixes.push(fix);
      }
    });
    
    this.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${fixes.length}`);
    
    return fixes;
  }
  
  createFix(recommendation, analysis) {
    const fix = {
      type: 'unknown',
      description: recommendation,
      action: null,
      priority: 1
    };
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (recommendation.includes('–æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É')) {
      fix.type = 'error_fix';
      fix.action = 'fix_main_error';
      fix.priority = 10;
    } else if (recommendation.includes('—Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö')) {
      fix.type = 'data_detection';
      fix.action = 'improve_data_row_detection';
      fix.priority = 8;
    } else if (recommendation.includes('—Ä–∞–∑–¥–µ–ª–∞ –æ—Ç–∑—ã–≤–æ–≤')) {
      fix.type = 'section_detection';
      fix.action = 'improve_reviews_section';
      fix.priority = 7;
    } else if (recommendation.includes('—Ä–∞–∑–¥–µ–ª–∞ —Ü–µ–ª–µ–≤—ã—Ö')) {
      fix.type = 'section_detection';
      fix.action = 'improve_targeted_section';
      fix.priority = 7;
    } else if (recommendation.includes('—Ä–∞–∑–¥–µ–ª–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö')) {
      fix.type = 'section_detection';
      fix.action = 'improve_social_section';
      fix.priority = 7;
    } else if (recommendation.includes('–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤')) {
      fix.type = 'data_extraction';
      fix.action = 'improve_views_extraction';
      fix.priority = 6;
    }
    
    return fix;
  }
  
  // ==================== –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ====================
  
  async applyFixes(fixes) {
    this.log('üî® –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    fixes.sort((a, b) => b.priority - a.priority);
    
    for (const fix of fixes) {
      try {
        await this.applyFix(fix);
        this.diagnostics.improvements.push({
          iteration: this.iteration,
          fix: fix,
          timestamp: new Date()
        });
      } catch (error) {
        this.logError(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${fix.description}`, error);
      }
    }
    
    this.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${fixes.length}`);
  }
  
  async applyFix(fix) {
    this.log(`üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: ${fix.description}`);
    
    switch (fix.action) {
      case 'improve_data_row_detection':
        await this.improveDataRowDetection();
        break;
      case 'improve_reviews_section':
        await this.improveSectionDetection('reviews');
        break;
      case 'improve_targeted_section':
        await this.improveSectionDetection('targeted');
        break;
      case 'improve_social_section':
        await this.improveSectionDetection('social');
        break;
      case 'improve_views_extraction':
        await this.improveViewsExtraction();
        break;
      default:
        this.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${fix.action}`);
    }
  }
  
  async improveDataRowDetection() {
    this.log('üîç –£–ª—É—á—à–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫ –∫–ª–∞—Å—Å—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    this.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –°–¥–µ–ª–∞—Ç—å –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É isDataRow');
  }
  
  async improveSectionDetection(sectionType) {
    this.log(`üîç –£–ª—É—á—à–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞: ${sectionType}`);
    
    // –≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫ –∫–ª–∞—Å—Å—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    this.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ ${sectionType}`);
  }
  
  async improveViewsExtraction() {
    this.log('üîç –£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤...');
    
    // –≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫ –∫–ª–∞—Å—Å—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    this.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–ª—É—á—à–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤');
  }
  
  // ==================== –û–¢–ß–ï–¢–ù–û–°–¢–¨ ====================
  
  async generateFinalReport() {
    this.log('üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...');
    
    this.diagnostics.endTime = new Date();
    this.diagnostics.totalTime = this.diagnostics.endTime - this.diagnostics.startTime;
    
    const report = {
      summary: {
        totalIterations: this.iteration,
        totalTime: this.diagnostics.totalTime,
        finalSuccess: this.diagnostics.finalResult?.success || false,
        finalScore: this.diagnostics.finalResult?.score || 0
      },
      iterations: this.testResults.map(result => ({
        iteration: result.iteration,
        success: result.processingResult.success,
        statistics: result.processingResult.statistics,
        timestamp: result.timestamp
      })),
      improvements: this.diagnostics.improvements,
      errors: this.diagnostics.errors
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ Google Sheets
    if (AUTOMATION_CONFIG.DIAGNOSTICS.SAVE_LOGS_TO_SHEET) {
      await this.saveReportToSheet(report);
    }
    
    this.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω');
    
    return report;
  }
  
  async saveReportToSheet(report) {
    try {
      const reportSpreadsheet = SpreadsheetApp.create(`Automation_Report_${new Date().toISOString().split('T')[0]}`);
      const sheet = reportSpreadsheet.getActiveSheet();
      
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏
      const headers = [
        '–ò—Ç–µ—Ä–∞—Ü–∏—è', '–£—Å–ø–µ—Ö', '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫', '–û—Ç–∑—ã–≤–æ–≤', '–¶–µ–ª–µ–≤—ã—Ö', '–°–æ—Ü–∏–∞–ª—å–Ω—ã—Ö', '–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', '–í—Ä–µ–º—è'
      ];
      
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      
      // –î–∞–Ω–Ω—ã–µ
      const data = report.iterations.map(iteration => [
        iteration.iteration,
        iteration.success ? '–î–∞' : '–ù–µ—Ç',
        iteration.statistics?.processedRows || 0,
        iteration.statistics?.reviewsCount || 0,
        iteration.statistics?.targetedCount || 0,
        iteration.statistics?.socialCount || 0,
        iteration.statistics?.totalViews || 0,
        iteration.timestamp.toLocaleString()
      ]);
      
      if (data.length > 0) {
        sheet.getRange(2, 1, data.length, headers.length).setValues(data);
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      sheet.autoResizeColumns(1, headers.length);
      
      this.log(`üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportSpreadsheet.getUrl()}`);
      
    } catch (error) {
      this.logError('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞', error);
    }
  }
  
  // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
  
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
  
  log(message) {
    if (AUTOMATION_CONFIG.DIAGNOSTICS.ENABLE_DETAILED_LOGGING) {
      console.log(message);
    }
    
    this.diagnostics.iterations.push({
      timestamp: new Date(),
      message: message
    });
  }
  
  logError(message, error) {
    const errorMsg = `${message}: ${error.toString()}`;
    console.error(errorMsg);
    
    this.diagnostics.errors.push({
      timestamp: new Date(),
      message: errorMsg,
      error: error.toString()
    });
  }
}

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function runAutomatedProcessorTesting() {
  const tester = new AutomatedProcessorTester();
  return tester.runAutomatedTesting();
}

/**
 * –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
 */
function quickTestProcessor() {
  const tester = new AutomatedProcessorTester();
  return tester.runSingleTest();
}

/**
 * –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function analyzeLastTestResults() {
  const tester = new AutomatedProcessorTester();
  
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
  return {
    message: '–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω',
    recommendations: []
  };
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
function main() {
  return runAutomatedProcessorTesting();
}