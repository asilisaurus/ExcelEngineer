/**
 * üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ google-apps-script-processor-final.js
 * 
 * –ê–≤—Ç–æ—Ä: AI Assistant
 * –î–∞—Ç–∞: 2025
 */

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ====================

const TEST_CONFIG = {
  // URL –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  SOURCE_URL: 'https://docs.google.com/spreadsheets/d/1RT8T5gnDPe0KMikTmVNdSvxqDal3aQUmelpEwItgxMI/edit?usp=sharing',
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  TESTING: {
    ENABLE_DEBUG: true,
    LOG_DETAILS: true,
    VALIDATE_RESULTS: true
  }
};

// ==================== –ö–õ–ê–°–° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ====================

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
 */
class FixedProcessorTester {
  constructor() {
    this.testResults = {
      totalTests: 0,
      passedTests: 0,
      failedTests: 0,
      details: [],
      processingTime: 0
    };
    
    this.processor = new FinalMonthlyReportProcessor();
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
   */
  async runTesting() {
    const startTime = Date.now();
    
    console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê');
    console.log('==========================================');
    console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${TEST_CONFIG.SOURCE_URL}`);
    
    try {
      // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      console.log('\nüìã –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•...');
      const sourceData = await this.prepareSourceData();
      
      // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      console.log('\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò...');
      await this.testProcessing(sourceData);
      
      // 3. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      this.analyzeResults();
      
      this.testResults.processingTime = Date.now() - startTime;
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      this.testResults.details.push({
        test: '–û–±—â–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        status: 'FAILED',
        error: error.toString()
      });
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async prepareSourceData() {
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      const spreadsheet = SpreadsheetApp.openByUrl(TEST_CONFIG.SOURCE_URL);
      const sheets = spreadsheet.getSheets();
      
      const sourceData = {};
      
      for (const sheet of sheets) {
        const sheetName = sheet.getName();
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã
        if (this.isReferenceSheet(sheetName)) {
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –ª–∏—Å—Ç "${sheetName}"`);
          continue;
        }
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-–º–µ—Å—è—á–Ω—ã–µ –ª–∏—Å—Ç—ã
        if (this.isNonMonthlySheet(sheetName)) {
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-–º–µ—Å—è—á–Ω—ã–π –ª–∏—Å—Ç "${sheetName}"`);
          continue;
        }
        
        const data = sheet.getDataRange().getValues();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞
        const monthInfo = this.detectMonthFromSheet(sheetName, data);
        if (monthInfo) {
          sourceData[monthInfo.key] = {
            sheet: sheet,
            data: data,
            monthInfo: monthInfo
          };
          
          console.log(`‚úÖ –õ–∏—Å—Ç "${sheetName}" -> ${monthInfo.name} ${monthInfo.year}`);
        }
      }
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(sourceData).length} –ª–∏—Å—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏`);
      return sourceData;
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–∏—Å—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–º
   */
  isReferenceSheet(sheetName) {
    const referencePatterns = [
      ' (—ç—Ç–∞–ª–æ–Ω)',
      ' (reference)', 
      ' (etalon)'
    ];
    
    return referencePatterns.some(pattern => 
      sheetName.includes(pattern)
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–∏—Å—Ç –Ω–µ-–º–µ—Å—è—á–Ω—ã–º
   */
  isNonMonthlySheet(sheetName) {
    const excludedPatterns = [
      '–±—Ä–∏—Ñ',
      '—Ä–µ–ø—É—Ç–∞—Ü–∏—è',
      '–º–µ–¥–∏–∞–ø–ª–∞–Ω',
      '—ç—Ç–∞–ª–æ–Ω',
      'reference',
      'etalon'
    ];
    
    const lowerSheetName = sheetName.toLowerCase();
    return excludedPatterns.some(pattern => 
      lowerSheetName.includes(pattern.toLowerCase())
    );
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞
   */
  detectMonthFromSheet(sheetName, data) {
    const lowerSheetName = sheetName.toLowerCase();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞
    let detectedYear = 2025; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if (lowerSheetName.includes('2024') || lowerSheetName.match(/\b24\b/)) {
      detectedYear = 2024;
    } else if (lowerSheetName.includes('2023') || lowerSheetName.match(/\b23\b/)) {
      detectedYear = 2023;
    } else if (lowerSheetName.includes('2022') || lowerSheetName.match(/\b22\b/)) {
      detectedYear = 2022;
    }
    
    const months = [
      { name: '–Ø–Ω–≤–∞—Ä—å', short: '–Ø–Ω–≤', number: 1 },
      { name: '–§–µ–≤—Ä–∞–ª—å', short: '–§–µ–≤', number: 2 },
      { name: '–ú–∞—Ä—Ç', short: '–ú–∞—Ä', number: 3 },
      { name: '–ê–ø—Ä–µ–ª—å', short: '–ê–ø—Ä', number: 4 },
      { name: '–ú–∞–π', short: '–ú–∞–π', number: 5 },
      { name: '–ò—é–Ω—å', short: '–ò—é–Ω', number: 6 },
      { name: '–ò—é–ª—å', short: '–ò—é–ª', number: 7 },
      { name: '–ê–≤–≥—É—Å—Ç', short: '–ê–≤–≥', number: 8 },
      { name: '–°–µ–Ω—Ç—è–±—Ä—å', short: '–°–µ–Ω', number: 9 },
      { name: '–û–∫—Ç—è–±—Ä—å', short: '–û–∫—Ç', number: 10 },
      { name: '–ù–æ—è–±—Ä—å', short: '–ù–æ—è', number: 11 },
      { name: '–î–µ–∫–∞–±—Ä—å', short: '–î–µ–∫', number: 12 }
    ];
    
    // –ü–æ–∏—Å–∫ –º–µ—Å—è—Ü–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞
    for (const month of months) {
      const exactMatches = [
        month.name.toLowerCase(),
        month.short.toLowerCase(),
        `${month.short}${detectedYear.toString().slice(-2)}`,
        `${month.name}${detectedYear.toString().slice(-2)}`,
        `${month.short}${detectedYear}`,
        `${month.name}${detectedYear}`
      ];
      
      for (const exactMatch of exactMatches) {
        if (lowerSheetName === exactMatch || lowerSheetName.includes(exactMatch)) {
          return {
            key: `${month.short}${detectedYear}`,
            name: month.name,
            short: month.short,
            number: month.number,
            year: detectedYear,
            detectedFrom: 'sheet'
          };
        }
      }
    }
    
    return null;
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  async testProcessing(sourceData) {
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü
    const testMonths = Object.keys(sourceData);
    
    for (const monthKey of testMonths) {
      const sourceInfo = sourceData[monthKey];
      
      console.log(`\nüìÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: ${sourceInfo.monthInfo.name} ${sourceInfo.monthInfo.year}`);
      console.log('='.repeat(60));
      
      await this.testMonthProcessing(sourceInfo);
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
   */
  async testMonthProcessing(sourceDataInfo) {
    try {
      const { sheet, data, monthInfo } = sourceDataInfo;
      
      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${monthInfo.name} ${monthInfo.year}...`);
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const testSpreadsheet = SpreadsheetApp.create(`–¢–µ—Å—Ç_${monthInfo.name}_${monthInfo.year}_–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π`);
      const testSheet = testSpreadsheet.getActiveSheet();
      
      // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      testSheet.getRange(1, 1, data.length, data[0].length).setValues(data);
      
      // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–∞
      testSheet.setName(`${monthInfo.name} ${monthInfo.year}`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
      const result = this.processor.processReport(testSpreadsheet.getId(), testSheet.getName());
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.analyzeProcessingResult(monthInfo, result);
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
      try {
        DriveApp.getFileById(testSpreadsheet.getId()).setTrashed(true);
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É:', error.message);
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${sourceDataInfo.monthInfo.name} ${sourceDataInfo.monthInfo.year}:`, error);
      this.recordTestResult(sourceDataInfo.monthInfo, null, error.toString());
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  analyzeProcessingResult(monthInfo, result) {
    if (!result.success) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.error}`);
      this.recordTestResult(monthInfo, null, result.error);
      return;
    }
    
    const stats = result.statistics;
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${stats.totalRows}`);
    console.log(`   - –û—Ç–∑—ã–≤—ã: ${stats.reviewsCount}`);
    console.log(`   - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20: ${stats.commentsTop20Count}`);
    console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: ${stats.activeDiscussionsCount}`);
    console.log(`   - –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${stats.totalViews}`);
    console.log(`   - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${stats.processingTime}–º—Å`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const qualityScore = this.calculateQualityScore(stats);
    
    console.log(`üìà –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${(qualityScore * 100).toFixed(1)}%`);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    this.recordTestResult(monthInfo, stats, null, qualityScore);
  }

  /**
   * –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  calculateQualityScore(stats) {
    let score = 0;
    let totalChecks = 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (stats.totalRows > 0) {
      score += 0.2;
      totalChecks++;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–∑—ã–≤–æ–≤
    if (stats.reviewsCount > 0) {
      score += 0.3;
      totalChecks++;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¢–æ–ø-20
    if (stats.commentsTop20Count > 0) {
      score += 0.25;
      totalChecks++;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π
    if (stats.activeDiscussionsCount > 0) {
      score += 0.25;
      totalChecks++;
    }
    
    return totalChecks > 0 ? score / totalChecks : 0;
  }

  /**
   * –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
   */
  recordTestResult(month, stats, error = null, qualityScore = 0) {
    this.testResults.totalTests++;
    
    const testDetail = {
      month: `${month.name} ${month.year}`,
      status: error ? 'FAILED' : 'PASSED',
      qualityScore: qualityScore,
      statistics: stats,
      error: error
    };
    
    this.testResults.details.push(testDetail);
    
    if (testDetail.status === 'PASSED') {
      this.testResults.passedTests++;
      console.log(`‚úÖ ${month.name} ${month.year}: –ü–†–û–ô–î–ï–ù (${(qualityScore * 100).toFixed(1)}%)`);
    } else {
      this.testResults.failedTests++;
      console.log(`‚ùå ${month.name} ${month.year}: –ü–†–û–í–ê–õ–ï–ù`);
      if (error) console.log(`   –û—à–∏–±–∫–∞: ${error}`);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  analyzeResults() {
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('=====================================');
    
    const successRate = this.testResults.totalTests > 0 ? 
      (this.testResults.passedTests / this.testResults.totalTests) * 100 : 0;
    
    console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${successRate.toFixed(1)}%`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.passedTests}/${this.testResults.totalTests}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.failedTests}/${this.testResults.totalTests}`);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${(this.testResults.processingTime / 1000).toFixed(2)} —Å–µ–∫`);
    
    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    this.testResults.details.forEach(detail => {
      const statusIcon = detail.status === 'PASSED' ? '‚úÖ' : '‚ùå';
      const quality = detail.qualityScore ? `(${(detail.qualityScore * 100).toFixed(1)}%)` : '';
      console.log(`${statusIcon} ${detail.month}: ${detail.status} ${quality}`);
      
      if (detail.error) {
        console.log(`   –û—à–∏–±–∫–∞: ${detail.error}`);
      }
      
      if (detail.statistics) {
        console.log(`   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${detail.statistics.reviewsCount} –æ—Ç–∑—ã–≤–æ–≤, ${detail.statistics.commentsTop20Count} —Ç–æ–ø-20, ${detail.statistics.activeDiscussionsCount} –æ–±—Å—É–∂–¥–µ–Ω–∏–π`);
      }
    });
  }
}

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
 */
function testFixedProcessor() {
  const tester = new FixedProcessorTester();
  return tester.runTesting();
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function updateMenuWithTesting() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞')
    .addItem('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'testFixedProcessor')
    .addToUi();
} 