const ExcelJS = require('exceljs');

async function analyzeLatestFile() {
  try {
    const filePath = './uploads/temp_google_sheets_1751818962604_–ú–∞—Ä—Ç_2025_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_20250706.xlsx';
    
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª:', filePath);
    
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(filePath);
    
    const worksheet = workbook.getWorksheet(1);
    
    let reviewsCount = 0;
    let commentsCount = 0;
    let discussionsCount = 0;
    
    let currentSection = '';
    let rowIndex = 0;
    
    worksheet.eachRow((row, rowNumber) => {
      const firstCell = row.getCell(1).value;
      if (firstCell) {
        const cellValue = firstCell.toString();
        
        if (cellValue.includes('–û—Ç–∑—ã–≤—ã') && !cellValue.includes('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')) {
          currentSection = 'reviews';
          console.log(`üìù –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è "–û—Ç–∑—ã–≤—ã" –≤ —Å—Ç—Ä–æ–∫–µ ${rowNumber}`);
        } else if (cellValue.includes('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20')) {
          currentSection = 'comments';
          console.log(`üí¨ –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20" –≤ —Å—Ç—Ä–æ–∫–µ ${rowNumber}`);
        } else if (cellValue.includes('–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è')) {
          currentSection = 'discussions';
          console.log(`üî• –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è "–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è" –≤ —Å—Ç—Ä–æ–∫–µ ${rowNumber}`);
        } else if (currentSection && cellValue && 
                  !cellValue.includes('–ü—Ä–æ–¥—É–∫—Ç') && 
                  !cellValue.includes('–ü–µ—Ä–∏–æ–¥') && 
                  !cellValue.includes('–ü–ª–∞–Ω') &&
                  !cellValue.includes('–°—É–º–º–∞—Ä–Ω–æ–µ') &&
                  !cellValue.includes('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')) {
          // –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
          if (currentSection === 'reviews') {
            reviewsCount++;
            if (reviewsCount <= 3) {
              console.log(`  üìù –û—Ç–∑—ã–≤ ${reviewsCount}: ${cellValue.substring(0, 50)}...`);
            }
          } else if (currentSection === 'comments') {
            commentsCount++;
            if (commentsCount <= 3) {
              console.log(`  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ${commentsCount}: ${cellValue.substring(0, 50)}...`);
            }
          } else if (currentSection === 'discussions') {
            discussionsCount++;
            if (discussionsCount <= 3) {
              console.log(`  üî• –û–±—Å—É–∂–¥–µ–Ω–∏–µ ${discussionsCount}: ${cellValue.substring(0, 50)}...`);
            }
          }
        }
      }
    });
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
    console.log(`üìù –û—Ç–∑—ã–≤—ã: ${reviewsCount}`);
    console.log(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20: ${commentsCount}`);
    console.log(`üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: ${discussionsCount}`);
    console.log(`üìã –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${reviewsCount + commentsCount + discussionsCount}`);
    
    if (discussionsCount > 0) {
      console.log('\n‚úÖ –ü–†–û–ë–õ–ï–ú–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê! –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ñ–∞–π–ª–µ!');
    } else {
      console.log('\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ - –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error.message);
  }
}

analyzeLatestFile(); 