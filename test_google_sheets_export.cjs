const axios = require('axios');
const fs = require('fs');
const ExcelJS = require('exceljs');

async function testGoogleSheetsExport() {
  try {
    console.log('=== –¢–ï–°–¢ GOOGLE SHEETS –≠–ö–°–ü–û–†–¢–ê ===');
    
    const url = 'https://docs.google.com/spreadsheets/d/1z4KJfXSNaV8Zw5Qi4hKdVsoKvt9GTSrweWv45URzB4I/edit?usp=sharing';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã
    const match = url.match(/\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/);
    if (!match) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π URL');
    }
    
    const spreadsheetId = match[1];
    console.log('Spreadsheet ID:', spreadsheetId);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportFormats = [
      { format: 'xlsx', description: 'Excel (.xlsx)' },
      { format: 'csv', description: 'CSV' },
      { format: 'tsv', description: 'TSV' }
    ];
    
    for (const fmt of exportFormats) {
      console.log(`\\nüì• –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ${fmt.description}`);
      
      const exportUrl = `https://docs.google.com/spreadsheets/d/${spreadsheetId}/export?format=${fmt.format}`;
      console.log('Export URL:', exportUrl);
      
      try {
        const response = await axios.get(exportUrl, {
          responseType: 'arraybuffer',
          timeout: 30000,
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          }
        });
        
        console.log(`‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${response.data.byteLength} –±–∞–π—Ç`);
        
        if (fmt.format === 'xlsx') {
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
          const buffer = Buffer.from(response.data);
          const filename = `test_export_${Date.now()}.xlsx`;
          fs.writeFileSync(filename, buffer);
          
          console.log(`üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
          const workbook = new ExcelJS.Workbook();
          await workbook.xlsx.readFile(filename);
          
          const worksheet = workbook.worksheets[0];
          console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: ${workbook.worksheets.length}`);
          console.log(`üìã –°—Ç—Ä–æ–∫ –≤ –ø–µ—Ä–≤–æ–º –ª–∏—Å—Ç–µ: ${worksheet.actualRowCount}`);
          
          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
          let dataRows = 0;
          worksheet.eachRow((row, rowNumber) => {
            if (rowNumber > 1) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
              const hasData = row.values.some(cell => cell && cell.toString().trim() !== '');
              if (hasData) {
                dataRows++;
              }
            }
          });
          
          console.log(`üìù –°—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏: ${dataRows}`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫
          console.log('\\nüîç –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:');
          for (let i = 1; i <= Math.min(6, worksheet.actualRowCount); i++) {
            const row = worksheet.getRow(i);
            const colA = row.getCell(1).value || '';
            const colB = row.getCell(2).value || '';
            const colE = row.getCell(5).value || '';
            console.log(`  ${i}: A="${colA}" | B="${colB}" | E="${colE.toString().substring(0, 50)}..."`);
          }
          
          console.log('\\nüîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫:');
          for (let i = Math.max(1, worksheet.actualRowCount - 4); i <= worksheet.actualRowCount; i++) {
            const row = worksheet.getRow(i);
            const colA = row.getCell(1).value || '';
            const colB = row.getCell(2).value || '';
            const colE = row.getCell(5).value || '';
            console.log(`  ${i}: A="${colA}" | B="${colB}" | E="${colE.toString().substring(0, 50)}..."`);
          }
          
          // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
          fs.unlinkSync(filename);
        }
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
    
    console.log('\\n=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testGoogleSheetsExport(); 