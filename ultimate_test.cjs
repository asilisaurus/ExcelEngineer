const fs = require('fs');
const path = require('path');

async function ultimateTest() {
  console.log('üöÄ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô');
  console.log('='.repeat(60));
  
  try {
    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (5 —Å–µ–∫)...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...');
    const response = await fetch('http://localhost:5000/api/import-google-sheets', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: 'https://docs.google.com/spreadsheets/d/1z4KJfXSNaV8Zw5Qi4hKdVsoKvt9GTSrweWv45URzB4I/edit?usp=sharing'
      })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÅ ID —Ñ–∞–π–ª–∞: ${result.fileId}`);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    let attempts = 0;
    const maxAttempts = 15;
    
    while (attempts < maxAttempts) {
      console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (${attempts + 1}/${maxAttempts})...`);
      
      const statusResponse = await fetch(`http://localhost:5000/api/files/${result.fileId}`);
      
      if (statusResponse.ok) {
        const fileInfo = await statusResponse.json();
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${fileInfo.status}`);
        
        if (fileInfo.status === 'completed') {
          console.log('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
          
          // –ù–∞—Ö–æ–¥–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
          const uploadsDir = 'uploads';
          const files = fs.readdirSync(uploadsDir);
          const today = new Date().toISOString().slice(0, 10).replace(/-/g, '');
          const resultFiles = files.filter(file => 
            file.includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç') && 
            file.includes(today)
          );
          
          if (resultFiles.length > 0) {
            // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
            const filesWithStats = resultFiles.map(file => ({
              name: file,
              stats: fs.statSync(path.join(uploadsDir, file))
            }));
            
            filesWithStats.sort((a, b) => b.stats.mtime - a.stats.mtime);
            const latestFile = filesWithStats[0].name;
            
            console.log('\n‚úÖ –§–ê–ô–õ –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!');
            console.log(`üìÅ –ò–º—è: ${latestFile}`);
            console.log(`üìä –†–∞–∑–º–µ—Ä: ${filesWithStats[0].stats.size} –±–∞–π—Ç`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û:');
            
            const ExcelJS = require('exceljs');
            const workbook = new ExcelJS.Workbook();
            const filePath = path.join(uploadsDir, latestFile);
            
            try {
              await workbook.xlsx.readFile(filePath);
              const worksheet = workbook.getWorksheet(1);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
              const row1 = worksheet.getRow(1);
              const row2 = worksheet.getRow(2);
              const row3 = worksheet.getRow(3);
              
              console.log(`–°—Ç—Ä–æ–∫–∞ 1: ${row1.getCell(1).value} | ${row1.getCell(2).value}`);
              console.log(`–°—Ç—Ä–æ–∫–∞ 2: ${row2.getCell(1).value} | ${row2.getCell(2).value}`);
              console.log(`–°—Ç—Ä–æ–∫–∞ 3: ${row3.getCell(1).value} | ${row3.getCell(2).value}`);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–∞
              const headerColor = row1.getCell(1).fill?.fgColor?.argb;
              console.log(`–¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞: ${headerColor}`);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
              let reviewCount = 0;
              let commentCount = 0;
              let totalRows = 0;
              
              worksheet.eachRow((row, rowNumber) => {
                if (rowNumber > 5) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                  const postType = row.getCell(8).value;
                  if (postType === '–û–°') reviewCount++;
                  if (postType === '–¶–°') commentCount++;
                  totalRows++;
                }
              });
              
              console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ù–´–•:`);
              console.log(`üìù –û—Ç–∑—ã–≤–æ–≤: ${reviewCount}`);
              console.log(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${commentCount}`);
              console.log(`üìã –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${totalRows}`);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
              const firstDataRow = worksheet.getRow(6);
              const duplicateCheck = [];
              for (let i = 1; i <= 8; i++) {
                const cellValue = firstDataRow.getCell(i).value;
                duplicateCheck.push(cellValue);
              }
              
              const hasDuplicates = duplicateCheck.some((value, index) => 
                duplicateCheck.indexOf(value) !== index && value !== '' && value !== null
              );
              
              console.log(`\nüîç –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø:`);
              console.log(`–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö: ${duplicateCheck.slice(0, 4).join(' | ')}`);
              console.log(`–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: ${hasDuplicates ? '‚ùå –ï–°–¢–¨' : '‚úÖ –ù–ï–¢'}`);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ [object Object]
              let hasObjectErrors = false;
              worksheet.eachRow((row, rowNumber) => {
                if (rowNumber <= 10) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
                  for (let i = 1; i <= 8; i++) {
                    const cellValue = row.getCell(i).value;
                    if (cellValue && cellValue.toString().includes('[object Object]')) {
                      hasObjectErrors = true;
                      break;
                    }
                  }
                }
              });
              
              console.log(`[object Object] –æ—à–∏–±–∫–∏: ${hasObjectErrors ? '‚ùå –ï–°–¢–¨' : '‚úÖ –ù–ï–¢'}`);
              
              // –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
              console.log('\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:');
              
              const checksPass = {
                fileCreated: true,
                correctHeaders: row1.getCell(1).value === '–ü—Ä–æ–¥—É–∫—Ç',
                correctColors: headerColor === 'FF2D1341',
                correctCounts: reviewCount === 18 && commentCount === 519,
                noDuplicates: !hasDuplicates,
                noObjectErrors: !hasObjectErrors
              };
              
              Object.entries(checksPass).forEach(([check, passed]) => {
                console.log(`${passed ? '‚úÖ' : '‚ùå'} ${check}: ${passed ? '–ü–†–û–ô–î–ï–ù–û' : '–ù–ï –ü–†–û–ô–î–ï–ù–û'}`);
              });
              
              const allPassed = Object.values(checksPass).every(Boolean);
              
              if (allPassed) {
                console.log('\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
                console.log('üöÄ –°–ò–°–¢–ï–ú–ê EXCELENGINER –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê!');
                console.log('‚ú® –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã:');
                console.log('  ‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç XLSX/ExcelJS —É—Å—Ç—Ä–∞–Ω–µ–Ω');
                console.log('  ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ');
                console.log('  ‚úÖ [object Object] –æ—à–∏–±–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã');
                console.log('  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤');
                console.log('  ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö');
                console.log('  ‚úÖ –¢–æ—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: 18 –æ—Ç–∑—ã–≤–æ–≤, 519 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
                return true;
              } else {
                console.log('\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ù–ï –ü–†–û–ô–î–ï–ù–´');
                return false;
              }
              
            } catch (fileError) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', fileError.message);
              return false;
            }
            
          } else {
            console.log('‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return false;
          }
          
        } else if (fileInfo.status === 'error') {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', fileInfo.errorMessage);
          return false;
        }
      }
      
      await new Promise(resolve => setTimeout(resolve, 2000));
      attempts++;
    }
    
    console.log('‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
    return false;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç
ultimateTest().then(success => {
  if (success) {
    console.log('\nüéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!');
    console.log('üíº –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ');
  } else {
    console.log('\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê');
  }
}).catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
}); 