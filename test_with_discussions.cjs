const fs = require('fs');
const path = require('path');

async function testWithDiscussions() {
  console.log('üî• –¢–ï–°–¢ –° –ê–ö–¢–ò–í–ù–´–ú–ò –û–ë–°–£–ñ–î–ï–ù–ò–Ø–ú–ò üî•');
  console.log('='.repeat(60));
  
  try {
    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (6 —Å–µ–∫)...');
    await new Promise(resolve => setTimeout(resolve, 6000));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...');
    const response = await fetch('http://localhost:5000/api/import-google-sheets', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url: 'https://docs.google.com/spreadsheets/d/1z4KJfXSNaV8Zw5Qi4hKdVsoKvt9GTSrweWv45URzB4I/edit?usp=sharing'
      })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, ID:', result.fileId);
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    for (let i = 0; i < 15; i++) {
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const statusResponse = await fetch(`http://localhost:5000/api/files/${result.fileId}`);
      const fileInfo = await statusResponse.json();
      console.log(`üîÑ –°—Ç–∞—Ç—É—Å: ${fileInfo.status}`);
      
      if (fileInfo.status === 'completed') {
        console.log('üéâ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω!');
        
        // –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª
        const files = fs.readdirSync('uploads');
        const today = new Date().toISOString().slice(0, 10).replace(/-/g, '');
        const resultFiles = files.filter(f => f.includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç') && f.includes(today));
        
        if (resultFiles.length > 0) {
          const latestFile = resultFiles[resultFiles.length - 1];
          console.log(`üìÅ –§–∞–π–ª: ${latestFile}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
          const ExcelJS = require('exceljs');
          const workbook = new ExcelJS.Workbook();
          await workbook.xlsx.readFile(path.join('uploads', latestFile));
          const worksheet = workbook.getWorksheet(1);
          
          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
          let reviewCount = 0;
          let commentCount = 0;
          let discussionCount = 0;
          let totalDataRows = 0;
          
          let currentSection = '';
          
          worksheet.eachRow((row, rowNumber) => {
            if (rowNumber <= 4) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            
            const cellA = row.getCell(1).value;
            if (cellA && typeof cellA === 'string') {
              if (cellA.includes('–û—Ç–∑—ã–≤—ã')) {
                currentSection = 'reviews';
                return;
              } else if (cellA.includes('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')) {
                currentSection = 'comments';
                return;
              } else if (cellA.includes('–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è')) {
                currentSection = 'discussions';
                return;
              }
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ (–Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞)
            if (cellA && cellA !== '–ü–ª–æ—â–∞–¥–∫–∞' && !cellA.toString().startsWith('–°—É–º–º–∞—Ä–Ω–æ–µ')) {
              totalDataRows++;
              if (currentSection === 'reviews') reviewCount++;
              if (currentSection === 'comments') commentCount++;
              if (currentSection === 'discussions') discussionCount++;
            }
          });
          
          console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
          console.log(`üìù –û—Ç–∑—ã–≤—ã: ${reviewCount}`);
          console.log(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20: ${commentCount}`);
          console.log(`üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: ${discussionCount}`);
          console.log(`üìã –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${totalDataRows}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
          const checks = {
            reviewsCorrect: reviewCount === 18,
            commentsCorrect: commentCount === 519,
            hasDiscussions: discussionCount > 0,
            totalRows: totalDataRows > 600, // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 600 —Å—Ç—Ä–æ–∫
            hasAllSections: discussionCount > 0 && reviewCount > 0 && commentCount > 0
          };
          
          console.log('\nüèÜ –ü–†–û–í–ï–†–ö–ò:');
          Object.entries(checks).forEach(([check, passed]) => {
            console.log(`${passed ? '‚úÖ' : '‚ùå'} ${check}: ${passed ? '–ü–†–û–ô–î–ï–ù–û' : '–ù–ï –ü–†–û–ô–î–ï–ù–û'}`);
          });
          
          const allPassed = Object.values(checks).every(Boolean);
          
          if (allPassed) {
            console.log('\nüéâüéâüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! üéâüéâüéâ');
            console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º:');
            console.log(`  üìù –û—Ç–∑—ã–≤—ã: ${reviewCount}`);
            console.log(`  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20: ${commentCount}`);
            console.log(`  üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: ${discussionCount}`);
            console.log(`  üìã –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${totalDataRows} —Å—Ç—Ä–æ–∫`);
            console.log('üöÄ –ì–û–¢–û–í–û –ö –ü–†–û–î–ê–ö–®–ù–£!');
            return true;
          } else {
            console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã');
            console.log('–û–∂–∏–¥–∞–µ–º–æ:');
            console.log('  üìù –û—Ç–∑—ã–≤—ã: 18');
            console.log('  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: 519');
            console.log('  üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: > 0');
            console.log('  üìã –û–±—â–µ–µ: > 600 —Å—Ç—Ä–æ–∫');
            return false;
          }
        }
        break;
      } else if (fileInfo.status === 'error') {
        console.log('‚ùå –û—à–∏–±–∫–∞:', fileInfo.errorMessage);
        return false;
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    return false;
  }
}

testWithDiscussions().then(success => {
  if (success) {
    console.log('\nüéä –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù!');
    console.log('üéØ –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
  } else {
    console.log('\n‚ö†Ô∏è –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù');
  }
}); 