const fs = require('fs');
const path = require('path');
const FormData = require('form-data');

async function testFileUpload() {
  console.log('üì§ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–ê');
  console.log('='.repeat(50));
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    const sourceFile = path.join('uploads', 'Fortedetrim ORM report source.xlsx');
    
    if (!fs.existsSync(sourceFile)) {
      console.log('‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', sourceFile);
      return;
    }
    
    console.log('üìÇ –ù–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª:', sourceFile);
    
    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    const formData = new FormData();
    formData.append('file', fs.createReadStream(sourceFile), {
      filename: 'test_upload.xlsx',
      contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    });
    
    console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ API...');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    const response = await fetch('http://localhost:5000/api/upload', {
      method: 'POST',
      body: formData
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÅ ID —Ñ–∞–π–ª–∞: ${result.fileId}`);
    
    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    let attempts = 0;
    const maxAttempts = 20;
    
    while (attempts < maxAttempts) {
      console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (${attempts + 1}/${maxAttempts})...`);
      
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const statusResponse = await fetch(`http://localhost:5000/api/files/${result.fileId}`);
      const fileInfo = await statusResponse.json();
      
      if (fileInfo.status === 'completed') {
        console.log('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const files = fs.readdirSync('uploads');
        const today = new Date().toISOString().slice(0, 10).replace(/-/g, '');
        const resultFiles = files.filter(f => f.includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç') && f.includes(today));
        
        if (resultFiles.length > 0) {
          const latestFile = resultFiles[resultFiles.length - 1];
          console.log(`üìÅ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${latestFile}`);
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
          const ExcelJS = require('exceljs');
          const workbook = new ExcelJS.Workbook();
          await workbook.xlsx.readFile(path.join('uploads', latestFile));
          const worksheet = workbook.getWorksheet(1);
          
          let reviewCount = 0;
          let commentCount = 0;
          let discussionCount = 0;
          let currentSection = '';
          
          worksheet.eachRow((row, rowNumber) => {
            if (rowNumber <= 4) return;
            
            const cellA = row.getCell(1).value;
            if (cellA && typeof cellA === 'string') {
              const cellStr = cellA.toString().trim();
              
              if (cellStr === '–û—Ç–∑—ã–≤—ã') {
                currentSection = 'reviews';
                return;
              } else if (cellStr.includes('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')) {
                currentSection = 'comments';
                return;
              } else if (cellStr.includes('–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è')) {
                currentSection = 'discussions';
                return;
              }
            }
            
            const hasData = cellA && cellA !== '–ü–ª–æ—â–∞–¥–∫–∞' && 
                           !cellA.toString().startsWith('–°—É–º–º–∞—Ä–Ω–æ–µ');
            
            if (hasData) {
              if (currentSection === 'reviews') reviewCount++;
              else if (currentSection === 'comments') commentCount++;
              else if (currentSection === 'discussions') discussionCount++;
            }
          });
          
          console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ò:');
          console.log(`üìù –û—Ç–∑—ã–≤—ã: ${reviewCount}`);
          console.log(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${commentCount}`);
          console.log(`üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: ${discussionCount}`);
          console.log(`üìã –í—Å–µ–≥–æ: ${reviewCount + commentCount + discussionCount}`);
          
          if (reviewCount === 18 && commentCount === 519 && discussionCount > 0) {
            console.log('\nüéâüéâüéâ –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û! üéâüéâüéâ');
            console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã');
            console.log('‚úÖ –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            console.log('üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!');
            return true;
          } else {
            console.log('\n‚ùå –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢');
            console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –¥–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
            return false;
          }
        }
        break;
      } else if (fileInfo.status === 'error') {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', fileInfo.errorMessage);
        return false;
      }
      
      attempts++;
    }
    
    console.log('‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
    return false;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error.message);
    return false;
  }
}

testFileUpload().then(success => {
  if (success) {
    console.log('\nüéä –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ü–†–û–ô–î–ï–ù!');
    console.log('üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω—É!');
  } else {
    console.log('\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–û–í');
  }
}); 