async function testDatesFix() {
  console.log('üìÖ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ê–¢');
  console.log('='.repeat(40));
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å Google Sheets...');
    const response = await fetch('http://localhost:5000/api/import-google-sheets', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url: 'https://docs.google.com/spreadsheets/d/1z4KJfXSNaV8Zw5Qi4hKdVsoKvt9GTSrweWv45URzB4I/edit?usp=sharing'
      })
    });
    
    const result = await response.json();
    const fileId = result.fileId;
    console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, ID —Ñ–∞–π–ª–∞: ${fileId}`);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    let attempts = 0;
    const maxAttempts = 30;
    
    while (attempts < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const statusResponse = await fetch(`http://localhost:5000/api/files/${fileId}`);
      const fileInfo = await statusResponse.json();
      
      console.log(`[${attempts + 1}/${maxAttempts}] üìä –°—Ç–∞—Ç—É—Å: ${fileInfo.status}, –°—Ç—Ä–æ–∫: ${fileInfo.rowsProcessed || 0}`);
      
      if (fileInfo.status === 'completed') {
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultFile = fileInfo.processedName;
        console.log(`üìÅ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${resultFile}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        const ExcelJS = require('exceljs');
        const workbook = new ExcelJS.Workbook();
        const filePath = `uploads/${resultFile}`;
        
        try {
          await workbook.xlsx.readFile(filePath);
          const sheet = workbook.getWorksheet(1);
          
          console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –î–ê–¢ –í –†–ï–ó–£–õ–¨–¢–ê–¢–ï:');
          let datesFound = 0;
          
          for (let i = 5; i <= 15; i++) {
            const row = sheet.getRow(i);
            const dateCell = row.getCell(4); // –ö–æ–ª–æ–Ω–∫–∞ D
            const nickCell = row.getCell(5); // –ö–æ–ª–æ–Ω–∫–∞ E
            
            if (dateCell.value) {
              datesFound++;
              console.log(`üìÖ –°—Ç—Ä–æ–∫–∞ ${i}: –î–∞—Ç–∞="${dateCell.text || dateCell.value}", –ù–∏–∫="${nickCell.text || nickCell.value}"`);
            }
          }
          
          if (datesFound > 0) {
            console.log(`üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ ${datesFound} –¥–∞—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ`);
          } else {
            console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê! –î–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º —Ñ–∞–π–ª–µ');
          }
          
        } catch (fileError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', fileError.message);
        }
        
        break;
      }
      
      if (fileInfo.status === 'error') {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', fileInfo.errorMessage);
        break;
      }
      
      attempts++;
    }
    
    if (attempts >= maxAttempts) {
      console.log('‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

testDatesFix(); 