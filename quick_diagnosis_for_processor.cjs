/**
 * üîç –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –ü–†–û–¶–ï–°–°–û–†–ê
 * –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
 * 
 * –ê–≤—Ç–æ—Ä: AI Assistant + Background Agent bc-2954e872-79f8-4d41-b422-413e62f0b031
 * –¶–µ–ª—å: –ù–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ª–æ–≥–∏–∫–µ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Google Apps Script
 */

const fs = require('fs');

// ==================== –ê–ù–ê–õ–ò–ó –ö–û–î–ê –ü–†–û–¶–ï–°–°–û–†–ê ====================

function analyzeProcessorCode() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –ö–û–î–ê –ü–†–û–¶–ï–°–°–û–†–ê');
  console.log('========================');
  
  const processorCode = fs.readFileSync('google-apps-script-processor-final.js', 'utf8');
  
  const issues = [];
  
  // 1. –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–∞ findSectionBoundaries
  console.log('\n1Ô∏è‚É£ –ê–ù–ê–õ–ò–ó findSectionBoundaries():');
  if (processorCode.includes('findSectionBoundaries')) {
    console.log('‚úÖ –ú–µ—Ç–æ–¥ –Ω–∞–π–¥–µ–Ω');
    
    // –ò—â–µ–º –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
    const sectionRegex = /findSectionBoundaries\([\s\S]*?\n\s*\}/;
    const sectionMatch = processorCode.match(sectionRegex);
    
    if (sectionMatch) {
      const sectionCode = sectionMatch[0];
      console.log('üìã –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤:');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
      if (!sectionCode.includes('–æ—Ç–∑—ã–≤—ã') || !sectionCode.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') || !sectionCode.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è')) {
        issues.push({
          severity: '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø',
          problem: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã',
          location: 'findSectionBoundaries()',
          solution: '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ "–æ—Ç–∑—ã–≤—ã", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20", "–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è"'
        });
        console.log('‚ùå –ù–µ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è');
      } else {
        console.log('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è');
      }
      
      if (!sectionCode.includes('startRow') || !sectionCode.includes('endRow')) {
        issues.push({
          severity: '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø', 
          problem: '–ù–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü —Ä–∞–∑–¥–µ–ª–æ–≤',
          location: 'findSectionBoundaries()',
          solution: '–î–æ–±–∞–≤–∏—Ç—å startRow –∏ endRow –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞'
        });
        console.log('‚ùå –ù–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü —Ä–∞–∑–¥–µ–ª–æ–≤');
      } else {
        console.log('‚úÖ –ì—Ä–∞–Ω–∏—Ü—ã —Ä–∞–∑–¥–µ–ª–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è');
      }
    }
  } else {
    issues.push({
      severity: '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø',
      problem: '–ú–µ—Ç–æ–¥ findSectionBoundaries –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      location: '–í–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä',
      solution: '–°–æ–∑–¥–∞—Ç—å –º–µ—Ç–æ–¥ findSectionBoundaries –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü —Ä–∞–∑–¥–µ–ª–æ–≤'
    });
    console.log('‚ùå –ú–µ—Ç–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  }
  
  // 2. –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–∞ processData
  console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó processData():');
  if (processorCode.includes('processData')) {
    console.log('‚úÖ –ú–µ—Ç–æ–¥ –Ω–∞–π–¥–µ–Ω');
    
    const processRegex = /processData\([\s\S]*?\n\s*\}/;
    const processMatch = processorCode.match(processRegex);
    
    if (processMatch) {
      const processCode = processMatch[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ findSectionBoundaries
      if (!processCode.includes('findSectionBoundaries')) {
        issues.push({
          severity: '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø',
          problem: 'processData –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç findSectionBoundaries',
          location: 'processData()',
          solution: '–í—ã–∑–≤–∞—Ç—å findSectionBoundaries –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤'
        });
        console.log('‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç findSectionBoundaries');
      } else {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç findSectionBoundaries');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º
      if (processCode.includes('currentSection') && !processCode.includes('section.startRow')) {
        issues.push({
          severity: '–í–´–°–û–ö–ê–Ø',
          problem: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º —Ä–∞–∑–¥–µ–ª–æ–≤',
          location: 'processData()',
          solution: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–≥–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö boundaries –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞'
        });
        console.log('‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º —Ä–∞–∑–¥–µ–ª–æ–≤');
      }
    }
  } else {
    issues.push({
      severity: '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø',
      problem: '–ú–µ—Ç–æ–¥ processData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      location: '–í–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä',
      solution: '–°–æ–∑–¥–∞—Ç—å –º–µ—Ç–æ–¥ processData'
    });
    console.log('‚ùå –ú–µ—Ç–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  }
  
  // 3. –ê–Ω–∞–ª–∏–∑ determinePostTypeBySection
  console.log('\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó determinePostTypeBySection():');
  if (processorCode.includes('determinePostTypeBySection')) {
    console.log('‚úÖ –ú–µ—Ç–æ–¥ –Ω–∞–π–¥–µ–Ω');
    
    const typeRegex = /determinePostTypeBySection\([\s\S]*?\n\s*\}/;
    const typeMatch = processorCode.match(typeRegex);
    
    if (typeMatch) {
      const typeCode = typeMatch[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–∞ —Ç–∏–ø—ã
      const hasReviewsMapping = typeCode.includes('reviews') && typeCode.includes('–û–°');
      const hasCommentsMapping = typeCode.includes('commentsTop20') && typeCode.includes('–¶–°');
      const hasDiscussionsMapping = typeCode.includes('activeDiscussions') && typeCode.includes('–ü–°');
      
      if (!hasReviewsMapping || !hasCommentsMapping || !hasDiscussionsMapping) {
        issues.push({
          severity: '–í–´–°–û–ö–ê–Ø',
          problem: '–ù–µ–ø–æ–ª–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–∞ —Ç–∏–ø—ã –ø–æ—Å—Ç–æ–≤',
          location: 'determinePostTypeBySection()',
          solution: '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥: reviews->–û–°, commentsTop20->–¶–°, activeDiscussions->–ü–°'
        });
        console.log('‚ùå –ù–µ–ø–æ–ª–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–∞ —Ç–∏–ø—ã');
      } else {
        console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–∞ —Ç–∏–ø—ã');
      }
    }
  } else {
    issues.push({
      severity: '–í–´–°–û–ö–ê–Ø',
      problem: '–ú–µ—Ç–æ–¥ determinePostTypeBySection –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      location: '–í–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä',
      solution: '–°–æ–∑–¥–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–æ–≤ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º'
    });
    console.log('‚ùå –ú–µ—Ç–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  }
  
  // 4. –ê–Ω–∞–ª–∏–∑ isSectionHeader –∏ isStatisticsRow
  console.log('\n4Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í:');
  const hasSectionHeader = processorCode.includes('isSectionHeader');
  const hasStatisticsRow = processorCode.includes('isStatisticsRow');
  
  if (!hasSectionHeader) {
    issues.push({
      severity: '–°–†–ï–î–ù–Ø–Ø',
      problem: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ isSectionHeader',
      location: '–í–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä',
      solution: '–°–æ–∑–¥–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤'
    });
    console.log('‚ùå isSectionHeader –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  } else {
    console.log('‚úÖ isSectionHeader –Ω–∞–π–¥–µ–Ω');
  }
  
  if (!hasStatisticsRow) {
    issues.push({
      severity: '–°–†–ï–î–ù–Ø–Ø',
      problem: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ isStatisticsRow',
      location: '–í–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä',
      solution: '–°–æ–∑–¥–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
    console.log('‚ùå isStatisticsRow –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  } else {
    console.log('‚úÖ isStatisticsRow –Ω–∞–π–¥–µ–Ω');
  }
  
  return issues;
}

// ==================== –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ====================

function createFixPlan(issues) {
  console.log('\nüîß –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô');
  console.log('==================');
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
  const critical = issues.filter(i => i.severity === '–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø');
  const high = issues.filter(i => i.severity === '–í–´–°–û–ö–ê–Ø');
  const medium = issues.filter(i => i.severity === '–°–†–ï–î–ù–Ø–Ø');
  
  console.log(`\nüî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï (${critical.length}):`);
  critical.forEach((issue, index) => {
    console.log(`${index + 1}. ${issue.problem}`);
    console.log(`   üìç ${issue.location}`);
    console.log(`   üîß ${issue.solution}`);
    console.log('');
  });
  
  console.log(`\n‚ö†Ô∏è –í–´–°–û–ö–ò–ï (${high.length}):`);
  high.forEach((issue, index) => {
    console.log(`${index + 1}. ${issue.problem}`);
    console.log(`   üìç ${issue.location}`);
    console.log(`   üîß ${issue.solution}`);
    console.log('');
  });
  
  console.log(`\nüí° –°–†–ï–î–ù–ò–ï (${medium.length}):`);
  medium.forEach((issue, index) => {
    console.log(`${index + 1}. ${issue.problem}`);
    console.log(`   üìç ${issue.location}`);
    console.log(`   üîß ${issue.solution}`);
    console.log('');
  });
  
  return { critical, high, medium };
}

// ==================== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ====================

function generateFixes(issues) {
  console.log('\nüíª –ö–û–ù–ö–†–ï–¢–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–î–ê');
  console.log('==============================');
  
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: findSectionBoundaries
  const needsSectionBoundaries = issues.some(i => i.location.includes('findSectionBoundaries'));
  if (needsSectionBoundaries) {
    console.log('\n1Ô∏è‚É£ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï findSectionBoundaries():');
    console.log(`
  findSectionBoundaries(data) {
    const sections = [];
    let currentSection = null;
    let sectionStart = -1;
    
    for (let i = CONFIG.STRUCTURE.dataStartRow - 1; i < data.length; i++) {
      const row = data[i];
      const firstCell = String(row[0] || '').toLowerCase().trim();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞–∑–¥–µ–ª–∞
      let sectionType = null;
      if (firstCell.includes('–æ—Ç–∑—ã–≤—ã') && !firstCell.includes('—Ç–æ–ø-20') && !firstCell.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è')) {
        sectionType = 'reviews';
      } else if (firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–æ–ø-20') || firstCell.includes('—Ç–æ–ø-20 –≤—ã–¥–∞—á–∏')) {
        sectionType = 'commentsTop20';
      } else if (firstCell.includes('–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è') || firstCell.includes('–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')) {
        sectionType = 'activeDiscussions';
      }
      
      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
      if (sectionType && sectionType !== currentSection) {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞–∑–¥–µ–ª
        if (currentSection && sectionStart !== -1) {
          sections.push({
            type: currentSection,
            startRow: sectionStart,
            endRow: i - 1
          });
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
        currentSection = sectionType;
        sectionStart = i + 1; // –î–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
      }
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–¥–µ–ª
    if (currentSection && sectionStart !== -1) {
      sections.push({
        type: currentSection,
        startRow: sectionStart,
        endRow: data.length - 1
      });
    }
    
    return sections;
  }`);
  }
  
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: processData
  const needsProcessData = issues.some(i => i.location.includes('processData'));
  if (needsProcessData) {
    console.log('\n2Ô∏è‚É£ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï processData():');
    console.log(`
  processData(data) {
    const processedRecords = [];
    const columnMapping = this.getColumnMapping();
    
    // –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ä–∞–∑–¥–µ–ª–æ–≤
    const sections = this.findSectionBoundaries(data);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –æ—Ç–¥–µ–ª—å–Ω–æ
    for (const section of sections) {
      console.log(\`üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ "\${section.type}" (—Å—Ç—Ä–æ–∫–∏ \${section.startRow}-\${section.endRow})\`);
      
      for (let i = section.startRow; i <= section.endRow; i++) {
        if (i >= data.length) break;
        
        const row = data[i];
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if (this.isEmptyRow(row) || this.isSectionHeader(row) || this.isStatisticsRow(row)) {
          continue;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–∞–∑–¥–µ–ª–∞
        const processedRow = this.processRow(row, section.type, columnMapping);
        if (processedRow) {
          processedRecords.push(processedRow);
        }
      }
    }
    
    return processedRecords;
  }`);
  }
}

// ==================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================

function main() {
  console.log('üîç –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–¶–ï–°–°–û–†–ê');
  console.log('=================================');
  
  // 1. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
  const issues = analyzeProcessorCode();
  
  // 2. –ü–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
  const plan = createFixPlan(issues);
  
  // 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
  generateFixes(issues);
  
  // 4. –ò—Ç–æ–≥–∏
  console.log('\nüéØ –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
  console.log('====================');
  console.log(`üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: ${plan.critical.length}`);
  console.log(`‚ö†Ô∏è –í—ã—Å–æ–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: ${plan.high.length}`); 
  console.log(`üí° –°—Ä–µ–¥–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º: ${plan.medium.length}`);
  console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: ${issues.length}`);
  
  const priority = plan.critical.length > 0 ? '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô' : 
                  plan.high.length > 0 ? '–í–´–°–û–ö–ò–ô' : '–°–†–ï–î–ù–ò–ô';
  console.log(`‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${priority}`);
  
  return { issues, plan };
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = { main }; 