const ExcelJS = require('exceljs');

async function analyzeSourceColumns() {
  console.log('üìä –ê–ù–ê–õ–ò–ó –ò–°–•–û–î–ù–´–• –î–ê–ù–ù–´–•');
  
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    const possibleFiles = [
      'uploads/Fortedetrim ORM report source.xlsx',
      'temp_google_download.xlsx'
    ];
    
    let sourceFile = null;
    for (const file of possibleFiles) {
      try {
        const fs = require('fs');
        if (fs.existsSync(file)) {
          sourceFile = file;
          break;
        }
      } catch (e) {}
    }
    
    if (!sourceFile) {
      console.log('‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: ${sourceFile}`);
    
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(sourceFile);
    
    const sheet = workbook.getWorksheet(1);
    
    console.log('\nüîç –ü–ï–†–í–´–ï 10 –°–¢–†–û–ö –ò–°–•–û–î–ù–´–• –î–ê–ù–ù–´–•:');
    for (let i = 1; i <= 10; i++) {
      const row = sheet.getRow(i);
      const values = [];
      for (let j = 1; j <= 10; j++) {
        const cell = row.getCell(j);
        let value = cell.text || cell.value;
        if (value === null || value === undefined) value = '';
        values.push(value.toString().substring(0, 15)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
      }
      console.log(`–°—Ç—Ä–æ–∫–∞ ${i}: ${values.join(' | ')}`);
    }
    
    console.log('\nüéØ –ü–û–ò–°–ö –î–ê–¢ –í –ò–°–•–û–î–ù–´–• –î–ê–ù–ù–´–•:');
    
    // –ò—â–µ–º –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–∞—Ç—ã –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for (let i = 2; i <= 20; i++) {
      const row = sheet.getRow(i);
      const rowData = [];
      let hasData = false;
      
      for (let j = 1; j <= 15; j++) {
        const cell = row.getCell(j);
        let value = cell.text || cell.value;
        if (value) hasData = true;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–∞—Ç—É
        const isDate = value && (
          /\d{4}-\d{2}-\d{2}/.test(value) ||
          /\d{2}\.\d{2}\.\d{4}/.test(value) ||
          /\d{1,2}\/\d{1,2}\/\d{4}/.test(value) ||
          (typeof value === 'number' && value > 40000 && value < 50000) // Excel date number
        );
        
        if (isDate) {
          console.log(`üóìÔ∏è –î–ê–¢–ê –ù–ê–ô–î–ï–ù–ê –≤ —Å—Ç—Ä–æ–∫–µ ${i}, –∫–æ–ª–æ–Ω–∫–µ ${j}: "${value}"`);
        }
        
        rowData.push(value);
      }
      
      if (!hasData) break; // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

analyzeSourceColumns(); 