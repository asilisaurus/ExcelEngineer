const axios = require('axios');
const XLSX = require('xlsx');

function extractGoogleSheetsInfo(url) {
  try {
    const patterns = [
      /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/,
      /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)\/edit/,
      /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)\/edit#gid=(\d+)/
    ];
    
    let spreadsheetId = null;
    let gid = null;
    
    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match) {
        spreadsheetId = match[1];
        if (match[2]) {
          gid = match[2];
        }
        break;
      }
    }
    
    if (!gid) {
      const gidMatch = url.match(/[#&]gid=(\d+)/);
      if (gidMatch) {
        gid = gidMatch[1];
      }
    }
    
    return { spreadsheetId, gid };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ URL:', error);
    return { spreadsheetId: null, gid: null };
  }
}

async function importFromGoogleSheets(url) {
  const { spreadsheetId, gid } = extractGoogleSheetsInfo(url);
  
  if (!spreadsheetId) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π URL Google –¢–∞–±–ª–∏—Ü');
  }
  
  const exportUrl = `https://docs.google.com/spreadsheets/d/${spreadsheetId}/export?format=xlsx${gid ? `&gid=${gid}` : ''}`;
  
  try {
    const response = await axios.get(exportUrl, {
      responseType: 'arraybuffer',
      timeout: 30000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    return Buffer.from(response.data);
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
  }
}

function analyzeRowType(row, rowIndex) {
  if (!row || row.length === 0) return 'empty';
  
  const colA = (row[0] || '').toString().toLowerCase();
  const colB = (row[1] || '').toString().toLowerCase();
  const colD = (row[3] || '').toString().toLowerCase();
  const colE = (row[4] || '').toString().toLowerCase();
  const colN = (row[13] || '').toString().toLowerCase();
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
  if (colA.includes('—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è') || colA.includes('–ø–ª–æ—â–∞–¥–∫–∞') || 
      colB.includes('–ø–ª–æ—â–∞–¥–∫–∞') || colE.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')) {
    return 'header';
  }
  
  // –°–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  if ((colA.includes('–æ—Ç–∑—ã–≤') && colA.length < 15) || 
      (colA.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä') && colA.length < 25)) {
    return 'section_header';
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  if (colA.includes('–æ—Ç–∑—ã–≤') && (colB || colD || colE)) {
    return 'review';
  }
  
  if (colA.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä') && (colB || colD || colE)) {
    return 'comment';
  }
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ URL –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
  const urlText = colB + ' ' + colD;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ—Ç–∑—ã–≤–æ–≤
  const reviewPlatforms = ['otzovik', 'irecommend', 'otzyvru', 'pravogolosa', 'medum', 'vseotzyvy', 'otzyvy.pro', 'market.yandex', 'dialog.ru', 'goodapteka', 'megapteka', 'uteka', 'nfapteka'];
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤  
  const commentPlatforms = ['dzen.ru', 'woman.ru', 'forum.baby.ru', 'vk.com', 't.me', 'ok.ru', 'otvet.mail.ru', 'babyblog.ru', 'mom.life', 'youtube.com'];
  
  const isReviewPlatform = reviewPlatforms.some(platform => urlText.includes(platform));
  const isCommentPlatform = commentPlatforms.some(platform => urlText.includes(platform));
  
  // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ N
  const postType = colN;
  
  if ((colB || colD || colE) && (isReviewPlatform || postType === '–æ—Å')) {
    return 'review';
  }
  
  if ((colB || colD || colE) && (isCommentPlatform || postType === '—Ü—Å')) {
    return 'comment';
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–æ —Ç–∏–ø –Ω–µ—è—Å–µ–Ω
  if (colB || colD || colE) {
    return 'content';
  }
  
  return 'empty';
}

function analyzeDataQuality(row, rowIndex) {
  const issues = [];
  
  const colB = (row[1] || '').toString();
  const colD = (row[3] || '').toString();
  const colE = (row[4] || '').toString();
  const colG = row[6]; // –î–∞—Ç–∞
  const colH = (row[7] || '').toString(); // –ù–∏–∫
  const colN = (row[13] || '').toString(); // –¢–∏–ø –ø–æ—Å—Ç–∞
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
  if (!colE || colE.length < 10) {
    issues.push('no_text');
  }
  
  if (!colD || !colD.includes('http')) {
    issues.push('no_url');
  }
  
  if (!colG || typeof colG !== 'number') {
    issues.push('no_date');
  }
  
  if (!colH) {
    issues.push('no_author');
  }
  
  if (!colN || (colN !== '–æ—Å' && colN !== '—Ü—Å')) {
    issues.push('no_post_type');
  }
  
  return {
    score: Math.max(0, 100 - (issues.length * 20)),
    issues
  };
}

async function smartAnalysis() {
  console.log('üß† –£–ú–ù–´–ô –ê–ù–ê–õ–ò–ó –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ò');
  console.log('=============================');
  
  const sourceUrl = 'https://docs.google.com/spreadsheets/d/1z4KJfXSNaV8Zw5Qi4hKdVsoKvt9GTSrweWv45URzB4I/edit?gid=1258324199#gid=1258324199';
  const resultUrl = 'https://docs.google.com/spreadsheets/d/18jkeKNIn5QJpzQrDN3RAT3mEYRXlSNKOnNvA3pxoBx8/edit?gid=535445992#gid=535445992';
  
  try {
    // –ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    console.log('üìä –ê–ù–ê–õ–ò–ó –ò–°–•–û–î–ù–û–ì–û –§–ê–ô–õ–ê');
    console.log('========================');
    
    const sourceBuffer = await importFromGoogleSheets(sourceUrl);
    const sourceWorkbook = XLSX.read(sourceBuffer, { type: 'buffer' });
    const sourceSheet = sourceWorkbook.Sheets[sourceWorkbook.SheetNames[0]];
    const sourceData = XLSX.utils.sheet_to_json(sourceSheet, { header: 1 });
    
    const stats = {
      total: 0,
      reviews: 0,
      comments: 0,
      headers: 0,
      empty: 0,
      lowQuality: 0
    };
    
    const platformStats = {};
    const qualityIssues = {};
    
    console.log('\nüìã –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –°–¢–†–û–ö:');
    console.log('=======================');
    
    for (let i = 0; i < sourceData.length; i++) {
      const row = sourceData[i];
      const type = analyzeRowType(row, i);
      const quality = analyzeDataQuality(row, i);
      
      stats.total++;
      stats[type] = (stats[type] || 0) + 1;
      
      if (quality.score < 60) {
        stats.lowQuality++;
      }
      
      // –ê–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º
      if (type === 'review' || type === 'comment') {
        const url = (row[1] || '') + ' ' + (row[3] || '');
        const domain = url.match(/https?:\/\/([^\/]+)/);
        if (domain) {
          const platform = domain[1];
          platformStats[platform] = platformStats[platform] || { reviews: 0, comments: 0 };
          platformStats[platform][type === 'review' ? 'reviews' : 'comments']++;
        }
      }
      
      // –°–±–æ—Ä –ø—Ä–æ–±–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞
      quality.issues.forEach(issue => {
        qualityIssues[issue] = (qualityIssues[issue] || 0) + 1;
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
      if (stats[type] <= 3 && (type === 'review' || type === 'comment')) {
        const text = (row[4] || '').toString().substring(0, 60);
        const postType = row[13] || '–Ω–µ —É–∫–∞–∑–∞–Ω';
        console.log(`${type === 'review' ? 'üìù' : 'üí¨'} –°—Ç—Ä–æ–∫–∞ ${i + 1} (${type}): ${text}... [${postType}]`);
      }
    }
    
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò:');
    console.log('============================');
    Object.entries(stats).forEach(([key, value]) => {
      console.log(`${key}: ${value}`);
    });
    
    console.log('\nüåê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–õ–ê–¢–§–û–†–ú–ê–ú:');
    console.log('============================');
    Object.entries(platformStats)
      .sort(([,a], [,b]) => (b.reviews + b.comments) - (a.reviews + a.comments))
      .slice(0, 10)
      .forEach(([platform, data]) => {
        console.log(`${platform}: ${data.reviews} –æ—Ç–∑—ã–≤–æ–≤, ${data.comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
      });
    
    console.log('\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´ –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•:');
    console.log('============================');
    Object.entries(qualityIssues).forEach(([issue, count]) => {
      console.log(`${issue}: ${count} –∑–∞–ø–∏—Å–µ–π`);
    });
    
    // –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    console.log('\nüéØ –ê–ù–ê–õ–ò–ó –ü–†–ê–í–ò–õ –§–ò–õ–¨–¢–†–ê–¶–ò–ò');
    console.log('===========================');
    
    const resultBuffer = await importFromGoogleSheets(resultUrl);
    const resultWorkbook = XLSX.read(resultBuffer, { type: 'buffer' });
    const resultSheet = resultWorkbook.Sheets[resultWorkbook.SheetNames[0]];
    const resultData = XLSX.utils.sheet_to_json(resultSheet, { header: 1 });
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const resultUrls = new Set();
    let resultReviews = 0;
    let resultComments = 0;
    let inReviewSection = false;
    let inCommentSection = false;
    
    for (let i = 0; i < resultData.length; i++) {
      const row = resultData[i];
      if (row && row[0]) {
        const cellText = String(row[0]).toLowerCase();
        if (cellText === '–æ—Ç–∑—ã–≤—ã') {
          inReviewSection = true;
          inCommentSection = false;
          continue;
        }
        if (cellText.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä')) {
          inReviewSection = false;
          inCommentSection = true;
          continue;
        }
      }
      
      if (row && row[1] && (inReviewSection || inCommentSection)) {
        const url = row[1].toString();
        resultUrls.add(url);
        
        if (inReviewSection) resultReviews++;
        if (inCommentSection) resultComments++;
      }
    }
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –°–û–î–ï–†–ñ–ò–¢:`);
    console.log(`üìù –û—Ç–∑—ã–≤—ã: ${resultReviews}`);
    console.log(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${resultComments}`);
    console.log(`üîó –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ URL: ${resultUrls.size}`);
    
    // –ù–∞–π–¥–µ–º –∫–∞–∫–∏–µ –∑–∞–ø–∏—Å–∏ –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–• –ó–ê–ü–ò–°–ï–ô:');
    console.log('==============================');
    
    let sourceReviews = 0;
    let sourceComments = 0;
    
    for (let i = 0; i < sourceData.length; i++) {
      const row = sourceData[i];
      const type = analyzeRowType(row, i);
      
      if (type === 'review') sourceReviews++;
      if (type === 'comment') sourceComments++;
    }
    
    console.log(`–ò—Å—Ö–æ–¥–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: ${sourceReviews}, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: ${resultReviews} (–∏—Å–∫–ª—é—á–µ–Ω–æ: ${sourceReviews - resultReviews})`);
    console.log(`–ò—Å—Ö–æ–¥–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${sourceComments}, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: ${resultComments} (–∏—Å–∫–ª—é—á–µ–Ω–æ: ${sourceComments - resultComments})`);
    
    // –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    console.log('\nüí° –ü–†–ï–î–õ–ê–ì–ê–ï–ú–´–ï –ü–†–ê–í–ò–õ–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò:');
    console.log('===================================');
    console.log('1. –ò—Å–∫–ª—é—á–∞—Ç—å –∑–∞–ø–∏—Å–∏ –±–µ–∑ URL-–æ–≤ –∏–ª–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ URL-–∞–º–∏');
    console.log('2. –ò—Å–∫–ª—é—á–∞—Ç—å –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å —Ç–µ–∫—Å—Ç–æ–º < 10 —Å–∏–º–≤–æ–ª–æ–≤');
    console.log('3. –ò—Å–∫–ª—é—á–∞—Ç—å –∑–∞–ø–∏—Å–∏ –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞ (–û–°/–¶–°)');
    console.log('4. –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ —Å –¥–∞—Ç–∞–º–∏ –∏ –Ω–∏–∫–∞–º–∏ –∞–≤—Ç–æ—Ä–æ–≤');
    console.log('5. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º: –æ—Ç–∑—ã–≤—ã vs –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ:', error.message);
  }
}

smartAnalysis().catch(console.error); 