const { GoogleSheetsService } = require('./dist/server/services/google-sheets.js');
const ExcelJS = require('exceljs');

async function testBothSources() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–µ–∏—Ö –≤–µ—Ä—Å–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö...\n');

    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ Google Sheets
    console.log('=== –¢–ï–°–¢ 1: –ó–ê–ì–†–£–ó–ö–ê –ò–ó GOOGLE SHEETS ===');
    const googleSheetsUrl = 'https://docs.google.com/spreadsheets/d/1z4KJfXSNaV8Zw5Qi4hKdVsoKvt9GTSrweWv45URzB4I/edit?usp=sharing';
    
    const googleSheetsService = new GoogleSheetsService();
    const googleFilePath = await googleSheetsService.downloadAndSaveSheet(googleSheetsUrl);
    
    console.log('üìÅ Google Sheets —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω:', googleFilePath);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    const workbook1 = new ExcelJS.Workbook();
    await workbook1.xlsx.readFile(googleFilePath);
    
    const worksheet1 = workbook1.getWorksheet(1);
    let googleRows = 0;
    let googleDataRows = [];
    
    worksheet1.eachRow((row, rowNumber) => {
      googleRows++;
      const rowData = [];
      row.eachCell((cell, colNumber) => {
        rowData[colNumber - 1] = cell.value;
      });
      googleDataRows.push(rowData);
    });
    
    console.log(`üìä Google Sheets - –≤—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${googleRows}`);
    console.log(`üìä Google Sheets - –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:`)
    googleDataRows.slice(0, 5).forEach((row, i) => {
      console.log(`  ${i + 1}: ${row.slice(0, 3).map(c => c ? c.toString().substring(0, 50) : '').join(' | ')}`);
    });
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—ã–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    console.log('\n=== –¢–ï–°–¢ 2: –ó–ê–ì–†–£–ó–ö–ê –í–´–ì–†–£–ñ–ï–ù–ù–û–ì–û –§–ê–ô–õ–ê ===');
    const uploadedFilePath = './test_download.xlsx';
    
    console.log('üìÅ –í—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', uploadedFilePath);
    
    const workbook2 = new ExcelJS.Workbook();
    await workbook2.xlsx.readFile(uploadedFilePath);
    
    const worksheet2 = workbook2.getWorksheet(1);
    let uploadedRows = 0;
    let uploadedDataRows = [];
    
    worksheet2.eachRow((row, rowNumber) => {
      uploadedRows++;
      const rowData = [];
      row.eachCell((cell, colNumber) => {
        rowData[colNumber - 1] = cell.value;
      });
      uploadedDataRows.push(rowData);
    });
    
    console.log(`üìä –í—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª - –≤—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${uploadedRows}`);
    console.log(`üìä –í—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª - –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:`)
    uploadedDataRows.slice(0, 5).forEach((row, i) => {
      console.log(`  ${i + 1}: ${row.slice(0, 3).map(c => c ? c.toString().substring(0, 50) : '').join(' | ')}`);
    });
    
    // 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('\n=== –°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ===');
    console.log(`Google Sheets —Å—Ç—Ä–æ–∫: ${googleRows}`);
    console.log(`–í—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—Ç—Ä–æ–∫: ${uploadedRows}`);
    console.log(`–†–∞–∑–Ω–∏—Ü–∞: ${Math.abs(googleRows - uploadedRows)}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö"
    const googleDiscussions = googleDataRows.filter(row => 
      row[0] && row[0].toString().includes('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö')
    );
    const uploadedDiscussions = uploadedDataRows.filter(row => 
      row[0] && row[0].toString().includes('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö')
    );
    
    console.log(`\nüìä "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö":`);
    console.log(`Google Sheets: ${googleDiscussions.length}`);
    console.log(`–í—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${uploadedDiscussions.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∑—ã–≤—ã
    const googleReviews = googleDataRows.filter(row => 
      row[0] && (row[0].toString().includes('–û—Ç–∑—ã–≤') || row[0].toString().includes('–æ—Ç–∑—ã–≤'))
    );
    const uploadedReviews = uploadedDataRows.filter(row => 
      row[0] && (row[0].toString().includes('–û—Ç–∑—ã–≤') || row[0].toString().includes('–æ—Ç–∑—ã–≤'))
    );
    
    console.log(`\nüìä –û—Ç–∑—ã–≤—ã:`);
    console.log(`Google Sheets: ${googleReviews.length}`);
    console.log(`–í—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${uploadedReviews.length}`);
    
    if (googleRows === uploadedRows && googleDiscussions.length === uploadedDiscussions.length) {
      console.log('\n‚úÖ –î–∞–Ω–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã!');
    } else {
      console.log('\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∞–ª—å–Ω–µ–π—à–µ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.error('Stack:', error.stack);
  }
}

testBothSources(); 