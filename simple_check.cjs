const ExcelJS = require('exceljs');
const fs = require('fs');
const path = require('path');

async function simpleCheck() {
  console.log('üìã –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞...');
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const uploadsDir = 'uploads';
    const files = fs.readdirSync(uploadsDir);
    const resultFiles = files.filter(file => file.includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç'));
    
    if (resultFiles.length === 0) {
      console.log('‚ùå –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    const filesWithStats = resultFiles.map(file => ({
      name: file,
      stats: fs.statSync(path.join(uploadsDir, file))
    }));
    
    filesWithStats.sort((a, b) => b.stats.mtime - a.stats.mtime);
    const latestFile = filesWithStats[0].name;
    
    console.log(`üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: ${latestFile}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä: ${filesWithStats[0].stats.size} –±–∞–π—Ç`);
    console.log(`üïí –ò–∑–º–µ–Ω–µ–Ω: ${filesWithStats[0].stats.mtime}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    const filePath = path.join(uploadsDir, latestFile);
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(filePath);
    
    const worksheet = workbook.getWorksheet(1);
    
    console.log('\nüìã –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫:');
    
    for (let i = 1; i <= 10; i++) {
      const row = worksheet.getRow(i);
      const values = [];
      
      for (let j = 1; j <= 8; j++) {
        const cell = row.getCell(j);
        values.push(cell.value || '');
      }
      
      console.log(`${i}: ${values.join(' | ')}`);
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    let totalRows = 0;
    worksheet.eachRow((row) => {
      totalRows++;
    });
    
    console.log(`\nüìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: ${totalRows}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–∞
    const row1 = worksheet.getRow(1);
    const headerBgColor = row1.getCell(1).fill?.fgColor?.argb;
    console.log(`üé® –¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞: ${headerBgColor}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

simpleCheck(); 