const fs = require('fs');
const path = require('path');

async function superFinalTest() {
  console.log('üéä –°–£–ü–ï–†-–§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ üéä');
  console.log('üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');
  
  try {
    // –ñ–¥–µ–º 4 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    await new Promise(resolve => setTimeout(resolve, 4000));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch('http://localhost:5000/api/import-google-sheets', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url: 'https://docs.google.com/spreadsheets/d/1z4KJfXSNaV8Zw5Qi4hKdVsoKvt9GTSrweWv45URzB4I/edit?usp=sharing'
      })
    });
    
    const result = await response.json();
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, ID:', result.fileId);
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    for (let i = 0; i < 10; i++) {
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const statusResponse = await fetch(`http://localhost:5000/api/files/${result.fileId}`);
      const fileInfo = await statusResponse.json();
      
      if (fileInfo.status === 'completed') {
        console.log('üéâ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω!');
        
        // –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª
        const files = fs.readdirSync('uploads');
        const today = new Date().toISOString().slice(0, 10).replace(/-/g, '');
        const resultFiles = files.filter(f => f.includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç') && f.includes(today));
        
        if (resultFiles.length > 0) {
          const latestFile = resultFiles[resultFiles.length - 1];
          console.log(`üìÅ –§–∞–π–ª: ${latestFile}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
          const ExcelJS = require('exceljs');
          const workbook = new ExcelJS.Workbook();
          await workbook.xlsx.readFile(path.join('uploads', latestFile));
          const worksheet = workbook.getWorksheet(1);
          
          const row1 = worksheet.getRow(1);
          const headerColor = row1.getCell(1).fill?.fgColor?.argb;
          
          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          let reviewCount = 0, commentCount = 0;
          worksheet.eachRow((row, rowNumber) => {
            if (rowNumber > 5) {
              const postType = row.getCell(8).value;
              if (postType === '–û–°') reviewCount++;
              if (postType === '–¶–°') commentCount++;
            }
          });
          
          console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
          console.log(`üìù –û—Ç–∑—ã–≤–æ–≤: ${reviewCount}`);
          console.log(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${commentCount}`);
          console.log(`üé® –¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞: ${headerColor}`);
          console.log(`üìë –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${row1.getCell(1).value}`);
          
          // –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
          const allGood = 
            reviewCount === 18 && 
            commentCount === 519 && 
            headerColor === 'FF2D1341' && 
            row1.getCell(1).value === '–ü—Ä–æ–¥—É–∫—Ç';
          
          if (allGood) {
            console.log('\nüéâüéâüéâ –í–°–ï –ò–î–ï–ê–õ–¨–ù–û! üéâüéâüéâ');
            console.log('‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!');
            console.log('üöÄ 18 –æ—Ç–∑—ã–≤–æ–≤, 519 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
            console.log('üé® –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
            console.log('üìä –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö');
            console.log('üíº –ì–û–¢–û–í–û –ö –ü–†–û–î–ê–ö–®–ù–£!');
            return true;
          } else {
            console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã');
            return false;
          }
        }
        break;
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    return false;
  }
}

superFinalTest().then(success => {
  if (success) {
    console.log('\nüéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! üéä');
    console.log('üî• ExcelEngineer —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!');
  } else {
    console.log('\n‚ö†Ô∏è –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
  }
}); 