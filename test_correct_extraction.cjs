const XLSX = require('xlsx');

async function testCorrectExtraction() {
  console.log('üîç –¢–ï–°–¢ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•');
  console.log('=====================================');
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  const testFile = 'uploads/–§–æ—Ä—Ç–µ–¥–µ—Ç—Ä–∏–º_ORM_–æ—Ç—á–µ—Ç_–∏—Å—Ö–æ–¥–Ω–∏–∫_1751040742705.xlsx';
  
  try {
    const workbook = XLSX.readFile(testFile);
    console.log('üìã –õ–∏—Å—Ç—ã –≤ —Ñ–∞–π–ª–µ:', workbook.SheetNames);
    
    // –ù–∞–π–¥–µ–º –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –º–µ—Å—è—Ü–∞
    const months = ["–Ø–Ω–≤25", "–§–µ–≤25", "–ú–∞—Ä25", "–ú–∞—Ä—Ç25", "–ê–ø—Ä25", "–ú–∞–π25", "–ò—é–Ω25", 
                   "–ò—é–ª25", "–ê–≤–≥25", "–°–µ–Ω25", "–û–∫—Ç25", "–ù–æ—è25", "–î–µ–∫25"];
    
    const sheetName = workbook.SheetNames.find(name => 
      months.some(month => name.includes(month))
    );
    
    if (!sheetName) {
      console.error('‚ùå –õ–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –º–µ—Å—è—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('üìä –ù–∞–π–¥–µ–Ω –ª–∏—Å—Ç:', sheetName);
    
    const sheet = workbook.Sheets[sheetName];
    const data = XLSX.utils.sheet_to_json(sheet, { header: 1 });
    
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ: ${data.length}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
    // –ö–æ–ª–æ–Ω–∫–∏: [1, 3, 4, 6, 7, 10, 16, 13] = B, D, E, G, H, K, Q, N (–∏–Ω–¥–µ–∫—Å—ã 1, 3, 4, 6, 7, 10, 16, 13)
    
    console.log('\nüî∏ –û–¢–ó–´–í–´ OTZ (—Å—Ç—Ä–æ–∫–∏ 6-15):');
    const reviewsOtz = [];
    for (let i = 6; i < 15; i++) {
      if (data[i]) {
        const row = [
          data[i][1], // B - –ü–ª–æ—â–∞–¥–∫–∞
          data[i][3], // D - –¢–µ–º–∞
          data[i][4], // E - –¢–µ–∫—Å—Ç
          data[i][6], // G - –î–∞—Ç–∞
          data[i][7], // H - –ù–∏–∫
          data[i][10], // K - –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
          data[i][16], // Q - –í–æ–≤–ª–µ—á–µ–Ω–∏–µ
          data[i][13]  // N - –¢–∏–ø –ø–æ—Å—Ç–∞
        ];
        reviewsOtz.push(row);
        console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 1}:`, row);
      }
    }
    
    console.log('\nüî∏ –û–¢–ó–´–í–´ APT (—Å—Ç—Ä–æ–∫–∏ 15-28):');
    const reviewsApt = [];
    for (let i = 15; i < 28; i++) {
      if (data[i]) {
        const row = [
          data[i][1], // B - –ü–ª–æ—â–∞–¥–∫–∞
          data[i][3], // D - –¢–µ–º–∞
          data[i][4], // E - –¢–µ–∫—Å—Ç
          data[i][6], // G - –î–∞—Ç–∞
          data[i][7], // H - –ù–∏–∫
          data[i][10], // K - –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
          data[i][16], // Q - –í–æ–≤–ª–µ—á–µ–Ω–∏–µ
          data[i][13]  // N - –¢–∏–ø –ø–æ—Å—Ç–∞
        ];
        reviewsApt.push(row);
        console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 1}:`, row);
      }
    }
    
    console.log('\nüî∏ –¢–û–ü-20 (—Å—Ç—Ä–æ–∫–∏ 31-51):');
    const top20 = [];
    for (let i = 31; i < 51; i++) {
      if (data[i]) {
        const row = [
          data[i][1], // B - –ü–ª–æ—â–∞–¥–∫–∞
          data[i][3], // D - –¢–µ–º–∞
          data[i][4], // E - –¢–µ–∫—Å—Ç
          data[i][6], // G - –î–∞—Ç–∞
          data[i][7], // H - –ù–∏–∫
          data[i][10], // K - –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
          data[i][16], // Q - –í–æ–≤–ª–µ—á–µ–Ω–∏–µ
          data[i][13]  // N - –¢–∏–ø –ø–æ—Å—Ç–∞
        ];
        top20.push(row);
        console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 1}:`, row);
      }
    }
    
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log('===============');
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã (—Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
    const validReviewsOtz = reviewsOtz.filter(row => row[0] || row[1] || row[2]);
    const validReviewsApt = reviewsApt.filter(row => row[0] || row[1] || row[2]);
    const allReviews = validReviewsOtz.length + validReviewsApt.length;
    
    console.log(`üìù –û—Ç–∑—ã–≤—ã OTZ: ${validReviewsOtz.length}`);
    console.log(`üìù –û—Ç–∑—ã–≤—ã APT: ${validReviewsApt.length}`);
    console.log(`üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: ${allReviews}`);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
    const validTop20 = top20.filter(row => row[0] || row[1] || row[2]);
    const activeDiscussions = 0; // –ü–æ –ª–æ–≥–∏–∫–µ Python - –ø—É—Å—Ç–æ–π DataFrame
    const allComments = validTop20.length + activeDiscussions;
    
    console.log(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–æ–ø-20: ${validTop20.length}`);
    console.log(`üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: ${activeDiscussions}`);
    console.log(`üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${allComments}`);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã (—Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —á–∏—Å–ª–∞)
    function cleanViews(value) {
      if (!value || value === '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' || value === '') return 0;
      const cleaned = String(value).replace(/[^0-9.]/g, '');
      const num = parseFloat(cleaned);
      return isNaN(num) ? 0 : num;
    }
    
    let totalViews = 0;
    const allData = [...validReviewsOtz, ...validReviewsApt, ...validTop20];
    
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–°–ú–û–¢–†–û–í:');
    allData.forEach((row, idx) => {
      const views = cleanViews(row[5]); // –ò–Ω–¥–µ–∫—Å 5 = –∫–æ–ª–æ–Ω–∫–∞ K (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã)
      if (views > 0) {
        totalViews += views;
        console.log(`${idx + 1}. –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${row[5]} ‚Üí ${views}`);
      }
    });
    
    console.log(`üëÄ –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${totalViews.toLocaleString()}`);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ
    const discussionsData = [...validTop20]; // –¢–æ–ª—å–∫–æ —Ç–æ–ø-20, active –ø—É—Å—Ç–æ–π
    const engagementCount = discussionsData.filter(row => 
      String(row[6]).toLowerCase().includes('–µ—Å—Ç—å')
    ).length;
    
    const engagementPct = discussionsData.length > 0 ? 
      Math.round((engagementCount / discussionsData.length) * 100) : 0;
    
    console.log(`üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏—è —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º: ${engagementCount} –∏–∑ ${discussionsData.length}`);
    console.log(`üìä –î–æ–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è: ${engagementPct}%`);
    
    console.log('\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log('========================');
    console.log(`–û—Ç–∑—ã–≤—ã: ${allReviews}`);
    console.log(`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${allComments}`);
    console.log(`–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${totalViews.toLocaleString()}`);
    console.log(`–í–æ–≤–ª–µ—á–µ–Ω–∏–µ: ${engagementPct}%`);
    
    console.log('\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –° –û–ñ–ò–î–ê–ï–ú–´–ú–ò:');
    console.log('==========================');
    console.log(`–û—Ç–∑—ã–≤—ã: ${allReviews} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: 18) ${allReviews === 18 ? '‚úÖ' : '‚ùå'}`);
    console.log(`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${allComments} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: 519) ${allComments === 519 ? '‚úÖ' : '‚ùå'}`);
    console.log(`–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${totalViews.toLocaleString()} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: 3,398,560) ${totalViews === 3398560 ? '‚úÖ' : '‚ùå'}`);
    console.log(`–í–æ–≤–ª–µ—á–µ–Ω–∏–µ: ${engagementPct}% (–æ–∂–∏–¥–∞–µ—Ç—Å—è: 20%) ${engagementPct === 20 ? '‚úÖ' : '‚ùå'}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

testCorrectExtraction().catch(console.error); 