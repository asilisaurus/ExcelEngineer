const axios = require('axios');
const XLSX = require('xlsx');

function extractGoogleSheetsInfo(url) {
  try {
    const patterns = [
      /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/,
      /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)\/edit/,
      /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)\/edit#gid=(\d+)/
    ];
    
    let spreadsheetId = null;
    let gid = null;
    
    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match) {
        spreadsheetId = match[1];
        if (match[2]) {
          gid = match[2];
        }
        break;
      }
    }
    
    if (!gid) {
      const gidMatch = url.match(/[#&]gid=(\d+)/);
      if (gidMatch) {
        gid = gidMatch[1];
      }
    }
    
    return { spreadsheetId, gid };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ URL:', error);
    return { spreadsheetId: null, gid: null };
  }
}

async function importFromGoogleSheets(url) {
  const { spreadsheetId, gid } = extractGoogleSheetsInfo(url);
  
  if (!spreadsheetId) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π URL Google –¢–∞–±–ª–∏—Ü');
  }
  
  const exportUrl = `https://docs.google.com/spreadsheets/d/${spreadsheetId}/export?format=xlsx${gid ? `&gid=${gid}` : ''}`;
  
  try {
    const response = await axios.get(exportUrl, {
      responseType: 'arraybuffer',
      timeout: 30000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    return Buffer.from(response.data);
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
  }
}

async function analyzeStructure() {
  console.log('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•');
  console.log('====================================');
  
  const sourceUrl = 'https://docs.google.com/spreadsheets/d/1z4KJfXSNaV8Zw5Qi4hKdVsoKvt9GTSrweWv45URzB4I/edit?gid=1258324199#gid=1258324199';
  
  try {
    const sourceBuffer = await importFromGoogleSheets(sourceUrl);
    const sourceWorkbook = XLSX.read(sourceBuffer, { type: 'buffer' });
    
    const sheetName = sourceWorkbook.SheetNames[0];
    const sheet = sourceWorkbook.Sheets[sheetName];
    const data = XLSX.utils.sheet_to_json(sheet, { header: 1 });
    
    console.log('üìä –ê–ù–ê–õ–ò–ó –ö–õ–Æ–ß–ï–í–´–• –°–¢–†–û–ö:');
    console.log('========================');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
    for (let i = 0; i < Math.min(10, data.length); i++) {
      console.log(`\nüìã –°–¢–†–û–ö–ê ${i + 1}:`);
      
      if (data[i]) {
        data[i].forEach((cell, colIndex) => {
          if (cell !== undefined && cell !== null && cell !== '') {
            console.log(`  –ö–æ–ª–æ–Ω–∫–∞ ${colIndex} (${String.fromCharCode(65 + colIndex)}): ${cell}`);
          }
        });
      }
    }
    
    console.log('\nüîç –ü–û–ò–°–ö –ö–õ–Æ–ß–ï–í–´–• –ó–ù–ê–ß–ï–ù–ò–ô:');
    console.log('===========================');
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –≤–∞–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      if (row && row.length > 0) {
        
        // –ü–æ–∏—Å–∫ —á–∏—Å–µ–ª 18, 519, 3398560
        const rowText = row.join(' ').toLowerCase();
        
        if (rowText.includes('18') || rowText.includes('519') || rowText.includes('3398560')) {
          console.log(`\nüìç –°–¢–†–û–ö–ê ${i + 1} (—Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è):`);
          row.forEach((cell, colIndex) => {
            if (cell !== undefined && cell !== null && cell !== '') {
              console.log(`  ${String.fromCharCode(65 + colIndex)}${i + 1}: ${cell}`);
            }
          });
        }
        
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—Ç–∑—ã–≤–∞–º–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        if (rowText.includes('–æ—Ç–∑—ã–≤') || rowText.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä') || rowText.includes('—Ç–æ–ø')) {
          console.log(`\nüìù –°–¢–†–û–ö–ê ${i + 1} (–æ—Ç–∑—ã–≤—ã/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏):`);
          row.forEach((cell, colIndex) => {
            if (cell !== undefined && cell !== null && cell !== '') {
              console.log(`  ${String.fromCharCode(65 + colIndex)}${i + 1}: ${cell}`);
            }
          });
        }
      }
    }
    
    console.log('\nüîç –ü–û–ò–°–ö –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•:');
    console.log('==============================');
    
    // –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      if (row && row.length > 0) {
        row.forEach((cell, colIndex) => {
          if (typeof cell === 'number') {
            if (cell === 18 || cell === 519 || cell === 3398560 || cell === 22 || cell === 650) {
              console.log(`üìä –ß–ò–°–õ–û ${cell} –Ω–∞–π–¥–µ–Ω–æ –≤ ${String.fromCharCode(65 + colIndex)}${i + 1}`);
            }
          }
        });
      }
    }
    
    console.log('\nüéØ –ê–ù–ê–õ–ò–ó –î–ò–ê–ü–ê–ó–û–ù–û–í –ü–û PYTHON –õ–û–ì–ò–ö–ï:');
    console.log('=====================================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∫–∞–∫ –≤ Python –∫–æ–¥–µ
    console.log('\nüìä –û–¢–ó–´–í–´ OTZ (—Å—Ç—Ä–æ–∫–∏ 6-15):');
    let otzCount = 0;
    for (let i = 6; i < 15; i++) {
      if (data[i]) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
        const hasData = data[i][1] || data[i][3] || data[i][4]; // B, D, E
        if (hasData) {
          otzCount++;
          console.log(`  –°—Ç—Ä–æ–∫–∞ ${i + 1}: ${data[i][1] || ''} | ${data[i][3] || ''} | ${data[i][4] || ''}`);
        }
      }
    }
    console.log(`üìù –û—Ç–∑—ã–≤—ã OTZ: ${otzCount}`);
    
    console.log('\nüìä –û–¢–ó–´–í–´ APT (—Å—Ç—Ä–æ–∫–∏ 15-28):');
    let aptCount = 0;
    for (let i = 15; i < 28; i++) {
      if (data[i]) {
        const hasData = data[i][1] || data[i][3] || data[i][4]; // B, D, E
        if (hasData) {
          aptCount++;
          console.log(`  –°—Ç—Ä–æ–∫–∞ ${i + 1}: ${data[i][1] || ''} | ${data[i][3] || ''} | ${data[i][4] || ''}`);
        }
      }
    }
    console.log(`üìù –û—Ç–∑—ã–≤—ã APT: ${aptCount}`);
    
    console.log('\nüìä –¢–û–ü-20 (—Å—Ç—Ä–æ–∫–∏ 31-51):');
    let top20Count = 0;
    for (let i = 31; i < 51; i++) {
      if (data[i]) {
        const hasData = data[i][1] || data[i][3] || data[i][4]; // B, D, E
        if (hasData) {
          top20Count++;
          console.log(`  –°—Ç—Ä–æ–∫–∞ ${i + 1}: ${data[i][1] || ''} | ${data[i][3] || ''} | ${data[i][4] || ''}`);
        }
      }
    }
    console.log(`üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–û–ü-20: ${top20Count}`);
    
    console.log('\nüéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log('=======================');
    console.log(`–û—Ç–∑—ã–≤—ã OTZ: ${otzCount}`);
    console.log(`–û—Ç–∑—ã–≤—ã APT: ${aptCount}`);
    console.log(`–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: ${otzCount + aptCount}`);
    console.log(`–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¢–û–ü-20: ${top20Count}`);
    console.log(`–í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${top20Count}` + ' (–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è = 0)');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const viewsMatch = data[0] && data[0][5] && String(data[0][5]).match(/(\d+)/);
    const totalViews = viewsMatch ? parseInt(viewsMatch[1]) : 0;
    console.log(`–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${totalViews.toLocaleString()}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error.message);
  }
}

analyzeStructure().catch(console.error); 