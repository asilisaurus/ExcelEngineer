import * as XLSX from 'xlsx';
import fs from 'fs';

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–¶–ï–°–°–û–†–ê V3 - –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´');
console.log('üìä –ü–æ–∏—Å–∫ –ø—Ä–∏—á–∏–Ω—ã 0 –∑–∞–ø–∏—Å–µ–π\n');

const sourceFile = 'source_structure_analysis.xlsx';

if (!fs.existsSync(sourceFile)) {
  console.log(`‚ùå –§–∞–π–ª ${sourceFile} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
  process.exit(1);
}

const buffer = fs.readFileSync(sourceFile);
const workbook = XLSX.read(buffer, { 
  type: 'buffer',
  cellDates: true,
  raw: false
});

console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã: ${workbook.SheetNames.join(', ')}`);

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏—Å—Ç –ò—é–Ω—å25
const sheetName = '–ò—é–Ω—å25';
const worksheet = workbook.Sheets[sheetName];
const data = XLSX.utils.sheet_to_json(worksheet, { 
  header: 1, 
  defval: '',
  raw: false
});

console.log(`\nüìä –ê–Ω–∞–ª–∏–∑ –ª–∏—Å—Ç–∞ "${sheetName}"`);
console.log(`üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${data.length}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ 4
console.log('\nüîç –ó–ê–ì–û–õ–û–í–ö–ò –í –°–¢–†–û–ö–ï 4:');
if (data[3]) {
  data[3].forEach((header, index) => {
    if (header) {
      console.log(`   ${index}: "${header}"`);
    }
  });
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
console.log('\nüîç –ü–ï–†–í–´–ï 10 –°–¢–†–û–ö –î–ê–ù–ù–´–• (—Å —Å—Ç—Ä–æ–∫–∏ 5):');
for (let i = 4; i < Math.min(14, data.length); i++) {
  const row = data[i];
  if (row && row.length > 0) {
    console.log(`\n   –°–¢–†–û–ö–ê ${i + 1}:`);
    console.log(`     –¢–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (A): "${row[0] || '–ø—É—Å—Ç–æ'}"`);
    console.log(`     –ü–ª–æ—â–∞–¥–∫–∞ (B): "${row[1] || '–ø—É—Å—Ç–æ'}"`);
    console.log(`     –¢–µ–∫—Å—Ç (E): "${(row[4] || '').substring(0, 50)}..."`);
    console.log(`     –ü—Ä–æ—Å–º–æ—Ç—Ä—ã (L): "${row[11] || '–ø—É—Å—Ç–æ'}"`);
    console.log(`     –¢–∏–ø –ø–æ—Å—Ç–∞ (O): "${row[14] || '–ø—É—Å—Ç–æ'}"`);
  }
}

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–µ "–¢–∏–ø –ø–æ—Å—Ç–∞"
console.log('\nüîç –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø –í –ö–û–õ–û–ù–ö–ï "–¢–ò–ü –ü–û–°–¢–ê" (O):');
const postTypes = new Set();
for (let i = 4; i < data.length; i++) {
  const row = data[i];
  if (row && row[14]) {
    postTypes.add(row[14].toString().trim());
  }
}

console.log(`   –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤: ${postTypes.size}`);
Array.from(postTypes).forEach(type => {
  console.log(`   - "${type}"`);
});

// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
console.log('\nüìä –ö–û–õ–ò–ß–ï–°–¢–í–û –ó–ê–ü–ò–°–ï–ô –ü–û –¢–ò–ü–ê–ú:');
const typeCounts = {};
for (let i = 4; i < data.length; i++) {
  const row = data[i];
  if (row && row[14]) {
    const type = row[14].toString().trim();
    typeCounts[type] = (typeCounts[type] || 0) + 1;
  }
}

Object.entries(typeCounts).forEach(([type, count]) => {
  console.log(`   "${type}": ${count} –∑–∞–ø–∏—Å–µ–π`);
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
console.log('\nüîç –ê–ù–ê–õ–ò–ó –ó–ê–ü–ò–°–ï–ô –° –¢–ï–ö–°–¢–û–ú:');
let withText = 0;
let withViews = 0;
let withValidData = 0;

for (let i = 4; i < data.length; i++) {
  const row = data[i];
  if (row) {
    const text = row[4] || '';
    const views = parseInt(row[11]) || 0;
    const platform = row[1] || '';
    const postType = row[14] || '';
    
    if (text.length > 0) withText++;
    if (views > 0) withViews++;
    if (text.length > 0 && platform.length > 0) withValidData++;
  }
}

console.log(`   –ó–∞–ø–∏—Å–µ–π —Å —Ç–µ–∫—Å—Ç–æ–º: ${withText}`);
console.log(`   –ó–∞–ø–∏—Å–µ–π —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏: ${withViews}`);
console.log(`   –ó–∞–ø–∏—Å–µ–π —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${withValidData}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –û–°, –¶–°, –ü–°
console.log('\nüîç –ü–†–ò–ú–ï–†–´ –ó–ê–ü–ò–°–ï–ô –ü–û –¢–ò–ü–ê–ú:');
const examples = { '–û–°': [], '–¶–°': [], '–ü–°': [] };

for (let i = 4; i < data.length; i++) {
  const row = data[i];
  if (row && row[14]) {
    const type = row[14].toString().trim().toUpperCase();
    if (examples[type] && examples[type].length < 3) {
      examples[type].push({
        platform: row[1] || '',
        text: (row[4] || '').substring(0, 100),
        views: parseInt(row[11]) || 0,
        type: row[14] || ''
      });
    }
  }
}

Object.entries(examples).forEach(([type, records]) => {
  console.log(`\n   ${type} (${records.length} –ø—Ä–∏–º–µ—Ä–æ–≤):`);
  records.forEach((record, index) => {
    console.log(`     ${index + 1}. –ü–ª–æ—â–∞–¥–∫–∞: "${record.platform}"`);
    console.log(`        –¢–µ–∫—Å—Ç: "${record.text}..."`);
    console.log(`        –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${record.views}`);
    console.log(`        –¢–∏–ø: "${record.type}"`);
  });
});

console.log('\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');