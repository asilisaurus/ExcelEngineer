const XLSX = require('xlsx');
const fs = require('fs');

console.log('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–°–ú–û–¢–†–û–í');
console.log('==============================');

// –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
const buffer = fs.readFileSync('uploads/Fortedetrim ORM report source.xlsx');
const workbook = XLSX.read(buffer, { type: 'buffer' });
const worksheet = workbook.Sheets[workbook.SheetNames[0]];
const data = XLSX.utils.sheet_to_json(worksheet, { header: 1, raw: true });

console.log('üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö...');

let totalViews = 0;
let viewsFound = 0;
let viewsData = [];

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
for (let i = 0; i < data.length; i++) {
  const row = data[i];
  if (!row || !row[0]) continue;
  
  const firstCell = row[0].toString().toLowerCase();
  
  if (firstCell.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    let rowViews = 0;
    let viewsColumn = '';
    
    for (let col = 6; col < 20; col++) {
      if (row[col] && typeof row[col] === 'number' && row[col] > 100 && row[col] < 1000000) {
        // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        if (row[col] > rowViews) {
          rowViews = row[col];
          viewsColumn = `–ö–æ–ª–æ–Ω–∫–∞ ${String.fromCharCode(65 + col)} (${col})`;
        }
      }
    }
    
    if (rowViews > 0) {
      totalViews += rowViews;
      viewsFound++;
      viewsData.push({
        —Å—Ç—Ä–æ–∫–∞: i + 1,
        –ø–ª–æ—â–∞–¥–∫–∞: row[1] || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: rowViews,
        –∫–æ–ª–æ–Ω–∫–∞: viewsColumn,
        –Ω–∏–∫: row[7] || '–ù–µ —É–∫–∞–∑–∞–Ω'
      });
    }
  }
}

console.log(`\nüìä –ò–¢–û–ì–ò –ê–ù–ê–õ–ò–ó–ê –ü–†–û–°–ú–û–¢–†–û–í:`);
console.log('============================');
console.log('üëÅÔ∏è –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:', totalViews);
console.log('üìà –ó–∞–ø–∏—Å–µ–π —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏:', viewsFound);
console.log('üìâ –ó–∞–ø–∏—Å–µ–π –±–µ–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:', 649 - viewsFound);

console.log('\nüîç –ü–ï–†–í–´–ï 20 –ó–ê–ü–ò–°–ï–ô –° –ü–†–û–°–ú–û–¢–†–ê–ú–ò:');
console.log('===================================');
viewsData.slice(0, 20).forEach((item, index) => {
  console.log(`${index + 1}. –°—Ç—Ä–æ–∫–∞ ${item.—Å—Ç—Ä–æ–∫–∞}: ${item.–ø—Ä–æ—Å–º–æ—Ç—Ä—ã} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (${item.–∫–æ–ª–æ–Ω–∫–∞})`);
  console.log(`   –ü–ª–æ—â–∞–¥–∫–∞: ${item.–ø–ª–æ—â–∞–¥–∫–∞.substring(0, 50)}...`);
  console.log(`   –ù–∏–∫: ${item.–Ω–∏–∫}`);
  console.log('');
});

console.log('\nüìã –ê–ù–ê–õ–ò–ó –ö–û–õ–û–ù–û–ö:');
console.log('==================');
const columnStats = {};
viewsData.forEach(item => {
  if (!columnStats[item.–∫–æ–ª–æ–Ω–∫–∞]) {
    columnStats[item.–∫–æ–ª–æ–Ω–∫–∞] = 0;
  }
  columnStats[item.–∫–æ–ª–æ–Ω–∫–∞]++;
});

Object.entries(columnStats).forEach(([column, count]) => {
  console.log(`${column}: ${count} –∑–∞–ø–∏—Å–µ–π`);
});

console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.'); 