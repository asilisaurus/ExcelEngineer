/**
 * üöÄ ULTIMATE GOOGLE APPS SCRIPT PROCESSOR
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∏ —Å–∏—Å—Ç–µ–º–æ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –ê–≤—Ç–æ—Ä: AI Assistant
 * –í–µ—Ä—Å–∏—è: 3.0.0 - ULTIMATE
 * –î–∞—Ç–∞: 2025
 */

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

const ULTIMATE_CONFIG = {
  // ID —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
  TEST_SHEET_ID: '1RT8T5gnDPe0KMikTmVNdSvxqDal3aQUmelpEwItgxMI',
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  DIAGNOSTICS: {
    ENABLE_DETAILED_LOGGING: true,
    LOG_EVERY_ROW: false,
    VALIDATE_EACH_STEP: true,
    EXPORT_DEBUG_DATA: true
  },
  
  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (—É—Ç–æ—á–Ω–µ–Ω–Ω–∞—è)
  DATA_STRUCTURE: {
    HEADER_ROW: 4,        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ 4-–π —Å—Ç—Ä–æ–∫–µ
    DATA_START_ROW: 5,    // –î–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 5-–π —Å—Ç—Ä–æ–∫–∏
    INFO_ROWS: [1, 2, 3]  // –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö 1-3
  },
  
  // –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ (–≥–∏–±–∫–∏–π)
  COLUMN_MAPPING: {
    '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è': 'placement_type',
    '–ø–ª–æ—â–∞–¥–∫–∞': 'platform',
    '–ø—Ä–æ–¥—É–∫—Ç': 'product',
    '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ': 'message_link',
    '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è': 'message_text',
    '—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏': 'approval_comments',
    '–¥–∞—Ç–∞': 'date',
    '–Ω–∏–∫': 'nickname',
    '–∞–≤—Ç–æ—Ä': 'author',
    '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–µ–º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ': 'start_views',
    '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞': 'end_views',
    '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ': 'views_gained',
    '–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ': 'engagement',
    '—Ç–∏–ø –ø–æ—Å—Ç–∞': 'post_type'
  },
  
  // –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–æ—á–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)
  CONTENT_TYPES: {
    REVIEWS: ['–æ—Å', '–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', '–æ—Ç–∑—ã–≤', '–æ—Ç–∑—ã–≤—ã'],
    TARGETED: ['—Ü—Å', '—Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', '—Ü–µ–ª–µ–≤—ã–µ', '—Ü–µ–ª–µ–≤—ã–µ —Å–∞–π—Ç—ã'],
    SOCIAL: ['–ø—Å', '–ø–ª–æ—â–∞–¥–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ', '—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ', '–ø–ª–æ—â–∞–¥–∫–∏'],
    DISCUSSIONS: ['–æ–±—Å—É–∂–¥–µ–Ω–∏—è', '–¥–∏—Å–∫—É—Å—Å–∏–∏', '—Ñ–æ—Ä—É–º—ã']
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–∞
  OUTPUT: {
    CREATE_SEPARATE_SHEET: true,
    SHEET_NAME_TEMPLATE: '–û—Ç—á–µ—Ç_{month}_{year}',
    ADD_TOTAL_ROW: true,
    FORMAT_NUMBERS: true,
    ADD_STATISTICS: true
  }
};

// ==================== –ö–õ–ê–°–° ULTIMATE PROCESSOR ====================

class UltimateGoogleAppsScriptProcessor {
  constructor() {
    this.reset();
  }
  
  reset() {
    this.diagnostics = {
      startTime: new Date(),
      steps: [],
      errors: [],
      warnings: [],
      statistics: {
        totalRows: 0,
        processedRows: 0,
        reviewsCount: 0,
        targetedCount: 0,
        socialCount: 0,
        totalViews: 0,
        totalEngagement: 0
      }
    };
    
    this.processedData = {
      reviews: [],
      targeted: [],
      social: [],
      discussions: []
    };
    
    this.columnMapping = {};
    this.monthInfo = null;
  }
  
  // ==================== –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î ====================
  
  /**
   * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  processSheet(sheetId = null, sheetName = null) {
    try {
      this.log('üöÄ –ó–ê–ü–£–°–ö ULTIMATE PROCESSOR');
      this.log('============================');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω
      const targetSheetId = sheetId || ULTIMATE_CONFIG.TEST_SHEET_ID;
      
      this.log(`üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: ${targetSheetId}`);
      
      // 1. –û—Ç–∫—Ä—ã—Ç–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      const spreadsheet = this.openSpreadsheet(targetSheetId);
      const sheet = this.selectSheet(spreadsheet, sheetName);
      
      // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
      const rawData = this.getData(sheet);
      
      // 3. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
      this.analyzeDataStructure(rawData);
      
      // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      this.processData(rawData);
      
      // 5. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
      const resultSheet = this.createReport(spreadsheet);
      
      // 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      this.finalizeDiagnostics();
      
      this.log('‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û');
      
      return {
        success: true,
        resultSheetId: spreadsheet.getId(),
        resultSheetName: resultSheet.getName(),
        statistics: this.diagnostics.statistics,
        diagnostics: this.diagnostics
      };
      
    } catch (error) {
      this.logError('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê', error);
      return {
        success: false,
        error: error.toString(),
        diagnostics: this.diagnostics
      };
    }
  }
  
  // ==================== –†–ê–ë–û–¢–ê –° –¢–ê–ë–õ–ò–¶–ê–ú–ò ====================
  
  openSpreadsheet(sheetId) {
    this.log(`üìã –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ${sheetId}`);
    
    try {
      const spreadsheet = SpreadsheetApp.openById(sheetId);
      this.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞: "${spreadsheet.getName()}"`);
      return spreadsheet;
    } catch (error) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É: ${error.message}`);
    }
  }
  
  selectSheet(spreadsheet, sheetName) {
    const sheets = spreadsheet.getSheets();
    this.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: ${sheets.length}`);
    
    let targetSheet = null;
    
    if (sheetName) {
      // –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
      targetSheet = sheets.find(sheet => sheet.getName() === sheetName);
      if (!targetSheet) {
        this.logWarning(`‚ö†Ô∏è –õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    }
    
    if (!targetSheet) {
      // –ü–æ–∏—Å–∫ –ª–∏—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
      targetSheet = this.findCurrentMonthSheet(sheets);
    }
    
    if (!targetSheet) {
      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
      targetSheet = sheets[0];
      this.logWarning('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç');
    }
    
    this.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: "${targetSheet.getName()}"`);
    return targetSheet;
  }
  
  findCurrentMonthSheet(sheets) {
    const currentMonth = new Date().getMonth();
    const monthNames = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', 
                       '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'];
    
    // –ü–æ–∏—Å–∫ –ª–∏—Å—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞
    for (const sheet of sheets) {
      const sheetName = sheet.getName().toLowerCase();
      if (sheetName.includes(monthNames[currentMonth])) {
        return sheet;
      }
    }
    
    return null;
  }
  
  getData(sheet) {
    const lastRow = sheet.getLastRow();
    const lastColumn = sheet.getLastColumn();
    
    this.log(`üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${lastRow}x${lastColumn}`);
    
    if (lastRow === 0 || lastColumn === 0) {
      throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
    
    const data = sheet.getRange(1, 1, lastRow, lastColumn).getValues();
    this.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    
    this.diagnostics.statistics.totalRows = data.length;
    
    return data;
  }
  
  // ==================== –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ ====================
  
  analyzeDataStructure(data) {
    this.log('üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•');
    this.log('=========================');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    this.log('üìã –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...');
    
    let headerRow = -1;
    let maxMatches = 0;
    
    for (let i = 0; i < Math.min(10, data.length); i++) {
      const row = data[i];
      const rowText = row.join(' ').toLowerCase();
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
      const keyWords = ['—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', '–ø–ª–æ—â–∞–¥–∫–∞', '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–¥–∞—Ç–∞', '–∞–≤—Ç–æ—Ä'];
      const matches = keyWords.filter(keyword => rowText.includes(keyword)).length;
      
      if (matches > maxMatches) {
        maxMatches = matches;
        headerRow = i;
      }
      
      this.log(`  –°—Ç—Ä–æ–∫–∞ ${i + 1}: ${matches} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - [${row.slice(0, 3).join(', ')}...]`);
    }
    
    if (headerRow >= 0) {
      this.log(`‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ ${headerRow + 1}`);
      this.createColumnMapping(data[headerRow]);
    } else {
      this.logWarning('‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥');
      this.createDefaultMapping();
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª—ã –¥–∞–Ω–Ω—ã—Ö
    this.analyzeSections(data);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü
    this.detectMonth(data);
  }
  
  createColumnMapping(headerRow) {
    this.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫...');
    
    headerRow.forEach((cell, index) => {
      if (cell && cell.toString().trim()) {
        const header = cell.toString().toLowerCase().trim();
        this.columnMapping[header] = index;
        this.log(`  –ö–æ–ª–æ–Ω–∫–∞ ${index + 1}: "${header}"`);
      }
    });
    
    this.log(`‚úÖ –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è ${Object.keys(this.columnMapping).length} –∫–æ–ª–æ–Ω–æ–∫`);
  }
  
  createDefaultMapping() {
    this.columnMapping = {
      '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è': 0,
      '–ø–ª–æ—â–∞–¥–∫–∞': 1,
      '–ø—Ä–æ–¥—É–∫—Ç': 2,
      '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ': 3,
      '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è': 4,
      '—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏': 5,
      '–¥–∞—Ç–∞': 6,
      '–Ω–∏–∫': 7,
      '–∞–≤—Ç–æ—Ä': 8,
      '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–µ–º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ': 9,
      '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞': 10,
      '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ': 11,
      '–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ': 12,
      '—Ç–∏–ø –ø–æ—Å—Ç–∞': 13
    };
    
    this.log('‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫');
  }
  
  analyzeSections(data) {
    this.log('üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö...');
    
    const sections = [];
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      if (row.length === 0) continue;
      
      const firstCell = (row[0] || '').toString().toLowerCase().trim();
      
      // –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤
      if (this.isSectionHeader(firstCell)) {
        const sectionType = this.determineSectionType(firstCell);
        sections.push({
          row: i + 1,
          name: firstCell,
          type: sectionType
        });
        
        this.log(`  –†–∞–∑–¥–µ–ª –Ω–∞–π–¥–µ–Ω: —Å—Ç—Ä–æ–∫–∞ ${i + 1} - "${firstCell}" (${sectionType})`);
      }
    }
    
    this.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤: ${sections.length}`);
    this.sections = sections;
  }
  
  isSectionHeader(text) {
    const sectionPatterns = [
      '–æ—Ç–∑—ã–≤', '–æ—Å', '–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      '—Ü–µ–ª–µ–≤—ã–µ', '—Ü—Å', '—Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      '–ø–ª–æ—â–∞–¥–∫–∏', '–ø—Å', '—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ',
      '–æ–±—Å—É–∂–¥–µ–Ω–∏—è', '–¥–∏—Å–∫—É—Å—Å–∏–∏', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'
    ];
    
    return sectionPatterns.some(pattern => text.includes(pattern));
  }
  
  determineSectionType(text) {
    if (text.includes('–æ—Ç–∑—ã–≤') || text.includes('–æ—Å')) return 'reviews';
    if (text.includes('—Ü–µ–ª–µ–≤—ã–µ') || text.includes('—Ü—Å')) return 'targeted';
    if (text.includes('–ø–ª–æ—â–∞–¥–∫–∏') || text.includes('–ø—Å')) return 'social';
    if (text.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è') || text.includes('–¥–∏—Å–∫—É—Å—Å–∏–∏')) return 'discussions';
    return 'other';
  }
  
  detectMonth(data) {
    this.log('üìÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞...');
    
    const monthNames = [
      '—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
      '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å'
    ];
    
    const monthShort = ['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', 
                       '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'];
    
    // –ü–æ–∏—Å–∫ –≤ –ø–µ—Ä–≤—ã—Ö 5 —Å—Ç—Ä–æ–∫–∞—Ö
    for (let i = 0; i < Math.min(5, data.length); i++) {
      const rowText = data[i].join(' ').toLowerCase();
      
      for (let j = 0; j < monthNames.length; j++) {
        if (rowText.includes(monthNames[j]) || rowText.includes(monthShort[j])) {
          this.monthInfo = {
            name: monthNames[j],
            short: monthShort[j],
            number: j + 1,
            year: new Date().getFullYear()
          };
          
          this.log(`‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ—Å—è—Ü: ${this.monthInfo.name} ${this.monthInfo.year}`);
          return;
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const currentMonth = new Date().getMonth();
    this.monthInfo = {
      name: monthNames[currentMonth],
      short: monthShort[currentMonth],
      number: currentMonth + 1,
      year: new Date().getFullYear()
    };
    
    this.logWarning(`‚ö†Ô∏è –ú–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π: ${this.monthInfo.name}`);
  }
  
  // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• ====================
  
  processData(data) {
    this.log('üîÑ –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•');
    this.log('==================');
    
    let currentSection = null;
    let processedRows = 0;
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (this.isEmptyRow(row)) {
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Ä–∞–∑–¥–µ–ª–∞
      const firstCell = (row[0] || '').toString().toLowerCase().trim();
      if (this.isSectionHeader(firstCell)) {
        currentSection = this.determineSectionType(firstCell);
        this.log(`üìã –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É: ${currentSection}`);
        continue;
      }
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
      if (this.isTableHeader(row)) {
        this.log(`üìä –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: —Å—Ç—Ä–æ–∫–∞ ${i + 1}`);
        continue;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      if (currentSection && this.isDataRow(row)) {
        const processedRow = this.processRow(row, currentSection, i + 1);
        
        if (processedRow) {
          this.processedData[currentSection].push(processedRow);
          processedRows++;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          this.updateStatistics(processedRow, currentSection);
          
          if (ULTIMATE_CONFIG.DIAGNOSTICS.LOG_EVERY_ROW) {
            this.log(`  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ${i + 1}: ${processedRow.platform} - ${processedRow.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`);
          }
        }
      }
    }
    
    this.diagnostics.statistics.processedRows = processedRows;
    this.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedRows} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
    Object.keys(this.processedData).forEach(section => {
      const count = this.processedData[section].length;
      if (count > 0) {
        this.log(`  üìä ${section}: ${count} –∑–∞–ø–∏—Å–µ–π`);
      }
    });
  }
  
  isEmptyRow(row) {
    return !row || row.every(cell => !cell || cell.toString().trim() === '');
  }
  
  isTableHeader(row) {
    if (!row || row.length === 0) return false;
    
    const rowText = row.join(' ').toLowerCase();
    const headerPatterns = ['—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', '–ø–ª–æ—â–∞–¥–∫–∞', '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'];
    
    return headerPatterns.some(pattern => rowText.includes(pattern));
  }
  
  isDataRow(row) {
    if (!row || row.length < 3) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const platform = this.getColumnValue(row, '–ø–ª–æ—â–∞–¥–∫–∞');
    const text = this.getColumnValue(row, '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
    
    return platform && text && text.length > 10;
  }
  
  processRow(row, sectionType, rowNumber) {
    try {
      const processedRow = {
        section: sectionType,
        rowNumber: rowNumber,
        placementType: this.getColumnValue(row, '—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è'),
        platform: this.getColumnValue(row, '–ø–ª–æ—â–∞–¥–∫–∞'),
        product: this.getColumnValue(row, '–ø—Ä–æ–¥—É–∫—Ç'),
        messageLink: this.getColumnValue(row, '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ'),
        messageText: this.getColumnValue(row, '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'),
        approvalComments: this.getColumnValue(row, '—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'),
        date: this.getColumnValue(row, '–¥–∞—Ç–∞'),
        nickname: this.getColumnValue(row, '–Ω–∏–∫'),
        author: this.getColumnValue(row, '–∞–≤—Ç–æ—Ä'),
        startViews: this.extractNumber(this.getColumnValue(row, '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–µ–º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ')),
        endViews: this.extractNumber(this.getColumnValue(row, '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞')),
        views: this.extractNumber(this.getColumnValue(row, '–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ')),
        engagement: this.extractNumber(this.getColumnValue(row, '–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ')),
        postType: this.getColumnValue(row, '—Ç–∏–ø –ø–æ—Å—Ç–∞')
      };
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!processedRow.platform || !processedRow.messageText) {
        return null;
      }
      
      return processedRow;
      
    } catch (error) {
      this.logError(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${rowNumber}`, error);
      return null;
    }
  }
  
  getColumnValue(row, columnName) {
    const columnIndex = this.columnMapping[columnName];
    if (columnIndex === undefined || columnIndex >= row.length) {
      return '';
    }
    
    const value = row[columnIndex];
    return value ? value.toString().trim() : '';
  }
  
  extractNumber(value) {
    if (!value) return 0;
    
    const str = value.toString().replace(/[^\d.,]/g, '');
    const num = parseFloat(str.replace(',', '.'));
    
    return isNaN(num) ? 0 : num;
  }
  
  updateStatistics(row, sectionType) {
    const stats = this.diagnostics.statistics;
    
    switch (sectionType) {
      case 'reviews':
        stats.reviewsCount++;
        break;
      case 'targeted':
        stats.targetedCount++;
        break;
      case 'social':
        stats.socialCount++;
        break;
    }
    
    stats.totalViews += row.views || 0;
    stats.totalEngagement += row.engagement || 0;
  }
  
  // ==================== –°–û–ó–î–ê–ù–ò–ï –û–¢–ß–ï–¢–ê ====================
  
  createReport(spreadsheet) {
    this.log('üìã –°–û–ó–î–ê–ù–ò–ï –û–¢–ß–ï–¢–ê');
    this.log('==================');
    
    const sheetName = ULTIMATE_CONFIG.OUTPUT.SHEET_NAME_TEMPLATE
      .replace('{month}', this.monthInfo.name)
      .replace('{year}', this.monthInfo.year);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞
    const reportSheet = spreadsheet.insertSheet(sheetName);
    this.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç –æ—Ç—á–µ—Ç–∞: "${sheetName}"`);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = [
      '–†–∞–∑–¥–µ–ª', '–¢–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è', '–ü–ª–æ—â–∞–¥–∫–∞', '–ü—Ä–æ–¥—É–∫—Ç', '–°—Å—ã–ª–∫–∞', 
      '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–î–∞—Ç–∞', '–ê–≤—Ç–æ—Ä', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω–æ', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ'
    ];
    
    reportSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headerRange = reportSheet.getRange(1, 1, 1, headers.length);
    headerRange.setFontWeight('bold');
    headerRange.setBackground('#4285f4');
    headerRange.setFontColor('#ffffff');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    let currentRow = 2;
    
    Object.keys(this.processedData).forEach(section => {
      const sectionData = this.processedData[section];
      
      if (sectionData.length > 0) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        reportSheet.getRange(currentRow, 1).setValue(section.toUpperCase());
        reportSheet.getRange(currentRow, 1, 1, headers.length).setBackground('#f0f0f0');
        currentRow++;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∞
        sectionData.forEach(row => {
          const rowData = [
            section,
            row.placementType,
            row.platform,
            row.product,
            row.messageLink,
            row.messageText.substring(0, 100) + (row.messageText.length > 100 ? '...' : ''),
            row.date,
            row.author,
            row.views,
            row.engagement
          ];
          
          reportSheet.getRange(currentRow, 1, 1, rowData.length).setValues([rowData]);
          currentRow++;
        });
        
        currentRow++; // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    if (ULTIMATE_CONFIG.OUTPUT.ADD_TOTAL_ROW) {
      this.addTotalRow(reportSheet, currentRow, headers.length);
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫
    reportSheet.autoResizeColumns(1, headers.length);
    
    this.log(`‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${sectionData.length} –∑–∞–ø–∏—Å–µ–π`);
    
    return reportSheet;
  }
  
  addTotalRow(sheet, row, columnsCount) {
    const stats = this.diagnostics.statistics;
    
    const totalData = [
      '–ò–¢–û–ì–û',
      '',
      `–ü–ª–∞—Ç—Ñ–æ—Ä–º: ${Object.keys(this.processedData).length}`,
      '',
      '',
      `–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${stats.processedRows}`,
      '',
      '',
      stats.totalViews,
      stats.totalEngagement
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    sheet.getRange(row, 1, 1, columnsCount).setValues([Array(columnsCount).fill('')]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    const totalRange = sheet.getRange(row + 1, 1, 1, totalData.length);
    totalRange.setValues([totalData]);
    totalRange.setFontWeight('bold');
    totalRange.setBackground('#e8f0fe');
    
    this.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞');
  }
  
  // ==================== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ====================
  
  finalizeDiagnostics() {
    this.diagnostics.endTime = new Date();
    this.diagnostics.totalTime = this.diagnostics.endTime - this.diagnostics.startTime;
    
    this.log('üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê');
    this.log('========================');
    this.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${this.diagnostics.totalTime}ms`);
    this.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${this.diagnostics.statistics.totalRows}`);
    this.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.diagnostics.statistics.processedRows}`);
    this.log(`üìù –û—Ç–∑—ã–≤–æ–≤: ${this.diagnostics.statistics.reviewsCount}`);
    this.log(`üéØ –¶–µ–ª–µ–≤—ã—Ö: ${this.diagnostics.statistics.targetedCount}`);
    this.log(`üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã—Ö: ${this.diagnostics.statistics.socialCount}`);
    this.log(`üëÅÔ∏è –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${this.diagnostics.statistics.totalViews}`);
    this.log(`üí¨ –í—Å–µ–≥–æ –≤–æ–≤–ª–µ—á–µ–Ω–∏–π: ${this.diagnostics.statistics.totalEngagement}`);
    
    if (this.diagnostics.errors.length > 0) {
      this.log(`‚ùå –û—à–∏–±–æ–∫: ${this.diagnostics.errors.length}`);
      this.diagnostics.errors.forEach(error => this.log(`   ${error}`));
    }
    
    if (this.diagnostics.warnings.length > 0) {
      this.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${this.diagnostics.warnings.length}`);
      this.diagnostics.warnings.forEach(warning => this.log(`   ${warning}`));
    }
  }
  
  log(message) {
    if (ULTIMATE_CONFIG.DIAGNOSTICS.ENABLE_DETAILED_LOGGING) {
      console.log(message);
    }
    this.diagnostics.steps.push(`${new Date().toISOString()}: ${message}`);
  }
  
  logError(message, error) {
    const errorMsg = `${message}: ${error.toString()}`;
    console.error(errorMsg);
    this.diagnostics.errors.push(errorMsg);
  }
  
  logWarning(message) {
    console.warn(message);
    this.diagnostics.warnings.push(message);
  }
}

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
function processUltimateGoogleSheets() {
  const processor = new UltimateGoogleAppsScriptProcessor();
  return processor.processSheet();
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
 */
function testUltimateProcessor(sheetId, sheetName) {
  const processor = new UltimateGoogleAppsScriptProcessor();
  return processor.processSheet(sheetId, sheetName);
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
 */
function analyzeUltimateDataStructure(sheetId) {
  const processor = new UltimateGoogleAppsScriptProcessor();
  
  try {
    const spreadsheet = processor.openSpreadsheet(sheetId || ULTIMATE_CONFIG.TEST_SHEET_ID);
    const sheet = processor.selectSheet(spreadsheet);
    const data = processor.getData(sheet);
    
    processor.analyzeDataStructure(data);
    
    return {
      success: true,
      diagnostics: processor.diagnostics,
      columnMapping: processor.columnMapping,
      monthInfo: processor.monthInfo,
      sections: processor.sections
    };
    
  } catch (error) {
    return {
      success: false,
      error: error.toString()
    };
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
function getUltimateDiagnostics() {
  const processor = new UltimateGoogleAppsScriptProcessor();
  return processor.diagnostics;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Google Apps Script
function main() {
  return processUltimateGoogleSheets();
}