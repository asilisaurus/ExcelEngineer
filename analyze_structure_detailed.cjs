const XLSX = require('xlsx');
const fs = require('fs');

console.log('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø –ü–†–û–¶–ï–°–°–û–†–ê');
console.log('üìä –¶–µ–ª—å: –ü–æ–Ω—è—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≥–∏–±–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ "–≥—Ä—è–∑–Ω—ã—Ö" –¥–∞–Ω–Ω—ã—Ö\n');

function analyzeFile(filename, description) {
  console.log(`${'='.repeat(80)}`);
  console.log(`üìã –ê–ù–ê–õ–ò–ó ${description.toUpperCase()}: ${filename}`);
  console.log(`${'='.repeat(80)}`);
  
  if (!fs.existsSync(filename)) {
    console.log(`‚ùå –§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    return null;
  }
  
  const buffer = fs.readFileSync(filename);
  const workbook = XLSX.read(buffer, { 
    type: 'buffer',
    cellDates: true,
    raw: false
  });
  
  console.log(`üìë –õ–∏—Å—Ç—ã: ${workbook.SheetNames.join(', ')}`);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
  workbook.SheetNames.forEach(sheetName => {
    console.log(`\nüìä –õ–ò–°–¢: "${sheetName}"`);
    
    const worksheet = workbook.Sheets[sheetName];
    const data = XLSX.utils.sheet_to_json(worksheet, { 
      header: 1, 
      defval: '',
      raw: false
    });
    
    console.log(`   –°—Ç—Ä–æ–∫: ${data.length}`);
    
    if (data.length > 0) {
      // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö
      console.log('\n   üîç –ü–û–ò–°–ö –ó–ê–ì–û–õ–û–í–ö–û–í:');
      
      for (let i = 0; i < Math.min(10, data.length); i++) {
        const row = data[i];
        if (row && row.length > 0) {
          const hasHeaders = row.some(cell => {
            const cellStr = (cell || '').toString().toLowerCase();
            return cellStr.includes('—Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è') || 
                   cellStr.includes('–ø–ª–æ—â–∞–¥–∫–∞') || 
                   cellStr.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è') ||
                   cellStr.includes('—Ç–∏–ø –ø–æ—Å—Ç–∞');
          });
          
          if (hasHeaders) {
            console.log(`   ‚úÖ –ó–ê–ì–û–õ–û–í–ö–ò –ù–ê–ô–î–ï–ù–´ –í –°–¢–†–û–ö–ï ${i + 1}:`);
            row.forEach((header, index) => {
              if (header) {
                console.log(`      ${String.fromCharCode(65 + index)} (${index}): "${header}"`);
              }
            });
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            console.log(`\n   üìä –ü–ï–†–í–´–ï 5 –°–¢–†–û–ö –î–ê–ù–ù–´–•:`);
            for (let j = i + 1; j < Math.min(i + 6, data.length); j++) {
              const dataRow = data[j];
              if (dataRow && dataRow.length > 0) {
                console.log(`   –°—Ç—Ä–æ–∫–∞ ${j + 1}:`);
                console.log(`      –¢–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: "${dataRow[0] || '–ø—É—Å—Ç–æ'}"`);
                console.log(`      –ü–ª–æ—â–∞–¥–∫–∞: "${dataRow[1] || '–ø—É—Å—Ç–æ'}"`);
                console.log(`      –¢–µ–∫—Å—Ç: "${(dataRow[4] || '').toString().substring(0, 50)}..."`);
                console.log(`      –¢–∏–ø –ø–æ—Å—Ç–∞: "${dataRow[14] || '–ø—É—Å—Ç–æ'}"`);
              }
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
            console.log(`\n   üéØ –ê–ù–ê–õ–ò–ó –°–û–î–ï–†–ñ–ò–ú–û–ì–û:`);
            
            // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–æ–≤
            const postTypes = new Set();
            const placementTypes = new Set();
            let textCount = 0;
            let validRowCount = 0;
            
            for (let k = i + 1; k < data.length; k++) {
              const row = data[k];
              if (row && row.length > 0) {
                const postType = row[14];
                const placementType = row[0];
                const text = row[4];
                
                if (postType) postTypes.add(postType.toString().trim());
                if (placementType) placementTypes.add(placementType.toString().trim());
                if (text && text.toString().length > 10) textCount++;
                if ((text && text.toString().length > 0) || (row[1] && row[1].toString().length > 0)) {
                  validRowCount++;
                }
              }
            }
            
            console.log(`      –¢–∏–ø—ã –ø–æ—Å—Ç–æ–≤: ${Array.from(postTypes).join(', ')}`);
            console.log(`      –¢–∏–ø—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: ${Array.from(placementTypes).slice(0, 5).join(', ')}${placementTypes.size > 5 ? '...' : ''}`);
            console.log(`      –°—Ç—Ä–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º: ${textCount}`);
            console.log(`      –í—Å–µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫: ${validRowCount}`);
            
            return; // –ù–∞—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ª–∏—Å—Ç—É
          }
        }
      }
      
      console.log('   ‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö');
    }
  });
  
  return workbook;
}

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
const sourceWorkbook = analyzeFile('source_file.xlsx', '–ò–°–•–û–î–ù–´–ô –§–ê–ô–õ');

console.log('\n');

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
const referenceWorkbook = analyzeFile('reference_file.xlsx', '–≠–¢–ê–õ–û–ù–ù–´–ô –§–ê–ô–õ');

console.log('\n' + '='.repeat(80));
console.log('üí° –í–´–í–û–î–´ –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø –ü–†–û–¶–ï–°–°–û–†–ê:');
console.log('='.repeat(80));

console.log(`
üéØ –ö–õ–Æ–ß–ï–í–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ì–ò–ë–ö–û–°–¢–ò:

1. üìã –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–ì–û–õ–û–í–ö–û–í:
   - –ù–ï –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–∏–∑–±–µ–≥–∞—Ç—å usecols='B:S')
   - –ò—Å–∫–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö (–Ω–µ —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–π)
   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫

2. üîç –ì–ò–ë–ö–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø:
   - –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å "–¢–∏–ø –ø–æ—Å—Ç–∞" –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –û–°/–¶–°/–ü–°
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "–¢–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è" –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π
   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è

3. üìä –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê:
   - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
   - –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø—É—Å—Ç—ã–µ/—Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
   - –ò–∑–≤–ª–µ–∫–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª—é–±—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∫–æ–ª–æ–Ω–æ–∫

4. üé® –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –≠–¢–ê–õ–û–ù–£:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   - –û–±–µ—Å–ø–µ—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
`);

console.log('\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù - –ì–û–¢–û–í –ö –£–õ–£–ß–®–ï–ù–ò–Æ –ü–†–û–¶–ï–°–°–û–†–ê!');