const axios = require('axios');
const XLSX = require('xlsx');

function extractGoogleSheetsInfo(url) {
  try {
    const patterns = [
      /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/,
      /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)\/edit/,
      /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)\/edit#gid=(\d+)/
    ];
    
    let spreadsheetId = null;
    let gid = null;
    
    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match) {
        spreadsheetId = match[1];
        if (match[2]) {
          gid = match[2];
        }
        break;
      }
    }
    
    if (!gid) {
      const gidMatch = url.match(/[#&]gid=(\d+)/);
      if (gidMatch) {
        gid = gidMatch[1];
      }
    }
    
    return { spreadsheetId, gid };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ URL:', error);
    return { spreadsheetId: null, gid: null };
  }
}

async function importFromGoogleSheets(url) {
  console.log('=== –ò–ú–ü–û–†–¢ –ò–ó GOOGLE –¢–ê–ë–õ–ò–¶ ===');
  console.log('URL:', url);
  
  const { spreadsheetId, gid } = extractGoogleSheetsInfo(url);
  
  if (!spreadsheetId) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π URL Google –¢–∞–±–ª–∏—Ü');
  }
  
  const exportUrl = `https://docs.google.com/spreadsheets/d/${spreadsheetId}/export?format=xlsx${gid ? `&gid=${gid}` : ''}`;
  
  console.log('Export URL:', exportUrl);
  
  try {
    const response = await axios.get(exportUrl, {
      responseType: 'arraybuffer',
      timeout: 30000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Ä–∞–∑–º–µ—Ä:', response.data.byteLength, '–±–∞–π—Ç');
    
    return Buffer.from(response.data);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ Google –¢–∞–±–ª–∏—Ü:', error.message);
    
    if (error.response?.status === 403) {
      throw new Error('–î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ –∑–∞–ø—Ä–µ—â–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.');
    } else if (error.response?.status === 404) {
      throw new Error('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL.');
    } else {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
    }
  }
}

async function analyzeGoogleSheets() {
  const sourceUrl = 'https://docs.google.com/spreadsheets/d/1z4KJfXSNaV8Zw5Qi4hKdVsoKvt9GTSrweWv45URzB4I/edit?gid=1258324199#gid=1258324199';
  const resultUrl = 'https://docs.google.com/spreadsheets/d/18jkeKNIn5QJpzQrDN3RAT3mEYRXlSNKOnNvA3pxoBx8/edit?gid=535445992#gid=535445992';
  
  console.log('üîç –ê–ù–ê–õ–ò–ó –ò–°–•–û–î–ù–û–ì–û –§–ê–ô–õ–ê');
  console.log('========================');
  
  try {
    const sourceBuffer = await importFromGoogleSheets(sourceUrl);
    const sourceWorkbook = XLSX.read(sourceBuffer, { type: 'buffer' });
    
    console.log('üìä –ò–°–•–û–î–ù–´–ô –§–ê–ô–õ - –õ–ò–°–¢–´:', sourceWorkbook.SheetNames);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    const sourceSheetName = sourceWorkbook.SheetNames[0];
    const sourceSheet = sourceWorkbook.Sheets[sourceSheetName];
    const sourceData = XLSX.utils.sheet_to_json(sourceSheet, { header: 1 });
    
    console.log('üìã –ò–°–•–û–î–ù–´–ô –§–ê–ô–õ - –ó–ê–ì–û–õ–û–í–ö–ò:');
    console.log(sourceData[0]);
    
    console.log('üìã –ò–°–•–û–î–ù–´–ô –§–ê–ô–õ - –í–°–ï–ì–û –°–¢–†–û–ö:', sourceData.length);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    console.log('üìã –ò–°–•–û–î–ù–´–ô –§–ê–ô–õ - –ü–ï–†–í–´–ï 5 –°–¢–†–û–ö:');
    for (let i = 0; i < Math.min(5, sourceData.length); i++) {
      console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 1}:`, sourceData[i]);
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ò–°–•–û–î–ù–´–• –î–ê–ù–ù–´–•:');
    const headers = sourceData[0];
    headers.forEach((header, index) => {
      console.log(`–ö–æ–ª–æ–Ω–∫–∞ ${index} (${String.fromCharCode(65 + index)}): ${header}`);
    });
    
    console.log('\n' + '='.repeat(50));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', error.message);
  }
  
  console.log('\nüéØ –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê');
  console.log('=========================');
  
  try {
    const resultBuffer = await importFromGoogleSheets(resultUrl);
    const resultWorkbook = XLSX.read(resultBuffer, { type: 'buffer' });
    
    console.log('üìä –§–ê–ô–õ –†–ï–ó–£–õ–¨–¢–ê–¢–ê - –õ–ò–°–¢–´:', resultWorkbook.SheetNames);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    const resultSheetName = resultWorkbook.SheetNames[0];
    const resultSheet = resultWorkbook.Sheets[resultSheetName];
    const resultData = XLSX.utils.sheet_to_json(resultSheet, { header: 1 });
    
    console.log('üìã –§–ê–ô–õ –†–ï–ó–£–õ–¨–¢–ê–¢–ê - –ó–ê–ì–û–õ–û–í–ö–ò:');
    console.log(resultData[0]);
    
    console.log('üìã –§–ê–ô–õ –†–ï–ó–£–õ–¨–¢–ê–¢–ê - –í–°–ï–ì–û –°–¢–†–û–ö:', resultData.length);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    console.log('üìã –§–ê–ô–õ –†–ï–ó–£–õ–¨–¢–ê–¢–ê - –ü–ï–†–í–´–ï 10 –°–¢–†–û–ö:');
    for (let i = 0; i < Math.min(10, resultData.length); i++) {
      console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 1}:`, resultData[i]);
    }
    
    // –ò—â–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –ü–û–ò–°–ö –°–¢–ê–¢–ò–°–¢–ò–ö–ò –í –§–ê–ô–õ–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê:');
    
    for (let i = 0; i < resultData.length; i++) {
      const row = resultData[i];
      if (row && row.length > 0) {
        const firstCell = String(row[0]).toLowerCase();
        if (firstCell.includes('—Å—É–º–º–∞—Ä–Ω–æ–µ') || firstCell.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ') || firstCell.includes('–¥–æ–ª—è') || firstCell.includes('–ø–ª–æ—â–∞–¥–∫–∏')) {
          console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 1} (–°–¢–ê–¢–ò–°–¢–ò–ö–ê):`, row);
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeGoogleSheets().catch(console.error); 