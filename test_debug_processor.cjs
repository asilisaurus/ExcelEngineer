async function testDebugProcessor() {
  console.log('üîç –¢–ï–°–¢ –° –î–ï–¢–ê–õ–¨–ù–´–ú –ê–ù–ê–õ–ò–ó–û–ú –õ–û–ì–û–í –ü–†–û–¶–ï–°–°–û–†–ê');
  console.log('='.repeat(60));
  
  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...');
    const response = await fetch('http://localhost:5000/api/import-google-sheets', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url: 'https://docs.google.com/spreadsheets/d/1z4KJfXSNaV8Zw5Qi4hKdVsoKvt9GTSrweWv45URzB4I/edit?usp=sharing'
      })
    });
    
    const result = await response.json();
    const fileId = result.fileId;
    console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, ID —Ñ–∞–π–ª–∞: ${fileId}`);
    
    console.log('\nüìã –í–ê–ñ–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø –ü–û–ò–°–ö–ê –í –õ–û–ì–ê–•:');
    console.log('  üî• "–ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –ù–û–í–´–ô –ü–†–û–¶–ï–°–°–û–† ExcelProcessorSimple!"');
    console.log('  üîç "DEBUG DATE: Checking column..."');
    console.log('  üìÖ "Found DATE (ISO format)..."');
    console.log('  üìÖ "Found DATE (day format)..."');
    console.log('  üìÖ "Found DATE (Date object)..."');
    console.log('  üë§ "Found AUTHOR..."');
    console.log('');
    
    // –ë—ã—Å—Ç—Ä–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    console.log('‚è±Ô∏è  –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...');
    
    let attempts = 0;
    while (attempts < 10) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const statusResponse = await fetch(`http://localhost:5000/api/files/${fileId}`);
      const fileInfo = await statusResponse.json();
      
      console.log(`[${attempts + 1}/10] üìä –°—Ç–∞—Ç—É—Å: ${fileInfo.status}, –°—Ç—Ä–æ–∫: ${fileInfo.rowsProcessed || 0}`);
      
      if (fileInfo.status === 'completed') {
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const ExcelJS = require('exceljs');
        const workbook = new ExcelJS.Workbook();
        
        await workbook.xlsx.readFile(`uploads/${fileInfo.processedName}`);
        const sheet = workbook.getWorksheet(1);
        
        console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê:');
        console.log('–ü–µ—Ä–≤—ã–µ 15 —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏:');
        
        let realDatesFound = 0;
        let authorsFound = 0;
        
        for (let i = 6; i <= 20; i++) {
          const row = sheet.getRow(i);
          const platform = row.getCell(1).text || row.getCell(1).value || '';
          const date = row.getCell(4).text || row.getCell(4).value || '';
          const author = row.getCell(5).text || row.getCell(5).value || '';
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã (–Ω–µ —Å–ª—É–∂–µ–±–Ω—ã–µ)
          if (date && date !== '' && date !== '–û—Ç–∑—ã–≤—ã' && date !== '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏' && 
              date !== '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è' && !date.includes('–¢–æ–ø-20') && 
              date.match(/\d{2}\.\d{2}\.\d{4}/)) {
            realDatesFound++;
          }
          
          if (author && author !== '' && author !== '–û—Ç–∑—ã–≤—ã' && author !== '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏' && 
              author !== '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è' && !author.includes('–¢–æ–ø-20')) {
            authorsFound++;
          }
          
          if (platform && platform !== '' && !platform.includes('–û—Ç–∑—ã–≤—ã') && 
              !platform.includes('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏') && !platform.includes('–æ–±—Å—É–∂–¥–µ–Ω–∏—è')) {
            console.log(`–°—Ç—Ä–æ–∫–∞ ${i}: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞="${platform}" | –î–∞—Ç–∞="${date}" | –ê–≤—Ç–æ—Ä="${author}"`);
          }
        }
        
        console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log(`  üìÖ –†–µ–∞–ª—å–Ω—ã—Ö –¥–∞—Ç –Ω–∞–π–¥–µ–Ω–æ: ${realDatesFound}`);
        console.log(`  üë§ –ê–≤—Ç–æ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${authorsFound}`);
        
        if (realDatesFound > 0) {
          console.log('\nüéâ –£–°–ü–ï–•! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        } else {
          console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
          console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π "üìÖ Found DATE"');
          console.log('   –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ');
        }
        
        break;
      }
      
      if (fileInfo.status === 'error') {
        console.log('‚ùå –û—à–∏–±–∫–∞:', fileInfo.errorMessage);
        break;
      }
      
      attempts++;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

testDebugProcessor(); 