const fetch = require('node-fetch');

async function testGoogleSheets() {
  try {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Sheets –∏–º–ø–æ—Ä—Ç–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π...');
    
    const googleSheetsUrl = 'https://docs.google.com/spreadsheets/d/1z4KJfXSNaV8Zw5Qi4hKdVsoKvt9GTSrweWv45URzB4I/edit?usp=sharing';
    
    console.log('üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–º–ø–æ—Ä—Ç...');
    const importResponse = await fetch('http://localhost:5000/api/import-google-sheets', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ url: googleSheetsUrl }),
    });
    
    if (!importResponse.ok) {
      const errorText = await importResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', errorText);
      return;
    }
    
    const result = await importResponse.json();
    console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω:', result.message);
    console.log('üÜî ID —Ñ–∞–π–ª–∞:', result.fileId);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
    const maxAttempts = 60; // 30 —Å–µ–∫—É–Ω–¥
    let attempts = 0;
    
    while (attempts < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 500));
      
      const statusResponse = await fetch(`http://localhost:5000/api/files/${result.fileId}`);
      
      if (!statusResponse.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        break;
      }
      
      const fileInfo = await statusResponse.json();
      
      console.log(`[${attempts + 1}/${maxAttempts}] üìä –°—Ç–∞—Ç—É—Å: ${fileInfo.status}, –°—Ç—Ä–æ–∫: ${fileInfo.rowsProcessed}`);
      
      if (fileInfo.statistics) {
        try {
          const stats = JSON.parse(fileInfo.statistics);
          console.log(`  üìà –≠—Ç–∞–ø: ${stats.stage}, –°–æ–æ–±—â–µ–Ω–∏–µ: ${stats.message}`);
        } catch (e) {
          console.log('  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', fileInfo.statistics);
        }
      }
      
      if (fileInfo.status === 'completed') {
        console.log('\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${fileInfo.processedName}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
        const fs = require('fs');
        const path = require('path');
        const filePath = path.join('uploads', fileInfo.processedName);
        if (fs.existsSync(filePath)) {
          console.log(`‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –¥–∏—Å–∫–µ: ${filePath}`);
          console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fs.statSync(filePath).size} –±–∞–π—Ç`);
        } else {
          console.log(`‚ùå –§–∞–π–ª –ù–ï –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ: ${filePath}`);
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...');
        const downloadResponse = await fetch(`http://localhost:5000/api/files/${result.fileId}/download`);
        if (downloadResponse.ok) {
          console.log('‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', await downloadResponse.text());
        }
        
        break;
      }
      
      if (fileInfo.status === 'error') {
        console.log('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:');
        console.log(`üö® –°–æ–æ–±—â–µ–Ω–∏–µ: ${fileInfo.errorMessage}`);
        break;
      }
      
      attempts++;
    }
    
    if (attempts >= maxAttempts) {
      console.log('\n‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testGoogleSheets().catch(console.error); 