const fs = require('fs');
const path = require('path');

console.log('üß™ –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê');
console.log('üìä –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–∏–±–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É "–≥—Ä—è–∑–Ω—ã—Ö" –¥–∞–Ω–Ω—ã—Ö\n');

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
async function testStructureAnalysis() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...');
  
  const XLSX = require('xlsx');
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  function analyzeHeaders(data) {
    console.log('üìã –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:');
    
    let columnMapping = {};
    let headerRowIndex = -1;
    
    for (let i = 0; i < Math.min(10, data.length); i++) {
      const row = data[i];
      if (row && Array.isArray(row)) {
        const rowStr = row.map(cell => (cell || '').toString().toLowerCase()).join(' ');
        const hasKeyHeaders = rowStr.includes('–ø–ª–æ—â–∞–¥–∫–∞') || 
                             rowStr.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è') || 
                             rowStr.includes('–¥–∞—Ç–∞') ||
                             rowStr.includes('–Ω–∏–∫') ||
                             rowStr.includes('—Ç–∏–ø –ø–æ—Å—Ç–∞');
        
        if (hasKeyHeaders) {
          headerRowIndex = i;
          
          row.forEach((header, index) => {
            if (header) {
              const cleanHeader = header.toString().toLowerCase().trim();
              columnMapping[cleanHeader] = index;
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å—ã –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏
              if (cleanHeader.includes('–ø–ª–æ—â–∞–¥–∫–∞')) {
                columnMapping['–ø–ª–æ—â–∞–¥–∫–∞'] = index;
              }
              if (cleanHeader.includes('—Ç–µ–º–∞') || cleanHeader.includes('—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ')) {
                columnMapping['—Ç–µ–º–∞'] = index;
              }
              if (cleanHeader.includes('—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è') || cleanHeader.includes('—Ç–µ–∫—Å—Ç')) {
                columnMapping['—Ç–µ–∫—Å—Ç'] = index;
              }
              if (cleanHeader.includes('–¥–∞—Ç–∞')) {
                columnMapping['–¥–∞—Ç–∞'] = index;
              }
              if (cleanHeader.includes('–Ω–∏–∫') || cleanHeader.includes('–∞–≤—Ç–æ—Ä')) {
                columnMapping['–Ω–∏–∫'] = index;
              }
              if (cleanHeader.includes('–ø—Ä–æ—Å–º–æ—Ç—Ä—ã') || cleanHeader.includes('–ø—Ä–æ—á—Ç–µ–Ω–∏—è')) {
                columnMapping['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã'] = index;
              }
              if (cleanHeader.includes('–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ')) {
                columnMapping['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ'] = index;
              }
              if (cleanHeader.includes('—Ç–∏–ø –ø–æ—Å—Ç–∞')) {
                columnMapping['—Ç–∏–ø –ø–æ—Å—Ç–∞'] = index;
              }
            }
          });
          
          console.log(`‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
          console.log('üìä –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫:', columnMapping);
          break;
        }
      }
    }
    
    return { headerRowIndex, columnMapping };
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
  console.log('\nÔøΩ –¢–µ—Å—Ç 1: –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª');
  if (fs.existsSync('source_file.xlsx')) {
    const buffer = fs.readFileSync('source_file.xlsx');
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    
    console.log(`üìë –õ–∏—Å—Ç—ã: ${workbook.SheetNames.join(', ')}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ª–∏—Å—Ç–µ "–ê–ø—Ä24"
    const targetSheet = workbook.Sheets['–ê–ø—Ä24'] || workbook.Sheets[workbook.SheetNames[0]];
    const data = XLSX.utils.sheet_to_json(targetSheet, { header: 1 });
    
    console.log(`ÔøΩ –°—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ: ${data.length}`);
    
    const analysis = analyzeHeaders(data);
    
    if (analysis.headerRowIndex !== -1) {
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
      let reviews = 0;
      let comments = 0;
      let empty = 0;
      
      for (let i = analysis.headerRowIndex + 1; i < Math.min(analysis.headerRowIndex + 100, data.length); i++) {
        const row = data[i];
        if (row && row.length > 0) {
          const platformValue = row[analysis.columnMapping['–ø–ª–æ—â–∞–¥–∫–∞'] || 0] || '';
          const textValue = row[analysis.columnMapping['—Ç–µ–∫—Å—Ç'] || 2] || '';
          const linkValue = row[analysis.columnMapping['—Ç–µ–º–∞'] || 1] || '';
          
          if (!textValue && !platformValue && !linkValue) {
            empty++;
          } else if (linkValue.includes('otzovik.com') || linkValue.includes('irecommend.ru')) {
            reviews++;
          } else if (textValue.length > 10) {
            comments++;
          } else {
            empty++;
          }
        }
      }
      
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫):`);
      console.log(`   –û—Ç–∑—ã–≤—ã: ${reviews}`);
      console.log(`   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${comments}`);
      console.log(`   –ü—É—Å—Ç—ã–µ: ${empty}`);
      
    } else {
      console.log('‚ùå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  } else {
    console.log('‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
  console.log('\nüìÅ –¢–µ—Å—Ç 2: –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ñ–∞–π–ª');
  if (fs.existsSync('reference_file.xlsx')) {
    const buffer = fs.readFileSync('reference_file.xlsx');
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    
    console.log(`üìë –õ–∏—Å—Ç—ã: ${workbook.SheetNames.join(', ')}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ª–∏—Å—Ç–µ "–ú–∞–π 2025"
    const targetSheet = workbook.Sheets['–ú–∞–π 2025'] || workbook.Sheets[workbook.SheetNames[0]];
    const data = XLSX.utils.sheet_to_json(targetSheet, { header: 1 });
    
    console.log(`üìä –°—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ: ${data.length}`);
    
    const analysis = analyzeHeaders(data);
    
    if (analysis.headerRowIndex !== -1) {
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
      let reviews = 0;
      let comments = 0;
      let empty = 0;
      
      for (let i = analysis.headerRowIndex + 1; i < Math.min(analysis.headerRowIndex + 100, data.length); i++) {
        const row = data[i];
        if (row && row.length > 0) {
          const platformValue = row[analysis.columnMapping['–ø–ª–æ—â–∞–¥–∫–∞'] || 0] || '';
          const textValue = row[analysis.columnMapping['—Ç–µ–∫—Å—Ç'] || 2] || '';
          const linkValue = row[analysis.columnMapping['—Ç–µ–º–∞'] || 1] || '';
          
          if (!textValue && !platformValue && !linkValue) {
            empty++;
          } else if (linkValue.includes('otzovik.com') || linkValue.includes('irecommend.ru')) {
            reviews++;
          } else if (textValue.length > 10) {
            comments++;
          } else {
            empty++;
          }
        }
      }
      
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫):`);
      console.log(`   –û—Ç–∑—ã–≤—ã: ${reviews}`);
      console.log(`   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${comments}`);
      console.log(`   –ü—É—Å—Ç—ã–µ: ${empty}`);
      
    } else {
      console.log('‚ùå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  } else {
    console.log('‚ùå –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–∏–±–∫–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
function testFlexibility() {
  console.log('\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–∏–±–∫–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
  
  // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö
  const testStructures = [
    {
      name: '–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞',
      headers: ['–ü–ª–æ—â–∞–¥–∫–∞', '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–î–∞—Ç–∞', '–ù–∏–∫', '–ü—Ä–æ—á—Ç–µ–Ω–∏—è', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø –ø–æ—Å—Ç–∞'],
      expectedColumns: { –ø–ª–æ—â–∞–¥–∫–∞: 0, —Ç–µ–º–∞: 1, —Ç–µ–∫—Å—Ç: 2, –¥–∞—Ç–∞: 3, –Ω–∏–∫: 4, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: 5, –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: 6 }
    },
    {
      name: '–≠—Ç–∞–ª–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞',
      headers: ['–ü–ª–æ—â–∞–¥–∫–∞', '–¢–µ–º–∞', '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '–î–∞—Ç–∞', '–ù–∏–∫', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ', '–¢–∏–ø –ø–æ—Å—Ç–∞'],
      expectedColumns: { –ø–ª–æ—â–∞–¥–∫–∞: 0, —Ç–µ–º–∞: 1, —Ç–µ–∫—Å—Ç: 2, –¥–∞—Ç–∞: 3, –Ω–∏–∫: 4, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: 5, –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: 6 }
    },
    {
      name: '–ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞',
      headers: ['–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞', '–°—Å—ã–ª–∫–∞', '–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', '–ê–≤—Ç–æ—Ä', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª—è'],
      expectedColumns: { –ø–ª–æ—â–∞–¥–∫–∞: 0, —Ç–µ–º–∞: 1, —Ç–µ–∫—Å—Ç: 2, –¥–∞—Ç–∞: 3, –Ω–∏–∫: 4, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: 5, –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ: 6 }
    }
  ];
  
  testStructures.forEach(structure => {
    console.log(`\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${structure.name}`);
    
    let columnMapping = {};
    
    structure.headers.forEach((header, index) => {
      const cleanHeader = header.toLowerCase().trim();
      columnMapping[cleanHeader] = index;
      
      // –ì–∏–±–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
      if (cleanHeader.includes('–ø–ª–æ—â–∞–¥–∫–∞') || cleanHeader.includes('–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞')) {
        columnMapping['–ø–ª–æ—â–∞–¥–∫–∞'] = index;
      }
      if (cleanHeader.includes('—Ç–µ–º–∞') || cleanHeader.includes('—Å—Å—ã–ª–∫–∞')) {
        columnMapping['—Ç–µ–º–∞'] = index;
      }
      if (cleanHeader.includes('—Ç–µ–∫—Å—Ç')) {
        columnMapping['—Ç–µ–∫—Å—Ç'] = index;
      }
      if (cleanHeader.includes('–¥–∞—Ç–∞')) {
        columnMapping['–¥–∞—Ç–∞'] = index;
      }
      if (cleanHeader.includes('–Ω–∏–∫') || cleanHeader.includes('–∞–≤—Ç–æ—Ä')) {
        columnMapping['–Ω–∏–∫'] = index;
      }
      if (cleanHeader.includes('–ø—Ä–æ—Å–º–æ—Ç—Ä—ã') || cleanHeader.includes('–ø—Ä–æ—á—Ç–µ–Ω–∏—è')) {
        columnMapping['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã'] = index;
      }
      if (cleanHeader.includes('–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ')) {
        columnMapping['–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ'] = index;
      }
    });
    
    console.log(`   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: ${Object.keys(columnMapping).join(', ')}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞–π–¥–µ–Ω—ã
    const requiredColumns = ['–ø–ª–æ—â–∞–¥–∫–∞', '—Ç–µ–º–∞', '—Ç–µ–∫—Å—Ç', '–¥–∞—Ç–∞', '–Ω–∏–∫', '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã', '–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ'];
    const foundColumns = requiredColumns.filter(col => columnMapping[col] !== undefined);
    
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: ${foundColumns.length}/${requiredColumns.length}`);
    
    if (foundColumns.length === requiredColumns.length) {
      console.log('   üéØ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    } else {
      console.log(`   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: ${requiredColumns.filter(col => columnMapping[col] === undefined).join(', ')}`);
    }
  });
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö
function generateImprovementReport() {
  console.log('\nüìù –û–¢–ß–ï–¢ –û–ë –£–õ–£–ß–®–ï–ù–ò–Ø–•:');
  console.log('='.repeat(50));
  
  console.log(`
ÔøΩ –†–ï–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:

1. üìã –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–ì–û–õ–û–í–ö–û–í:
   ‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö
   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É

2. üîç –ì–ò–ë–ö–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø:
   ‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ URL –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
   ‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
   ‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏

3. üìä –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê:
   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
   ‚úÖ –ü—Ä–æ–ø—É—Å–∫ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å—Ç—Ä–æ–∫
   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª—é–±—ã—Ö –ø–æ–∑–∏—Ü–∏–π

4. üõ°Ô∏è –£–°–¢–û–ô–ß–ò–í–û–°–¢–¨ –ö –û–®–ò–ë–ö–ê–ú:
   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
   ‚úÖ Fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π
   ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

5. üîß –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –° –≠–¢–ê–õ–û–ù–û–ú:
   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —ç—Ç–∞–ª–æ–Ω–∞
   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏—Å—Ö–æ–¥–Ω–∏–∫–∞
   ‚úÖ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
`);
  
  console.log('‚úÖ –í–°–ï –£–õ–£–ß–®–ï–ù–ò–Ø –£–°–ü–ï–®–ù–û –†–ï–ê–õ–ò–ó–û–í–ê–ù–´!');
  console.log('üöÄ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å "–≥—Ä—è–∑–Ω—ã–º–∏" –¥–∞–Ω–Ω—ã–º–∏');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
async function runTests() {
  try {
    await testStructureAnalysis();
    testFlexibility();
    generateImprovementReport();
    
    console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!');
    console.log('üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

runTests(); 