const path = require('path');
const fs = require('fs');

async function testProcessorDirectly() {
  console.log('üîç –ü–†–Ø–ú–û–ô –¢–ï–°–¢ –ü–†–û–¶–ï–°–°–û–†–ê');
  console.log('='.repeat(50));
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ TypeScript
    const { simpleProcessor } = await import('./server/services/excel-processor-simple.ts');
    
    // –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    const sourceFile = path.join('uploads', 'Fortedetrim ORM report source.xlsx');
    
    if (!fs.existsSync(sourceFile)) {
      console.log('‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', sourceFile);
      return;
    }
    
    console.log('üìÇ –ù–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª:', sourceFile);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
    console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª...');
    const outputPath = await simpleProcessor.processExcelFile(sourceFile);
    
    console.log('‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', outputPath);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (fs.existsSync(outputPath)) {
      const ExcelJS = require('exceljs');
      const workbook = new ExcelJS.Workbook();
      await workbook.xlsx.readFile(outputPath);
      const worksheet = workbook.getWorksheet(1);
      
      let reviewCount = 0;
      let commentCount = 0;
      let discussionCount = 0;
      let currentSection = '';
      
      worksheet.eachRow((row, rowNumber) => {
        if (rowNumber <= 4) return;
        
        const cellA = row.getCell(1).value;
        if (cellA && typeof cellA === 'string') {
          const cellStr = cellA.toString().trim();
          
          if (cellStr === '–û—Ç–∑—ã–≤—ã') {
            currentSection = 'reviews';
            return;
          } else if (cellStr.includes('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')) {
            currentSection = 'comments';
            return;
          } else if (cellStr.includes('–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è')) {
            currentSection = 'discussions';
            return;
          }
        }
        
        const hasData = cellA && cellA !== '–ü–ª–æ—â–∞–¥–∫–∞' && 
                       !cellA.toString().startsWith('–°—É–º–º–∞—Ä–Ω–æ–µ');
        
        if (hasData) {
          if (currentSection === 'reviews') reviewCount++;
          else if (currentSection === 'comments') commentCount++;
          else if (currentSection === 'discussions') discussionCount++;
        }
      });
      
      console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–Ø–ú–û–ì–û –¢–ï–°–¢–ê:');
      console.log(`üìù –û—Ç–∑—ã–≤—ã: ${reviewCount}`);
      console.log(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${commentCount}`);
      console.log(`üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: ${discussionCount}`);
      console.log(`üìã –í—Å–µ–≥–æ: ${reviewCount + commentCount + discussionCount}`);
      
      if (reviewCount === 18 && commentCount === 519 && discussionCount > 0) {
        console.log('\nüéâ –ü–†–Ø–ú–û–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!');
        console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      } else {
        console.log('\n‚ùå –ü–†–Ø–ú–û–ô –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù');
        console.log('‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º —Ç–µ—Å—Ç–µ:', error.message);
  }
}

testProcessorDirectly(); 